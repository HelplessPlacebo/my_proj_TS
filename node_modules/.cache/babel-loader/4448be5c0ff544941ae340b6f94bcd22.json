{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { API } from \"../API/requests\";\nimport { stopSubmit } from \"redux-form\";\nconst add_post = 'Profile/ADD_POST';\nconst Set_Profile_Of_User = 'Profile/Set_Profile_Of_User';\nconst Set_Status_Of_User = '/Profile/Set_Status_Of_User';\nconst Set_Photo_Of_User = '/Profile/Set_Photo_Of_User';\nconst Set_Is_My_Page = '/Profile/Set_Is_My_Page';\nconst Set_Own_Name = '/Profile/Set_Own_Name';\nconst Set_IsFetching = '/Profile/Set_IsFetching';\nlet DefaultState = {\n  Posts: [],\n  profile: null,\n  status: \"\",\n  IsMyPage: false,\n  OwnName: \"\",\n  IsFetching: false\n};\n\nconst ProfileReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case add_post:\n      {\n        let NewPost = {\n          id: 6,\n          Post: action.newtext,\n          likesCount: 0\n        };\n        return _objectSpread({}, state, {\n          Posts: [...state.Posts, NewPost]\n        });\n      }\n\n    case Set_Profile_Of_User:\n      {\n        return _objectSpread({}, state, {\n          profile: action.profile\n        });\n      }\n\n    case Set_Status_Of_User:\n      {\n        return _objectSpread({}, state, {\n          status: action.status\n        });\n      }\n\n    case Set_Photo_Of_User:\n      {\n        return _objectSpread({}, state, {\n          profile: _objectSpread({}, state.profile, {\n            photos: action.photo\n          })\n        });\n      }\n\n    case Set_Is_My_Page:\n      {\n        return _objectSpread({}, state, {\n          IsMyPage: action.bool\n        });\n      }\n\n    case Set_Own_Name:\n      {\n        return _objectSpread({}, state, {\n          OwnName: action.MyOwnName\n        });\n      }\n\n    case Set_IsFetching:\n      {\n        return _objectSpread({}, state, {\n          IsFetching: action.IsFetching\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const addpost = text => {\n  return {\n    type: add_post,\n    newtext: text\n  };\n};\nexport const setProfileOfUser = profile => {\n  return {\n    type: Set_Profile_Of_User,\n    profile\n  };\n};\nexport const SetStatusOfUser = status => {\n  return {\n    type: Set_Status_Of_User,\n    status\n  };\n};\nexport const SetPhotoOfUser = photo => {\n  return {\n    type: Set_Photo_Of_User,\n    photo\n  };\n};\nexport const SetIsMyPage = bool => {\n  return {\n    type: Set_Is_My_Page,\n    bool\n  };\n};\nexport const SetOwnName = MyOwnName => {\n  return {\n    type: Set_Own_Name,\n    MyOwnName\n  };\n};\nexport const SetIsFetching = IsFetching => {\n  return {\n    type: Set_IsFetching,\n    IsFetching\n  };\n};\nexport const GetProfileThunk = ProfileID => async (dispatch, getState) => {\n  const MyID = getState().Auth.userId;\n  dispatch(SetIsFetching(true));\n  const Profile = await API.getProfile(ProfileID);\n  dispatch(setProfileOfUser(Profile));\n\n  if (Profile.userId === MyID) {\n    dispatch(SetOwnName(Profile.fullName));\n  }\n\n  dispatch(SetIsFetching(false));\n};\nexport const GetProfileStatusThunk = userID => async dispatch => {\n  dispatch(SetIsFetching(true));\n  const ProfileStatus = await API.getProfileStatus(userID);\n  dispatch(SetStatusOfUser(ProfileStatus));\n  dispatch(SetIsFetching(false));\n};\nexport const SetProfileStatusThunk = status => async dispatch => {\n  const SetProfileStatusResult = await API.setProfileStatus(status);\n\n  if (SetProfileStatusResult.resultCode === 0) {\n    dispatch(SetStatusOfUser(status));\n  }\n};\nexport const SetProfilePhotoThunk = photo => async dispatch => {\n  dispatch(SetIsFetching(true));\n  const LoadPhotoOnServerResult = await API.LoadPhotoOnServer(photo);\n\n  if (LoadPhotoOnServerResult.resultCode === 0) {\n    dispatch(SetPhotoOfUser(LoadPhotoOnServerResult.data.photos));\n  }\n\n  dispatch(SetIsFetching(false));\n};\nexport const UpdateProfileInfoThunk = profile => async (dispatch, getState) => {\n  const profileID = getState().Auth.userId;\n  dispatch(SetIsFetching(true));\n  const PutProfileDataOnServerResult = await API.PutProfileDataOnServer(profile);\n\n  if (PutProfileDataOnServerResult.resultCode === 0) {\n    dispatch(GetProfileThunk(profileID));\n  } else {\n    //@ts-ignore\n    dispatch(stopSubmit(\"ProfileDataEditorForm\", {\n      _error: PutProfileDataOnServerResult.messages[0]\n    }));\n    return Promise.reject(PutProfileDataOnServerResult.messages[0]);\n  }\n\n  dispatch(SetIsFetching(false));\n};\nexport default ProfileReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\ProfileReduser.ts"],"names":["API","stopSubmit","add_post","Set_Profile_Of_User","Set_Status_Of_User","Set_Photo_Of_User","Set_Is_My_Page","Set_Own_Name","Set_IsFetching","DefaultState","Posts","profile","status","IsMyPage","OwnName","IsFetching","ProfileReducer","state","action","type","NewPost","id","Post","newtext","likesCount","photos","photo","bool","MyOwnName","addpost","text","setProfileOfUser","SetStatusOfUser","SetPhotoOfUser","SetIsMyPage","SetOwnName","SetIsFetching","GetProfileThunk","ProfileID","dispatch","getState","MyID","Auth","userId","Profile","getProfile","fullName","GetProfileStatusThunk","userID","ProfileStatus","getProfileStatus","SetProfileStatusThunk","SetProfileStatusResult","setProfileStatus","resultCode","SetProfilePhotoThunk","LoadPhotoOnServerResult","LoadPhotoOnServer","data","UpdateProfileInfoThunk","profileID","PutProfileDataOnServerResult","PutProfileDataOnServer","_error","messages","Promise","reject"],"mappings":"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","sourcesContent":["import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {TPhotos} from \"../components/GlobalTypes/Types\"\r\nimport {NewPostType, TProfile} from \"../components/GlobalTypes/ProfileTypes/ProfileTypes\"\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GlobalState} from \"./redux-store\";\r\n\r\nconst add_post = 'Profile/ADD_POST'\r\nconst Set_Profile_Of_User = 'Profile/Set_Profile_Of_User'\r\nconst Set_Status_Of_User = '/Profile/Set_Status_Of_User'\r\nconst Set_Photo_Of_User = '/Profile/Set_Photo_Of_User'\r\nconst Set_Is_My_Page = '/Profile/Set_Is_My_Page'\r\nconst Set_Own_Name = '/Profile/Set_Own_Name'\r\nconst Set_IsFetching = '/Profile/Set_IsFetching'\r\n\r\n\r\ntype addpostActionType = {\r\n    type: typeof add_post\r\n    newtext: string\r\n}\r\n\r\ntype SetStatusOfUserActionType = {\r\n    type: typeof Set_Status_Of_User\r\n    status: string | null\r\n}\r\ntype SetPhotoOfUserActionType = {\r\n    type: typeof Set_Photo_Of_User\r\n    photo: TPhotos\r\n\r\n}\r\ntype SetIsMyPageActionType = {\r\n    type: typeof Set_Is_My_Page\r\n    bool: boolean\r\n\r\n}\r\ntype SetOwnNameActionType = {\r\n    type: typeof Set_Own_Name\r\n    MyOwnName: string\r\n}\r\ntype SetIsFetchingActionType = {\r\n    type: typeof Set_IsFetching\r\n    IsFetching: boolean\r\n}\r\ntype setProfileOfUserActionType = {\r\n    type: typeof Set_Profile_Of_User\r\n    profile: TProfile\r\n}\r\n\r\nexport type TProfileReducerActions = addpostActionType | SetStatusOfUserActionType | SetPhotoOfUserActionType\r\n    | SetIsMyPageActionType | SetOwnNameActionType | SetIsFetchingActionType\r\n    | setProfileOfUserActionType\r\n\r\ntype TProfileThunks = ThunkAction<Promise<void>, GlobalState, unknown, TProfileReducerActions>\r\n\r\nlet DefaultState = {\r\n    Posts: [] as Array<NewPostType>,\r\n    profile: null as TProfile | null,\r\n    status: \"\" as string | null,\r\n    IsMyPage: false,\r\n    OwnName: \"\" as string,\r\n    IsFetching: false\r\n}\r\ntype DefaultProfileState = typeof DefaultState\r\n\r\n\r\nconst ProfileReducer = (state = DefaultState, action: TProfileReducerActions): DefaultProfileState => {\r\n    switch (action.type) {\r\n        case add_post: {\r\n            let NewPost = {\r\n                id: 6,\r\n                Post: action.newtext,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                Posts: [...state.Posts, NewPost],\r\n            }\r\n        }\r\n        case Set_Profile_Of_User: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case Set_Status_Of_User: {\r\n            return {...state, status: action.status}\r\n        }\r\n        case Set_Photo_Of_User: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photo} as TProfile\r\n            }\r\n        }\r\n        case Set_Is_My_Page: {\r\n            return {...state, IsMyPage: action.bool}\r\n        }\r\n        case Set_Own_Name: {\r\n            return {...state, OwnName: action.MyOwnName}\r\n        }\r\n        case Set_IsFetching: {\r\n            return {...state, IsFetching: action.IsFetching}\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addpost = (text: string): addpostActionType => {\r\n    return {type: add_post, newtext: text}\r\n}\r\n\r\nexport const setProfileOfUser = (profile: TProfile): setProfileOfUserActionType => {\r\n    return {type: Set_Profile_Of_User, profile}\r\n}\r\n\r\nexport const SetStatusOfUser = (status: string | null): SetStatusOfUserActionType => {\r\n    return {type: Set_Status_Of_User, status}\r\n}\r\n\r\nexport const SetPhotoOfUser = (photo: any): SetPhotoOfUserActionType => {\r\n    return {type: Set_Photo_Of_User, photo}\r\n}\r\n\r\nexport const SetIsMyPage = (bool: boolean): SetIsMyPageActionType => {\r\n    return {type: Set_Is_My_Page, bool}\r\n}\r\nexport const SetOwnName = (MyOwnName: string): SetOwnNameActionType => {\r\n    return {type: Set_Own_Name, MyOwnName}\r\n}\r\nexport const SetIsFetching = (IsFetching: boolean): SetIsFetchingActionType => {\r\n    return {type: Set_IsFetching, IsFetching}\r\n}\r\n\r\n\r\nexport const GetProfileThunk = (ProfileID: number | null): TProfileThunks => async (dispatch, getState) => {\r\n    const MyID = getState().Auth.userId\r\n    dispatch(SetIsFetching(true))\r\n    const Profile = await API.getProfile(ProfileID)\r\n    dispatch(setProfileOfUser(Profile))\r\n    if (Profile.userId === MyID) {\r\n        dispatch(SetOwnName(Profile.fullName))\r\n    }\r\n    dispatch(SetIsFetching(false))\r\n}\r\n\r\n\r\nexport const GetProfileStatusThunk = (userID: number | null): TProfileThunks => async (dispatch) => {\r\n    dispatch(SetIsFetching(true))\r\n    const ProfileStatus = await API.getProfileStatus(userID)\r\n    dispatch(SetStatusOfUser(ProfileStatus))\r\n    dispatch(SetIsFetching(false))\r\n}\r\n\r\nexport const SetProfileStatusThunk = (status: string | null): TProfileThunks => async (dispatch) => {\r\n    const SetProfileStatusResult = await API.setProfileStatus(status)\r\n    if (SetProfileStatusResult.resultCode === 0) {\r\n        dispatch(SetStatusOfUser(status))\r\n    }\r\n}\r\n\r\nexport const SetProfilePhotoThunk = (photo: File): TProfileThunks => async (dispatch) => {\r\n    dispatch(SetIsFetching(true))\r\n    const LoadPhotoOnServerResult = await API.LoadPhotoOnServer(photo)\r\n    if (LoadPhotoOnServerResult.resultCode === 0) {\r\n        dispatch(SetPhotoOfUser(LoadPhotoOnServerResult.data.photos))\r\n    }\r\n    dispatch(SetIsFetching(false))\r\n}\r\n\r\nexport const UpdateProfileInfoThunk = (profile: TProfile): TProfileThunks => async (dispatch, getState) => {\r\n    const profileID = getState().Auth.userId\r\n    dispatch(SetIsFetching(true))\r\n    const PutProfileDataOnServerResult = await API.PutProfileDataOnServer(profile)\r\n    if (PutProfileDataOnServerResult.resultCode === 0) {\r\n        dispatch(GetProfileThunk(profileID))\r\n    } else {\r\n        //@ts-ignore\r\n        dispatch(stopSubmit(\"ProfileDataEditorForm\", {_error: PutProfileDataOnServerResult.messages[0]}))\r\n        return Promise.reject(PutProfileDataOnServerResult.messages[0])\r\n    }\r\n    dispatch(SetIsFetching(false))\r\n}\r\n\r\n\r\nexport default ProfileReducer"]},"metadata":{},"sourceType":"module"}