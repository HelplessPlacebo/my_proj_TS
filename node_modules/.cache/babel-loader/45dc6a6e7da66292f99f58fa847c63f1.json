{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { API } from \"../API/requests\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_TO_DO_LISTS = 'ToDoLists/SET_TO_DO_LISTS';\nconst SET_TO_DO_LIST_TASKS_Page = 'ToDoLists/SET_TO_DO_LIST_TASKS_Page';\nconst SET_TO_DO_LISTS_TASKS_Count = 'ToDoLists/SET_TO_DO_LISTS_TASKS_Count';\nconst SET_TO_DO_LIST_TASKS = 'ToDoLists/SET_TO_DO_LIST_TASKS';\nconst IsFetching_Toggle = 'ToDoLists/IsFetching_Toggle';\nlet DefaultState = {\n  ToDoLists: [],\n  ToDoListTasks: [],\n  ToDoListTasksPage: 1,\n  ToDoListTasksCount: 10,\n  IsFetching: false\n};\n\nconst ToDoListsReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case SET_TO_DO_LISTS:\n      {\n        return _objectSpread({}, state, {\n          ToDoLists: action.NewToDoLists\n        });\n      }\n\n    case SET_TO_DO_LIST_TASKS_Page:\n      {\n        return _objectSpread({}, state, {\n          ToDoListTasksPage: action.NewToDoListTasksPage\n        });\n      }\n\n    case SET_TO_DO_LISTS_TASKS_Count:\n      {\n        return _objectSpread({}, state, {\n          ToDoListTasksCount: action.NewToDoListTasksCount\n        });\n      }\n\n    /* case SET_TO_DO_LIST_TASKS: {\r\n         return {...state, ToDoListTasks: action.Tasks}\r\n     } */\n\n    case SET_TO_DO_LIST_TASKS:\n      {\n        let NewTask = {\n          ListId: action.ListID,\n          TaskData: action.Tasks\n        };\n        return _objectSpread({}, state, {\n          ToDoListTasks: [...state.ToDoListTasks, NewTask]\n        });\n      }\n\n    case IsFetching_Toggle:\n      {\n        return _objectSpread({}, state, {\n          IsFetching: action.IsFetching\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const SetToDoLists = NewToDoLists => {\n  return {\n    type: SET_TO_DO_LISTS,\n    NewToDoLists\n  };\n};\nexport const SetToDoListTasksPage = NewToDoListTasksPage => {\n  return {\n    type: SET_TO_DO_LIST_TASKS_Page,\n    NewToDoListTasksPage\n  };\n};\nexport const SetToDoListTasksCount = NewToDoListTasksCount => {\n  return {\n    type: SET_TO_DO_LISTS_TASKS_Count,\n    NewToDoListTasksCount\n  };\n};\nexport const SetToDoListTasks = (Tasks, ListID) => {\n  return {\n    type: SET_TO_DO_LIST_TASKS,\n    Tasks,\n    ListID\n  };\n};\nexport const ToggleIsFetching = IsFetching => {\n  return {\n    type: IsFetching_Toggle,\n    IsFetching\n  };\n};\nexport const GetToDoListsThunk = () => async dispatch => {\n  const ResponseData = await API.GetToDoLists();\n  dispatch(SetToDoLists(ResponseData.data));\n};\nexport const AddNewToDoListsThunk = title => async dispatch => {\n  await API.CreateNewToDoList(title);\n  dispatch(GetToDoListsThunk());\n};\nexport const DeleteToDoListThunk = ToDoListID => async dispatch => {\n  await API.DeleteToDoList(ToDoListID);\n  dispatch(GetToDoListsThunk());\n};\nexport const ChangeToDoListTitleThunk = (ToDoListID, Newtitle) => async dispatch => {\n  await API.ChangeToDoListTitle(ToDoListID, Newtitle);\n  dispatch(GetToDoListsThunk());\n};\nexport const GetToDoListTasksThunk = (ToDoListID, count, page) => async dispatch => {\n  dispatch(ToggleIsFetching(true));\n  const DataResponse = await API.GetToDoListTasks(ToDoListID, count, page);\n\n  if (!DataResponse.data.error) {\n    dispatch(SetToDoListTasks(DataResponse.data, ToDoListID));\n  }\n\n  dispatch(ToggleIsFetching(false));\n};\nexport const AddNewTaskThunk = (ToDoListID, TaskTitle) => async dispatch => {\n  const DataResponse = await API.CreateNewTakForToDoList(ToDoListID, TaskTitle);\n\n  if (DataResponse.data.resultCode === 0) {\n    dispatch(GetToDoListTasksThunk(ToDoListID));\n  }\n\n  debugger;\n};\nexport default ToDoListsReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\ToDoListsReducer.js"],"names":["API","stopSubmit","SET_TO_DO_LISTS","SET_TO_DO_LIST_TASKS_Page","SET_TO_DO_LISTS_TASKS_Count","SET_TO_DO_LIST_TASKS","IsFetching_Toggle","DefaultState","ToDoLists","ToDoListTasks","ToDoListTasksPage","ToDoListTasksCount","IsFetching","ToDoListsReducer","state","action","type","NewToDoLists","NewToDoListTasksPage","NewToDoListTasksCount","NewTask","ListId","ListID","TaskData","Tasks","SetToDoLists","SetToDoListTasksPage","SetToDoListTasksCount","SetToDoListTasks","ToggleIsFetching","GetToDoListsThunk","dispatch","ResponseData","GetToDoLists","data","AddNewToDoListsThunk","title","CreateNewToDoList","DeleteToDoListThunk","ToDoListID","DeleteToDoList","ChangeToDoListTitleThunk","Newtitle","ChangeToDoListTitle","GetToDoListTasksThunk","count","page","DataResponse","GetToDoListTasks","error","AddNewTaskThunk","TaskTitle","CreateNewTakForToDoList","resultCode"],"mappings":";AAAA,SAAQA,GAAR,QAAkB,iBAAlB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAGA,MAAMC,eAAe,GAAG,2BAAxB;AACA,MAAMC,yBAAyB,GAAG,qCAAlC;AACA,MAAMC,2BAA2B,GAAG,uCAApC;AACA,MAAMC,oBAAoB,GAAG,gCAA7B;AACA,MAAMC,iBAAiB,GAAG,6BAA1B;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,SAAS,EAAE,EADI;AAEfC,EAAAA,aAAa,EAAG,EAFD;AAGfC,EAAAA,iBAAiB,EAAE,CAHJ;AAIfC,EAAAA,kBAAkB,EAAE,EAJL;AAKfC,EAAAA,UAAU,EAAG;AALE,CAAnB;;AAQA,MAAMC,gBAAgB,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,eAAL;AAAsB;AAClB,iCAAWY,KAAX;AAAkBN,UAAAA,SAAS,EAAEO,MAAM,CAACE;AAApC;AACH;;AACD,SAAKd,yBAAL;AAAgC;AAC5B,iCAAWW,KAAX;AAAkBJ,UAAAA,iBAAiB,EAAEK,MAAM,CAACG;AAA5C;AACH;;AACD,SAAKd,2BAAL;AAAkC;AAC9B,iCAAWU,KAAX;AAAkBH,UAAAA,kBAAkB,EAAEI,MAAM,CAACI;AAA7C;AACH;;AACF;;;;AAGC,SAAKd,oBAAL;AAA2B;AACvB,YAAIe,OAAO,GAAG;AAEVC,UAAAA,MAAM,EAAEN,MAAM,CAACO,MAFL;AAGVC,UAAAA,QAAQ,EAAER,MAAM,CAACS;AAHP,SAAd;AAMA,iCACOV,KADP;AAEIL,UAAAA,aAAa,EAAE,CAAC,GAAGK,KAAK,CAACL,aAAV,EAAyBW,OAAzB;AAFnB;AAIH;;AAED,SAAKd,iBAAL;AAAuB;AACnB,iCAAWQ,KAAX;AAAkBF,UAAAA,UAAU,EAAEG,MAAM,CAACH;AAArC;AACH;;AACD;AACI,aAAOE,KAAP;AA9BR;AAgCH,CAjCD;;AAoCA,OAAO,MAAMW,YAAY,GAAIR,YAAD,IAAkB;AAC1C,SAAO;AAACD,IAAAA,IAAI,EAAEd,eAAP;AAAwBe,IAAAA;AAAxB,GAAP;AACH,CAFM;AAGP,OAAO,MAAMS,oBAAoB,GAAIR,oBAAD,IAA0B;AAC1D,SAAO;AAACF,IAAAA,IAAI,EAAEb,yBAAP;AAAkCe,IAAAA;AAAlC,GAAP;AACH,CAFM;AAGP,OAAO,MAAMS,qBAAqB,GAAIR,qBAAD,IAA2B;AAC5D,SAAO;AAACH,IAAAA,IAAI,EAAEZ,2BAAP;AAAoCe,IAAAA;AAApC,GAAP;AACH,CAFM;AAGP,OAAO,MAAMS,gBAAgB,GAAG,CAACJ,KAAD,EAAOF,MAAP,KAAkB;AAC9C,SAAO;AAACN,IAAAA,IAAI,EAAEX,oBAAP;AAA6BmB,IAAAA,KAA7B;AAAmCF,IAAAA;AAAnC,GAAP;AACH,CAFM;AAGP,OAAO,MAAMO,gBAAgB,GAAIjB,UAAD,IAAgB;AAC5C,SAAO;AAACI,IAAAA,IAAI,EAAGV,iBAAR;AAA2BM,IAAAA;AAA3B,GAAP;AACH,CAFM;AAMP,OAAO,MAAMkB,iBAAiB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACvD,QAAMC,YAAY,GAAG,MAAMhC,GAAG,CAACiC,YAAJ,EAA3B;AACAF,EAAAA,QAAQ,CAACN,YAAY,CAACO,YAAY,CAACE,IAAd,CAAb,CAAR;AACH,CAHM;AAKP,OAAO,MAAMC,oBAAoB,GAAIC,KAAD,IAAW,MAAOL,QAAP,IAAoB;AAClE,QAAM/B,GAAG,CAACqC,iBAAJ,CAAsBD,KAAtB,CAAN;AACOL,EAAAA,QAAQ,CAACD,iBAAiB,EAAlB,CAAR;AACP,CAHM;AAKP,OAAO,MAAMQ,mBAAmB,GAAIC,UAAD,IAAgB,MAAOR,QAAP,IAAoB;AACnE,QAAM/B,GAAG,CAACwC,cAAJ,CAAmBD,UAAnB,CAAN;AACAR,EAAAA,QAAQ,CAACD,iBAAiB,EAAlB,CAAR;AACH,CAHM;AAKP,OAAO,MAAMW,wBAAwB,GAAG,CAACF,UAAD,EAAaG,QAAb,KAA0B,MAAOX,QAAP,IAAoB;AAClF,QAAM/B,GAAG,CAAC2C,mBAAJ,CAAwBJ,UAAxB,EAAoCG,QAApC,CAAN;AACIX,EAAAA,QAAQ,CAACD,iBAAiB,EAAlB,CAAR;AACP,CAHM;AAKP,OAAO,MAAMc,qBAAqB,GAAG,CAACL,UAAD,EAAaM,KAAb,EAAmBC,IAAnB,KAA4B,MAAOf,QAAP,IAAoB;AACjFA,EAAAA,QAAQ,CAACF,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACD,QAAMkB,YAAY,GAAG,MAAM/C,GAAG,CAACgD,gBAAJ,CAAqBT,UAArB,EAAiCM,KAAjC,EAAwCC,IAAxC,CAA3B;;AACC,MAAG,CAACC,YAAY,CAACb,IAAb,CAAkBe,KAAtB,EAA6B;AACzBlB,IAAAA,QAAQ,CAACH,gBAAgB,CAACmB,YAAY,CAACb,IAAd,EAAmBK,UAAnB,CAAjB,CAAR;AACH;;AACDR,EAAAA,QAAQ,CAACF,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACH,CAPM;AASP,OAAO,MAAMqB,eAAe,GAAG,CAACX,UAAD,EAAaY,SAAb,KAA2B,MAAOpB,QAAP,IAAoB;AAC5E,QAAMgB,YAAY,GAAG,MAAM/C,GAAG,CAACoD,uBAAJ,CAA4Bb,UAA5B,EAAwCY,SAAxC,CAA3B;;AACE,MAAGJ,YAAY,CAACb,IAAb,CAAkBmB,UAAlB,KAAiC,CAApC,EAAuC;AACnCtB,IAAAA,QAAQ,CAACa,qBAAqB,CAACL,UAAD,CAAtB,CAAR;AACH;;AACD;AACH,CANM;AASP,eAAe1B,gBAAf","sourcesContent":["import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_TO_DO_LISTS = 'ToDoLists/SET_TO_DO_LISTS';\r\nconst SET_TO_DO_LIST_TASKS_Page = 'ToDoLists/SET_TO_DO_LIST_TASKS_Page';\r\nconst SET_TO_DO_LISTS_TASKS_Count = 'ToDoLists/SET_TO_DO_LISTS_TASKS_Count';\r\nconst SET_TO_DO_LIST_TASKS = 'ToDoLists/SET_TO_DO_LIST_TASKS';\r\nconst IsFetching_Toggle = 'ToDoLists/IsFetching_Toggle';\r\n\r\n\r\nlet DefaultState = {\r\n    ToDoLists: [],\r\n    ToDoListTasks : [],\r\n    ToDoListTasksPage: 1,\r\n    ToDoListTasksCount: 10,\r\n    IsFetching : false\r\n}\r\n\r\nconst ToDoListsReducer = (state = DefaultState, action) => {\r\n    switch (action.type) {\r\n        case SET_TO_DO_LISTS: {\r\n            return {...state, ToDoLists: action.NewToDoLists}\r\n        }\r\n        case SET_TO_DO_LIST_TASKS_Page: {\r\n            return {...state, ToDoListTasksPage: action.NewToDoListTasksPage}\r\n        }\r\n        case SET_TO_DO_LISTS_TASKS_Count: {\r\n            return {...state, ToDoListTasksCount: action.NewToDoListTasksCount}\r\n        }\r\n       /* case SET_TO_DO_LIST_TASKS: {\r\n            return {...state, ToDoListTasks: action.Tasks}\r\n        } */\r\n        case SET_TO_DO_LIST_TASKS: {\r\n            let NewTask = {\r\n               \r\n                ListId: action.ListID,\r\n                TaskData: action.Tasks,\r\n\r\n            };\r\n            return {\r\n                ...state,\r\n                ToDoListTasks: [...state.ToDoListTasks, NewTask]\r\n            }\r\n        }\r\n\r\n        case IsFetching_Toggle:{\r\n            return {...state, IsFetching: action.IsFetching}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const SetToDoLists = (NewToDoLists) => {\r\n    return {type: SET_TO_DO_LISTS, NewToDoLists}\r\n}\r\nexport const SetToDoListTasksPage = (NewToDoListTasksPage) => {\r\n    return {type: SET_TO_DO_LIST_TASKS_Page, NewToDoListTasksPage}\r\n}\r\nexport const SetToDoListTasksCount = (NewToDoListTasksCount) => {\r\n    return {type: SET_TO_DO_LISTS_TASKS_Count, NewToDoListTasksCount}\r\n}\r\nexport const SetToDoListTasks = (Tasks,ListID) => {\r\n    return {type: SET_TO_DO_LIST_TASKS, Tasks,ListID}\r\n}\r\nexport const ToggleIsFetching = (IsFetching) => {\r\n    return {type : IsFetching_Toggle, IsFetching}\r\n}\r\n\r\n\r\n\r\nexport const GetToDoListsThunk = () => async (dispatch) => {\r\n    const ResponseData = await API.GetToDoLists()\r\n    dispatch(SetToDoLists(ResponseData.data))\r\n}\r\n\r\nexport const AddNewToDoListsThunk = (title) => async (dispatch) => {\r\n await API.CreateNewToDoList(title)\r\n        dispatch(GetToDoListsThunk())\r\n}\r\n\r\nexport const DeleteToDoListThunk = (ToDoListID) => async (dispatch) => {\r\n    await API.DeleteToDoList(ToDoListID)\r\n    dispatch(GetToDoListsThunk())\r\n}\r\n\r\nexport const ChangeToDoListTitleThunk = (ToDoListID, Newtitle) => async (dispatch) => {\r\n    await API.ChangeToDoListTitle(ToDoListID, Newtitle)\r\n        dispatch(GetToDoListsThunk())\r\n}\r\n\r\nexport const GetToDoListTasksThunk = (ToDoListID, count,page) => async (dispatch) => {\r\n    dispatch(ToggleIsFetching(true))\r\n   const DataResponse = await API.GetToDoListTasks(ToDoListID, count, page)\r\n    if(!DataResponse.data.error) {\r\n        dispatch(SetToDoListTasks(DataResponse.data,ToDoListID))\r\n    }\r\n    dispatch(ToggleIsFetching(false))\r\n}\r\n\r\nexport const AddNewTaskThunk = (ToDoListID, TaskTitle) => async (dispatch) => {\r\n  const DataResponse = await API.CreateNewTakForToDoList(ToDoListID, TaskTitle)\r\n    if(DataResponse.data.resultCode === 0) {\r\n        dispatch(GetToDoListTasksThunk(ToDoListID))\r\n    }\r\n    debugger\r\n}\r\n\r\n\r\nexport default ToDoListsReducer"]},"metadata":{},"sourceType":"module"}