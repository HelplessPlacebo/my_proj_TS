{"ast":null,"code":"var _jsxFileName = \"H:\\\\js_projects\\\\1\\\\my-app\\\\src\\\\components\\\\Users\\\\UsersContainer.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { OnFollow, onUnFollow, SetCurrentPage, getUsersThunk, ToggleInProcess } from \"../../data/UsersReduser\";\nimport PurifyUsers from \"./Users\";\nimport Preloader from \"../assetss/common/Loader/Loader\";\n\nclass UsersAPItoServer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.OnChangedPage = pageNumber => {\n      this.props.SetCurrentPage(pageNumber);\n      this.props.getUsersThunk(pageNumber, this.props.pageSize);\n    };\n  }\n\n  /* this component using for make requests on server for a new users and drawing\r\n  Ui component (Users)*/\n  componentDidMount() {\n    // это что-то типо конструктора, принято все вещи, которые нарушают идею чистых функцию писать тут\n    this.props.getUsersThunk(this.props.currentPage, this.props.pageSize);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.props.IsFetching ? React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }) : null, React.createElement(PurifyUsers, {\n      Users: this.props.Users,\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      OnChangedPage: this.OnChangedPage,\n      onFollow: this.props.OnFollow,\n      onUnFollow: this.props.onUnFollow,\n      currentPage: this.props.currentPage,\n      ToggleInProcess: this.props.ToggleInProcess,\n      InProcess: this.props.InProcess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }));\n  }\n\n}\n\nlet StateToProps = state => {\n  return {\n    Users: state.UsersData.Users,\n    pageSize: state.UsersData.pageSize,\n    totalUsersCount: state.UsersData.totalUsersCount,\n    currentPage: state.UsersData.currentPage,\n    IsFetching: state.UsersData.IsFetching,\n    InProcess: state.UsersData.InProcess\n  };\n};\n/*let DispatchToProps = (dispatch) => {\r\n    return {\r\n        onFollow: (userID) => {\r\n\r\n            dispatch(follow_AC(userID))\r\n        },\r\n        onUnFollow: (userID) => {\r\n\r\n            dispatch(unfollow_AC(userID))\r\n        },\r\n        setUsers: (Users) => {\r\n            dispatch(setUsers_AC(Users))\r\n        },\r\n        SetCurrentPage: (NumberOfPage) => {\r\n            dispatch(setCurrentPage_AC(NumberOfPage))\r\n        },\r\n        SetTotalCountOfUsers: (totalCount) => {\r\n            dispatch(SetTotalCountOfUsers_AC(totalCount))\r\n        },\r\n        ToggleIsFetching: (IsFetching) => {\r\n            dispatch(IsFetchingToggle_AC(IsFetching))\r\n        }\r\n    }\r\n}*/\n\n\nconst UsersContainer = connect(StateToProps, {\n  OnFollow,\n  onUnFollow,\n  SetCurrentPage,\n  ToggleInProcess,\n  getUsersThunk\n})(UsersAPItoServer);\nexport default UsersContainer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\components\\Users\\UsersContainer.jsx"],"names":["React","connect","OnFollow","onUnFollow","SetCurrentPage","getUsersThunk","ToggleInProcess","PurifyUsers","Preloader","UsersAPItoServer","Component","OnChangedPage","pageNumber","props","pageSize","componentDidMount","currentPage","render","IsFetching","Users","totalUsersCount","InProcess","StateToProps","state","UsersData","UsersContainer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SACIC,QADJ,EAEIC,UAFJ,EAGIC,cAHJ,EAIIC,aAJJ,EAKIC,eALJ,QAMO,yBANP;AAOA,OAAOC,WAAP,MAAwB,SAAxB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;;AAEA,MAAMC,gBAAN,SAA+BT,KAAK,CAACU,SAArC,CAA+C;AAAA;AAAA;;AAAA,SAS3CC,aAT2C,GAS1BC,UAAD,IAAgB;AAC5B,WAAKC,KAAL,CAAWT,cAAX,CAA0BQ,UAA1B;AACA,WAAKC,KAAL,CAAWR,aAAX,CAAyBO,UAAzB,EAAoC,KAAKC,KAAL,CAAWC,QAA/C;AAEH,KAb0C;AAAA;;AAC3C;;AAGAC,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKF,KAAL,CAAWR,aAAX,CAAyB,KAAKQ,KAAL,CAAWG,WAApC,EAAgD,KAAKH,KAAL,CAAWC,QAA3D;AACH;;AAQDG,EAAAA,MAAM,GAAG;AAEL,WAAO,0CACF,KAAKJ,KAAL,CAAWK,UAAX,GAAwB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxB,GAAsC,IADpC,EAEP,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWM,KAA/B;AACoB,MAAA,eAAe,EAAE,KAAKN,KAAL,CAAWO,eADhD;AAEoB,MAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWC,QAFzC;AAGoB,MAAA,aAAa,EAAE,KAAKH,aAHxC;AAIoB,MAAA,QAAQ,EAAE,KAAKE,KAAL,CAAWX,QAJzC;AAKoB,MAAA,UAAU,EAAE,KAAKW,KAAL,CAAWV,UAL3C;AAMoB,MAAA,WAAW,EAAE,KAAKU,KAAL,CAAWG,WAN5C;AAOoB,MAAA,eAAe,EAAE,KAAKH,KAAL,CAAWP,eAPhD;AAQoB,MAAA,SAAS,EAAE,KAAKO,KAAL,CAAWQ,SAR1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFO,CAAP;AAYH;;AA7B0C;;AAgC/C,IAAIC,YAAY,GAAIC,KAAD,IAAW;AAC1B,SAAO;AACHJ,IAAAA,KAAK,EAAEI,KAAK,CAACC,SAAN,CAAgBL,KADpB;AAEHL,IAAAA,QAAQ,EAAES,KAAK,CAACC,SAAN,CAAgBV,QAFvB;AAGHM,IAAAA,eAAe,EAAEG,KAAK,CAACC,SAAN,CAAgBJ,eAH9B;AAIHJ,IAAAA,WAAW,EAAEO,KAAK,CAACC,SAAN,CAAgBR,WAJ1B;AAKHE,IAAAA,UAAU,EAAGK,KAAK,CAACC,SAAN,CAAgBN,UAL1B;AAMHG,IAAAA,SAAS,EAAGE,KAAK,CAACC,SAAN,CAAgBH;AANzB,GAAP;AAQH,CATD;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAMI,cAAc,GAAGxB,OAAO,CAACqB,YAAD,EAC1B;AAACpB,EAAAA,QAAD;AAAUC,EAAAA,UAAV;AAAqBC,EAAAA,cAArB;AAAoCE,EAAAA,eAApC;AAAoDD,EAAAA;AAApD,CAD0B,CAAP,CACkDI,gBADlD,CAAvB;AAGA,eAAegB,cAAf","sourcesContent":["import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    OnFollow,\r\n    onUnFollow,\r\n    SetCurrentPage,\r\n    getUsersThunk,\r\n    ToggleInProcess\r\n} from \"../../data/UsersReduser\";\r\nimport PurifyUsers from \"./Users\";\r\nimport Preloader from \"../assetss/common/Loader/Loader\";\r\n\r\nclass UsersAPItoServer extends React.Component {\r\n    /* this component using for make requests on server for a new users and drawing\r\nUi component (Users)*/\r\n\r\n    componentDidMount() {\r\n        // это что-то типо конструктора, принято все вещи, которые нарушают идею чистых функцию писать тут\r\n        this.props.getUsersThunk(this.props.currentPage,this.props.pageSize)\r\n    }\r\n\r\n    OnChangedPage = (pageNumber) => {\r\n        this.props.SetCurrentPage(pageNumber)\r\n        this.props.getUsersThunk(pageNumber,this.props.pageSize)\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.IsFetching ? <Preloader/> :null}\r\n        <PurifyUsers Users={this.props.Users}\r\n                            totalUsersCount={this.props.totalUsersCount}\r\n                            pageSize={this.props.pageSize}\r\n                            OnChangedPage={this.OnChangedPage}\r\n                            onFollow={this.props.OnFollow}\r\n                            onUnFollow={this.props.onUnFollow}\r\n                            currentPage={this.props.currentPage}\r\n                            ToggleInProcess={this.props.ToggleInProcess}\r\n                            InProcess={this.props.InProcess}/>\r\n                            </>\r\n    }\r\n}\r\n\r\nlet StateToProps = (state) => {\r\n    return {\r\n        Users: state.UsersData.Users,\r\n        pageSize: state.UsersData.pageSize,\r\n        totalUsersCount: state.UsersData.totalUsersCount,\r\n        currentPage: state.UsersData.currentPage,\r\n        IsFetching : state.UsersData.IsFetching,\r\n        InProcess : state.UsersData.InProcess\r\n    }\r\n}\r\n\r\n/*let DispatchToProps = (dispatch) => {\r\n    return {\r\n        onFollow: (userID) => {\r\n\r\n            dispatch(follow_AC(userID))\r\n        },\r\n        onUnFollow: (userID) => {\r\n\r\n            dispatch(unfollow_AC(userID))\r\n        },\r\n        setUsers: (Users) => {\r\n            dispatch(setUsers_AC(Users))\r\n        },\r\n        SetCurrentPage: (NumberOfPage) => {\r\n            dispatch(setCurrentPage_AC(NumberOfPage))\r\n        },\r\n        SetTotalCountOfUsers: (totalCount) => {\r\n            dispatch(SetTotalCountOfUsers_AC(totalCount))\r\n        },\r\n        ToggleIsFetching: (IsFetching) => {\r\n            dispatch(IsFetchingToggle_AC(IsFetching))\r\n        }\r\n    }\r\n}*/\r\n\r\nconst UsersContainer = connect(StateToProps,\r\n    {OnFollow,onUnFollow,SetCurrentPage,ToggleInProcess,getUsersThunk}) (UsersAPItoServer)\r\n\r\nexport default UsersContainer"]},"metadata":{},"sourceType":"module"}