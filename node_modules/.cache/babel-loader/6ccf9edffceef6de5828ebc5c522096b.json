{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { API } from \"../API/requests\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'Auth/SET_USER_DATA';\nconst IsFetching_Toggle = 'Auth/IsFetching_Toggle';\nconst Set_Captcha_Url = 'Auth/Set_Captcha_Url';\nlet DefaultState = {\n  IsLogined: false,\n  IsFetching: false,\n  CaptchaUrl: null,\n  userId: null,\n  login: null,\n  email: null\n};\n\nconst AuthReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      {\n        return _objectSpread({}, state, action.data);\n      }\n\n    case IsFetching_Toggle:\n      {\n        return _objectSpread({}, state, {\n          IsFetching: action.IsFetching\n        });\n      }\n\n    case Set_Captcha_Url:\n      {\n        return _objectSpread({}, state, {\n          CaptchaUrl: action.CaptchaURL\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAuthUser = (userId, email, login, IsLogined) => ({\n  type: SET_USER_DATA,\n  data: {\n    userId,\n    email,\n    login,\n    IsLogined\n  }\n});\nexport const ToggleIsFetching = IsFetching => {\n  return {\n    type: IsFetching_Toggle,\n    IsFetching\n  };\n};\nexport const SetCaptchaUrl = CaptchaURL => {\n  return {\n    type: Set_Captcha_Url,\n    CaptchaURL\n  };\n};\nexport const AuthMeThunk = () => async dispatch => {\n  ToggleIsFetching(true);\n  const data = await API.AuthMe(); //возвращает данные авторизованного юзера\n\n  dispatch(ToggleIsFetching(false));\n\n  if (data.resultCode === 0) {\n    let _data$data = data.data,\n        id = _data$data.id,\n        login = _data$data.login,\n        email = _data$data.email;\n    dispatch(SetAuthUser(id, email, login, true));\n  }\n};\nexport const LoginThunk = (email, password, rememberMe = false, captcha) => async dispatch => {\n  const data = await API.Login(email, password, rememberMe, captcha);\n\n  if (data.resultCode === 0) {\n    dispatch(AuthMeThunk());\n  } else {\n    if (data.resultCode === 10) {\n      dispatch(GetCaptchaThunk());\n    }\n\n    dispatch(stopSubmit(\"login\", {\n      _error: data.messages[0]\n    }));\n  }\n};\nexport const LogOutThunk = () => async dispatch => {\n  const data = await API.LogOut();\n\n  if (data.resultCode === 0) {\n    dispatch(SetAuthUser(null, null, null, false));\n  }\n};\nexport const GetCaptchaThunk = () => async dispatch => {\n  const data = await API.GetCaptchaFromServer();\n  const captchaURL = data.url;\n  dispatch(SetCaptchaUrl(captchaURL));\n};\nexport default AuthReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\AuthReducer.ts"],"names":["API","stopSubmit","SET_USER_DATA","IsFetching_Toggle","Set_Captcha_Url","DefaultState","IsLogined","IsFetching","CaptchaUrl","userId","login","email","AuthReducer","state","action","type","data","CaptchaURL","SetAuthUser","ToggleIsFetching","SetCaptchaUrl","AuthMeThunk","dispatch","AuthMe","resultCode","id","LoginThunk","password","rememberMe","captcha","Login","GetCaptchaThunk","_error","messages","LogOutThunk","LogOut","GetCaptchaFromServer","captchaURL","url"],"mappings":"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","sourcesContent":["import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_USER_DATA = 'Auth/SET_USER_DATA'\r\nconst IsFetching_Toggle = 'Auth/IsFetching_Toggle'\r\nconst Set_Captcha_Url = 'Auth/Set_Captcha_Url'\r\n\r\nlet DefaultState = {\r\n    IsLogined: false,\r\n    IsFetching: false,\r\n    CaptchaUrl: null as string | null,\r\n    userId : null as number | null,\r\n    login : null as string | null,\r\n    email : null as string | null\r\n\r\n}\r\n\r\ntype DefaultAuthState = typeof DefaultState\r\n\r\nexport type SetAuthUserActionType = {\r\n    type: typeof SET_USER_DATA,\r\n    data: {\r\n        userId: number | null\r\n        email: string | null\r\n        login: string | null\r\n        IsLogined: boolean\r\n    }\r\n}\r\nexport type ToggleIsFetchingActionType = {\r\n    type : typeof  IsFetching_Toggle,\r\n    IsFetching : boolean\r\n}\r\n\r\n\r\nexport type SetCaptchaUrlActionType = {\r\n    type : typeof Set_Captcha_Url,\r\n    CaptchaURL : string\r\n}\r\n\r\n\r\nconst AuthReducer = (state: DefaultAuthState = DefaultState, action : any ): DefaultAuthState => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA : {\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        }\r\n        case IsFetching_Toggle: {\r\n            return {...state, IsFetching: action.IsFetching}\r\n        }\r\n        case Set_Captcha_Url: {\r\n            return {...state, CaptchaUrl: action.CaptchaURL}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetAuthUser = (userId: number | null, email: string |null, login: string | null, IsLogined: boolean): SetAuthUserActionType =>\r\n    ({type: SET_USER_DATA, data: {userId, email, login, IsLogined}})\r\n\r\nexport const ToggleIsFetching = (IsFetching : boolean) : ToggleIsFetchingActionType => {\r\n    return {type: IsFetching_Toggle, IsFetching}\r\n}\r\nexport const SetCaptchaUrl = (CaptchaURL : string) :SetCaptchaUrlActionType  => {\r\n    return {type: Set_Captcha_Url, CaptchaURL}\r\n}\r\n\r\nexport const AuthMeThunk = () => async (dispatch : any) => {\r\n    ToggleIsFetching(true)\r\n    const data = await API.AuthMe() //возвращает данные авторизованного юзера\r\n    dispatch(ToggleIsFetching(false))\r\n    if (data.resultCode === 0) {\r\n        let {id, login, email} = data.data\r\n        dispatch(SetAuthUser(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const LoginThunk = (email : string, password : string, rememberMe : boolean = false, captcha : string) =>\r\n    async (dispatch : any) => {\r\n        const data = await API.Login(email, password, rememberMe, captcha)\r\n        if (data.resultCode === 0) {\r\n            dispatch(AuthMeThunk())\r\n        } else {\r\n            if (data.resultCode === 10) {\r\n                dispatch(GetCaptchaThunk())\r\n            }\r\n            dispatch(stopSubmit(\"login\", {_error: data.messages[0]}))\r\n        }\r\n    }\r\n\r\nexport const LogOutThunk = () => async (dispatch : any)  => {\r\n    const data = await API.LogOut()\r\n    if (data.resultCode === 0) {\r\n        dispatch(SetAuthUser(null, null, null, false))\r\n    }\r\n}\r\nexport const GetCaptchaThunk = () => async (dispatch : any) => {\r\n    const data = await API.GetCaptchaFromServer()\r\n    const captchaURL = data.url\r\n    dispatch(SetCaptchaUrl(captchaURL))\r\n\r\n}\r\n\r\n\r\nexport default AuthReducer"]},"metadata":{},"sourceType":"module"}