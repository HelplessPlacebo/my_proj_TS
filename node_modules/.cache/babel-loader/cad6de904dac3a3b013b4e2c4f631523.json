{"ast":null,"code":"var _jsxFileName = \"H:\\\\js_projects\\\\1\\\\my-app\\\\src\\\\components\\\\Dialogs\\\\DialogsContainer.jsx\";\nimport React from 'react';\nimport { SetNewMessages, GetAllDialogsThunk, GetNewMessagesThunk, SendNewMessageThunk } from \"../../data/DIalogsReduser\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { AuthRedirect } from \"../hocs/AuthRedirect\";\nimport { compose } from \"redux\";\nimport { GetAllDialogsSelector, GetIsFetchingDialogs, GetMessagesDataSelector } from \"../../data/DialogsSelectors\";\nimport { withRouter } from 'react-router-dom';\nimport Preloader from \"../assetss/common/Loader/Loader\";\n\nclass DialogsContainer extends React.Component {\n  componentDidMount() {\n    this.props.GetAllDialogsThunk();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.props.IsFetching ? React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }) : React.createElement(Dialogs, Object.assign({}, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    })));\n  }\n\n}\n\nlet StateToProps = state => ({\n  MessagesData: GetMessagesDataSelector(state),\n  AllDialogs: GetAllDialogsSelector(state),\n  IsFetching: GetIsFetchingDialogs(state)\n});\n\nexport default compose(connect(StateToProps, {\n  SetNewMessages,\n  GetAllDialogsThunk,\n  GetNewMessagesThunk,\n  SendNewMessageThunk\n}), AuthRedirect, withRouter)(DialogsContainer);","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\components\\Dialogs\\DialogsContainer.jsx"],"names":["React","SetNewMessages","GetAllDialogsThunk","GetNewMessagesThunk","SendNewMessageThunk","Dialogs","connect","AuthRedirect","compose","GetAllDialogsSelector","GetIsFetchingDialogs","GetMessagesDataSelector","withRouter","Preloader","DialogsContainer","Component","componentDidMount","props","render","IsFetching","StateToProps","state","MessagesData","AllDialogs"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,EAAuBC,kBAAvB,EACIC,mBADJ,EACwBC,mBADxB,QACkD,2BADlD;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,QAA2B,sBAA3B;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,SAAQC,qBAAR,EAA+BC,oBAA/B,EAAqDC,uBAArD,QAAmF,6BAAnF;AACA,SAASC,UAAT,QAA0B,kBAA1B;AACA,OAAOC,SAAP,MAAsB,iCAAtB;;AAGA,MAAMC,gBAAN,SAA+Bd,KAAK,CAACe,SAArC,CAA+C;AAE3CC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWf,kBAAX;AAED;;AAEDgB,EAAAA,MAAM,GAAG;AACL,WACI,0CACK,KAAKD,KAAL,CAAWE,UAAX,GAAwB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxB,GACG,oBAAC,OAAD,oBAAa,KAAKF,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFR,CADJ;AAOH;;AAf0C;;AAkB/C,IAAIG,YAAY,GAAIC,KAAD,KAAY;AAC9BC,EAAAA,YAAY,EAAEX,uBAAuB,CAACU,KAAD,CADP;AAE3BE,EAAAA,UAAU,EAAGd,qBAAqB,CAACY,KAAD,CAFP;AAG3BF,EAAAA,UAAU,EAAGT,oBAAoB,CAACW,KAAD;AAHN,CAAZ,CAAnB;;AAMA,eAAeb,OAAO,CAACF,OAAO,CAACc,YAAD,EAAe;AAACnB,EAAAA,cAAD;AACrCC,EAAAA,kBADqC;AAClBC,EAAAA,mBADkB;AACEC,EAAAA;AADF,CAAf,CAAR,EAElBG,YAFkB,EAGlBK,UAHkB,CAAP,CAGCE,gBAHD,CAAf","sourcesContent":["import React from 'react'\r\nimport {SetNewMessages,GetAllDialogsThunk,\r\n    GetNewMessagesThunk,SendNewMessageThunk} from \"../../data/DIalogsReduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AuthRedirect} from \"../hocs/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {GetAllDialogsSelector, GetIsFetchingDialogs, GetMessagesDataSelector} from \"../../data/DialogsSelectors\";\r\nimport { withRouter} from 'react-router-dom'\r\nimport Preloader from \"../assetss/common/Loader/Loader\";\r\n\r\n\r\nclass DialogsContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n      this.props.GetAllDialogsThunk()\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.IsFetching ? <Preloader/> :\r\n                    <Dialogs {...this.props} />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet StateToProps = (state) => ({\r\n MessagesData: GetMessagesDataSelector(state),\r\n    AllDialogs : GetAllDialogsSelector(state),\r\n    IsFetching : GetIsFetchingDialogs(state)\r\n})\r\n\r\nexport default compose(connect(StateToProps, {SetNewMessages,\r\n        GetAllDialogsThunk,GetNewMessagesThunk,SendNewMessageThunk}),\r\n    AuthRedirect,\r\n    withRouter)(DialogsContainer)"]},"metadata":{},"sourceType":"module"}