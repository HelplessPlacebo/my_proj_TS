{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { API } from \"../API/requests\";\nconst Set_All_Dialogs = 'Dialogs/Set_All_Dialogs';\nconst Set_New_Messages = 'Dialogs/Set_New_Messages';\nlet DefaultState = {\n  users: [],\n  messages: [],\n  avatars: [{}],\n  NewMessageText: '',\n  AllDialogs: [],\n  DialogsMessages: null\n};\n\nconst DialogsReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case Set_All_Dialogs:\n      {\n        return _objectSpread({}, state, {\n          AllDialogs: action.NewAllDialogs\n        });\n      }\n\n    case Set_New_Messages:\n      {\n        return _objectSpread({}, state, {\n          DialogsMessages: action.NewMessages\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAllDialogs = NewAllDialogs => {\n  return {\n    type: Set_All_Dialogs,\n    NewAllDialogs\n  };\n};\nexport const SetNewMessages = NewMessages => {\n  return {\n    type: Set_New_Messages,\n    NewMessages\n  };\n};\nexport const GetAllDialogsThunk = () => async dispatch => {\n  const data = await API.GetAllDialogs();\n  dispatch(SetAllDialogs(data));\n};\nexport const GetNewMessagesThunk = UserId => async dispatch => {\n  debugger;\n  const data = await API.GetNewMessagesFromServer(UserId);\n\n  if (!data.error) {\n    dispatch(SetNewMessages(data.data));\n  }\n};\nexport const SendNewMessageThunk = (UserId, NewMessage) => async dispatch => {\n  const data = await API.SendNewMessage(UserId, NewMessage);\n\n  if (!data.error) {\n    dispatch(GetNewMessagesThunk(UserId));\n  }\n};\nexport default DialogsReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\DIalogsReduser.js"],"names":["API","Set_All_Dialogs","Set_New_Messages","DefaultState","users","messages","avatars","NewMessageText","AllDialogs","DialogsMessages","DialogsReducer","state","action","type","NewAllDialogs","NewMessages","SetAllDialogs","SetNewMessages","GetAllDialogsThunk","dispatch","data","GetAllDialogs","GetNewMessagesThunk","UserId","GetNewMessagesFromServer","error","SendNewMessageThunk","NewMessage","SendNewMessage"],"mappings":";AAAA,SAAQA,GAAR,QAAkB,iBAAlB;AAEA,MAAMC,eAAe,GAAG,yBAAxB;AACA,MAAMC,gBAAgB,GAAG,0BAAzB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,EADQ;AAEfC,EAAAA,QAAQ,EAAE,EAFK;AAGfC,EAAAA,OAAO,EAAE,CAAC,EAAD,CAHM;AAIfC,EAAAA,cAAc,EAAE,EAJD;AAKfC,EAAAA,UAAU,EAAE,EALG;AAMfC,EAAAA,eAAe,EAAE;AANF,CAAnB;;AAQA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKZ,eAAL;AAAuB;AACnB,iCAAWU,KAAX;AAAkBH,UAAAA,UAAU,EAAEI,MAAM,CAACE;AAArC;AACH;;AACD,SAAMZ,gBAAN;AAAyB;AACrB,iCAAWS,KAAX;AAAkBF,UAAAA,eAAe,EAAEG,MAAM,CAACG;AAA1C;AACH;;AACD;AACI,aAAOJ,KAAP;AATR;AAYH,CAbD;;AAgBA,OAAO,MAAMK,aAAa,GAAIF,aAAD,IAAmB;AAC5C,SAAO;AAACD,IAAAA,IAAI,EAAEZ,eAAP;AAAwBa,IAAAA;AAAxB,GAAP;AACH,CAFM;AAGP,OAAO,MAAMG,cAAc,GAAIF,WAAD,IAAiB;AAE3C,SAAO;AAACF,IAAAA,IAAI,EAAEX,gBAAP;AAAyBa,IAAAA;AAAzB,GAAP;AACH,CAHM;AAKP,OAAO,MAAMG,kBAAkB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACxD,QAAMC,IAAI,GAAG,MAAMpB,GAAG,CAACqB,aAAJ,EAAnB;AACAF,EAAAA,QAAQ,CAACH,aAAa,CAACI,IAAD,CAAd,CAAR;AACH,CAHM;AAIP,OAAO,MAAME,mBAAmB,GAAIC,MAAD,IAAY,MAAOJ,QAAP,IAAoB;AAC/D;AACA,QAAMC,IAAI,GAAG,MAAMpB,GAAG,CAACwB,wBAAJ,CAA6BD,MAA7B,CAAnB;;AACA,MAAI,CAACH,IAAI,CAACK,KAAV,EAAiB;AACbN,IAAAA,QAAQ,CAACF,cAAc,CAACG,IAAI,CAACA,IAAN,CAAf,CAAR;AACH;AAEJ,CAPM;AAQP,OAAO,MAAMM,mBAAmB,GAAG,CAACH,MAAD,EAASI,UAAT,KAAwB,MAAOR,QAAP,IAAoB;AAC3E,QAAMC,IAAI,GAAG,MAAMpB,GAAG,CAAC4B,cAAJ,CAAmBL,MAAnB,EAA2BI,UAA3B,CAAnB;;AACA,MAAI,CAACP,IAAI,CAACK,KAAV,EAAiB;AACbN,IAAAA,QAAQ,CAACG,mBAAmB,CAACC,MAAD,CAApB,CAAR;AACH;AACJ,CALM;AAOP,eAAeb,cAAf","sourcesContent":["import {API} from \"../API/requests\";\r\n\r\nconst Set_All_Dialogs = 'Dialogs/Set_All_Dialogs'\r\nconst Set_New_Messages = 'Dialogs/Set_New_Messages'\r\n\r\nlet DefaultState = {\r\n    users: [],\r\n    messages: [],\r\n    avatars: [{}],\r\n    NewMessageText: '',\r\n    AllDialogs: [],\r\n    DialogsMessages: null\r\n}\r\nconst DialogsReducer = (state = DefaultState, action) => {\r\n    switch (action.type) {\r\n\r\n        case Set_All_Dialogs : {\r\n            return {...state, AllDialogs: action.NewAllDialogs}\r\n        }\r\n        case  Set_New_Messages : {\r\n            return {...state, DialogsMessages: action.NewMessages}\r\n        }\r\n        default :\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const SetAllDialogs = (NewAllDialogs) => {\r\n    return {type: Set_All_Dialogs, NewAllDialogs}\r\n}\r\nexport const SetNewMessages = (NewMessages) => {\r\n    \r\n    return {type: Set_New_Messages, NewMessages}\r\n}\r\n\r\nexport const GetAllDialogsThunk = () => async (dispatch) => {\r\n    const data = await API.GetAllDialogs()\r\n    dispatch(SetAllDialogs(data))\r\n}\r\nexport const GetNewMessagesThunk = (UserId) => async (dispatch) => {\r\n    debugger\r\n    const data = await API.GetNewMessagesFromServer(UserId)\r\n    if (!data.error) {\r\n        dispatch(SetNewMessages(data.data))\r\n    }\r\n\r\n}\r\nexport const SendNewMessageThunk = (UserId, NewMessage) => async (dispatch) => {\r\n    const data = await API.SendNewMessage(UserId, NewMessage)\r\n    if (!data.error) {\r\n        dispatch(GetNewMessagesThunk(UserId))\r\n    }\r\n}\r\n\r\nexport default DialogsReducer"]},"metadata":{},"sourceType":"module"}