{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { API } from \"../API/requests\";\nconst Set_All_Dialogs = 'Dialogs/Set_All_Dialogs';\nconst Set_New_Messages = 'Dialogs/Set_New_Messages';\nconst Set_InterlocutorAvatar = 'Dialogs/Set_InterlocutorAvatar';\nconst Set_UserAvatarForDialogs = 'Dialogs/Set_UserAvatarForDialogs';\nconst Set_NewMessagesCount = 'Dialogs/Set_NewMessagesCount';\nconst Set_IsFetching = 'Dialogs/Set_IsFetching';\nlet DefaultState = {\n  users: [],\n  messages: [],\n  avatars: [{}],\n  NewMessageText: '',\n  AllDialogs: [],\n  DialogsMessages: null,\n  InterlocutorAvatar: \"\",\n  UserAvatar: \"\",\n  NewMessagesCount: 0,\n  IsFetching: false\n};\n\nconst DialogsReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case Set_All_Dialogs:\n      {\n        return _objectSpread({}, state, {\n          AllDialogs: action.NewAllDialogs\n        });\n      }\n\n    case Set_New_Messages:\n      {\n        return _objectSpread({}, state, {\n          DialogsMessages: action.NewMessagesData\n        });\n      }\n\n    case Set_InterlocutorAvatar:\n      {\n        return _objectSpread({}, state, {\n          InterlocutorAvatar: action.newInterlocutorAvatar\n        });\n      }\n\n    case Set_UserAvatarForDialogs:\n      {\n        return _objectSpread({}, state, {\n          UserAvatar: action.UserAvatar\n        });\n      }\n\n    case Set_NewMessagesCount:\n      {\n        return _objectSpread({}, state, {\n          NewMessagesCount: action.NewMessagesCount\n        });\n      }\n\n    case Set_IsFetching:\n      {\n        return _objectSpread({}, state, {\n          IsFetching: action.IsFetching\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAllDialogs = NewAllDialogs => {\n  return {\n    type: Set_All_Dialogs,\n    NewAllDialogs\n  };\n};\nexport const SetNewMessages = NewMessagesData => {\n  return {\n    type: Set_New_Messages,\n    NewMessagesData\n  };\n};\nexport const setInterlocutorAvatar = newInterlocutorAvatar => {\n  return {\n    type: Set_InterlocutorAvatar,\n    newInterlocutorAvatar\n  };\n};\nexport const SetNewMessagesCount = NewMessagesCount => {\n  return {\n    type: Set_NewMessagesCount,\n    NewMessagesCount\n  };\n};\nexport const setUserAvatarForDialogs = UserAvatar => {\n  return {\n    type: Set_UserAvatarForDialogs,\n    UserAvatar\n  };\n};\nexport const SetIsFetchingDialogs = IsFetching => {\n  return {\n    type: Set_IsFetching,\n    IsFetching\n  };\n};\nexport const GetAllDialogsThunk = () => async dispatch => {\n  dispatch(SetIsFetchingDialogs(true));\n  const data = await API.GetAllDialogs();\n  dispatch(SetAllDialogs(data));\n  dispatch(SetIsFetchingDialogs(false));\n};\nexport const GetNewMessagesThunk = UserId => async dispatch => {\n  dispatch(SetIsFetchingDialogs(true));\n  const data = await API.GetNewMessagesFromServer(UserId);\n  dispatch(SetIsFetchingDialogs(false));\n\n  if (!data.error) {\n    dispatch(SetNewMessages(data));\n  }\n};\nexport const SendNewMessageThunk = (UserId, NewMessage) => async dispatch => {\n  const data = await API.SendNewMessage(UserId, NewMessage);\n\n  if (!data.error) {\n    dispatch(GetNewMessagesThunk(UserId));\n  }\n};\nexport const GetInterlocutorAvatarThunk = UserId => async dispatch => {\n  const data = await API.getProfile(UserId);\n  dispatch(setInterlocutorAvatar(data.photos.small));\n};\nexport const GetProfileAvatarThunk = UserID => async dispatch => {\n  const data = await API.getProfile(UserID);\n  dispatch(setUserAvatarForDialogs(data.photos.small));\n};\nexport const GetNewMessagesCountThunk = () => async dispatch => {\n  const data = await API.GetNewMessagesCount();\n  dispatch(SetNewMessagesCount(data.data));\n};\nexport const DeleteMessageThunk = (MessageID, UserID) => async dispatch => {\n  await API.DeleteMessage(MessageID);\n  dispatch(GetNewMessagesThunk(UserID));\n};\nexport default DialogsReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\DIalogsReduser.js"],"names":["API","Set_All_Dialogs","Set_New_Messages","Set_InterlocutorAvatar","Set_UserAvatarForDialogs","Set_NewMessagesCount","Set_IsFetching","DefaultState","users","messages","avatars","NewMessageText","AllDialogs","DialogsMessages","InterlocutorAvatar","UserAvatar","NewMessagesCount","IsFetching","DialogsReducer","state","action","type","NewAllDialogs","NewMessagesData","newInterlocutorAvatar","SetAllDialogs","SetNewMessages","setInterlocutorAvatar","SetNewMessagesCount","setUserAvatarForDialogs","SetIsFetchingDialogs","GetAllDialogsThunk","dispatch","data","GetAllDialogs","GetNewMessagesThunk","UserId","GetNewMessagesFromServer","error","SendNewMessageThunk","NewMessage","SendNewMessage","GetInterlocutorAvatarThunk","getProfile","photos","small","GetProfileAvatarThunk","UserID","GetNewMessagesCountThunk","GetNewMessagesCount","DeleteMessageThunk","MessageID","DeleteMessage"],"mappings":"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","sourcesContent":["import {API} from \"../API/requests\";\r\n\r\nconst Set_All_Dialogs = 'Dialogs/Set_All_Dialogs'\r\nconst Set_New_Messages = 'Dialogs/Set_New_Messages'\r\nconst Set_InterlocutorAvatar = 'Dialogs/Set_InterlocutorAvatar'\r\nconst Set_UserAvatarForDialogs = 'Dialogs/Set_UserAvatarForDialogs'\r\nconst Set_NewMessagesCount = 'Dialogs/Set_NewMessagesCount'\r\nconst Set_IsFetching = 'Dialogs/Set_IsFetching'\r\n\r\nlet DefaultState = {\r\n    users: [],\r\n    messages: [],\r\n    avatars: [{}],\r\n    NewMessageText: '',\r\n    AllDialogs: [],\r\n    DialogsMessages: null,\r\n    InterlocutorAvatar : \"\",\r\n    UserAvatar : \"\",\r\n    NewMessagesCount : 0,\r\n    IsFetching : false\r\n}\r\nconst DialogsReducer = (state = DefaultState, action) => {\r\n    switch (action.type) {\r\n\r\n        case Set_All_Dialogs : {\r\n            return {...state, AllDialogs: action.NewAllDialogs}\r\n        }\r\n        case  Set_New_Messages : {\r\n            return {...state, DialogsMessages: action.NewMessagesData}\r\n        }\r\n        case Set_InterlocutorAvatar :{\r\n            return {\r\n                ...state, InterlocutorAvatar : action.newInterlocutorAvatar\r\n            }\r\n        }\r\n        case Set_UserAvatarForDialogs :{\r\n            return {\r\n                ...state, UserAvatar : action.UserAvatar\r\n            }\r\n        }\r\n        case Set_NewMessagesCount :{\r\n            return {\r\n                ...state, NewMessagesCount : action.NewMessagesCount\r\n            }\r\n        }\r\n        case Set_IsFetching :{\r\n            return {\r\n                ...state, IsFetching : action.IsFetching\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const SetAllDialogs = (NewAllDialogs) => {\r\n    return {type: Set_All_Dialogs, NewAllDialogs}\r\n}\r\nexport const SetNewMessages = (NewMessagesData) => {\r\n    return {type: Set_New_Messages, NewMessagesData}\r\n}\r\nexport const setInterlocutorAvatar = (newInterlocutorAvatar) => {\r\n    return {type: Set_InterlocutorAvatar , newInterlocutorAvatar}\r\n}\r\nexport const SetNewMessagesCount = (NewMessagesCount) => {\r\n    return {type: Set_NewMessagesCount , NewMessagesCount}\r\n}\r\nexport const setUserAvatarForDialogs = (UserAvatar) => {\r\n    return {type: Set_UserAvatarForDialogs , UserAvatar}\r\n}\r\nexport const SetIsFetchingDialogs = (IsFetching) => {\r\n    return {type: Set_IsFetching , IsFetching}\r\n}\r\n\r\n\r\nexport const GetAllDialogsThunk = () => async (dispatch) => {\r\n    dispatch(SetIsFetchingDialogs(true))\r\n    const data = await API.GetAllDialogs()\r\n    dispatch(SetAllDialogs(data))\r\n    dispatch(SetIsFetchingDialogs(false))\r\n}\r\nexport const GetNewMessagesThunk = (UserId) => async (dispatch) => {\r\n    dispatch(SetIsFetchingDialogs(true))\r\n    const data = await API.GetNewMessagesFromServer(UserId)\r\n    dispatch(SetIsFetchingDialogs(false))\r\n    if (!data.error) {\r\n        dispatch(SetNewMessages(data))\r\n    }\r\n\r\n\r\n}\r\nexport const SendNewMessageThunk = (UserId, NewMessage) => async (dispatch) => {\r\n    const data = await API.SendNewMessage(UserId, NewMessage)\r\n    if (!data.error) {\r\n        dispatch(GetNewMessagesThunk(UserId))\r\n    }\r\n}\r\nexport const GetInterlocutorAvatarThunk = (UserId) => async (dispatch) => {\r\n    const data = await API.getProfile(UserId)\r\n        dispatch(setInterlocutorAvatar(data.photos.small))\r\n}\r\nexport const GetProfileAvatarThunk = (UserID) => async (dispatch) => {\r\n    const data = await API.getProfile(UserID)\r\n        dispatch(setUserAvatarForDialogs(data.photos.small))\r\n}\r\nexport const GetNewMessagesCountThunk = () => async (dispatch) => {\r\n    const data = await API.GetNewMessagesCount()\r\n    dispatch(SetNewMessagesCount(data.data))\r\n}\r\nexport const DeleteMessageThunk = (MessageID,UserID) => async (dispatch) => {\r\n   await API.DeleteMessage(MessageID)\r\n    dispatch(GetNewMessagesThunk(UserID))\r\n\r\n}\r\n\r\n\r\nexport default DialogsReducer"]},"metadata":{},"sourceType":"module"}