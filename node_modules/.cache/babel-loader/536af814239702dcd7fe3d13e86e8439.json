{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { API } from \"../API/requests\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nconst IsFetching_Toggle = 'IsFetching_Toggle';\nlet DefaultState = {\n  userId: null,\n  email: null,\n  login: null,\n  IsLogined: false,\n  IsFetching: false\n};\n\nconst AuthReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      {\n        return _objectSpread({}, state, action.data);\n      }\n\n    case IsFetching_Toggle:\n      {\n        return _objectSpread({}, state, {\n          IsFetching: action.IsFetching\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAuthUser = (userId, email, login, IsLogined) => ({\n  type: SET_USER_DATA,\n  data: {\n    userId,\n    email,\n    login,\n    IsLogined\n  }\n});\nexport const ToggleIsFetching = IsFetching => {\n  return {\n    type: IsFetching_Toggle,\n    IsFetching\n  };\n};\nexport const AuthMeThunk = () => {\n  return dispatch => {\n    ToggleIsFetching(true);\n    API.AuthMe().then(data => {\n      //возвращает данные авторизованного юзера\n      dispatch(ToggleIsFetching(false));\n\n      if (data.resultCode === 0) {\n        let _data$data = data.data,\n            id = _data$data.id,\n            email = _data$data.email,\n            login = _data$data.login;\n        dispatch(SetAuthUser(id, email, login, true));\n      }\n    });\n  };\n};\nexport const LoginThunk = (email, password, rememberMe = false) => {\n  return dispatch => {\n    API.Login(email, password, rememberMe).then(data => {\n      if (data.resultCode === 0) {\n        let _data$data2 = data.data,\n            email = _data$data2.email,\n            password = _data$data2.password,\n            rememberMe = _data$data2.rememberMe;\n        dispatch(AuthMeThunk());\n      } else {\n        dispatch(stopSubmit(\"login\", {\n          email: \"something goes wrong\"\n        }));\n      }\n    });\n  };\n};\nexport const LogOutThunk = () => {\n  return dispatch => {\n    API.LogOut().then(data => {\n      if (data.resultCode === 0) {\n        dispatch(SetAuthUser(null, null, null, false));\n      }\n    });\n  };\n};\nexport default AuthReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\AuthReducer.js"],"names":["API","stopSubmit","SET_USER_DATA","IsFetching_Toggle","DefaultState","userId","email","login","IsLogined","IsFetching","AuthReducer","state","action","type","data","SetAuthUser","ToggleIsFetching","AuthMeThunk","dispatch","AuthMe","then","resultCode","id","LoginThunk","password","rememberMe","Login","LogOutThunk","LogOut"],"mappings":"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","sourcesContent":["import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst IsFetching_Toggle = 'IsFetching_Toggle'\r\nlet DefaultState = {\r\n    userId:null,\r\n    email:null,\r\n    login:null,\r\n    IsLogined:false,\r\n    IsFetching:false\r\n}\r\n\r\nconst AuthReducer = (state = DefaultState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA : {\r\n          return {\r\n                ...state,\r\n                ...action.data\r\n                }\r\n\r\n        }\r\n        case IsFetching_Toggle:{\r\n            return {...state, IsFetching: action.IsFetching}\r\n        }\r\n        default :\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const SetAuthUser = (userId,email,login,IsLogined) =>\r\n    ({type: SET_USER_DATA,data:{userId,email,login,IsLogined}})\r\n\r\nexport const ToggleIsFetching = (IsFetching) => {\r\n    return {type : IsFetching_Toggle, IsFetching}\r\n}\r\nexport  const AuthMeThunk = () =>{\r\n    return (dispatch)=>{\r\n        ToggleIsFetching(true)\r\n        API.AuthMe().then(data => { //возвращает данные авторизованного юзера\r\n          dispatch(ToggleIsFetching(false))\r\n            if (data.resultCode === 0){\r\n                let {id,email,login} = data.data\r\n            dispatch(SetAuthUser(id,email,login,true))\r\n\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport  const LoginThunk = (email,password,rememberMe=false) =>{\r\n    return (dispatch)=>{\r\n        API.Login(email,password,rememberMe).then(data => {\r\n            if (data.resultCode === 0){\r\n                let {email,password,rememberMe} = data.data\r\n                dispatch(AuthMeThunk())\r\n\r\n            }\r\n            else{\r\n                dispatch(stopSubmit(\"login\",{email : \"something goes wrong\"}))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport  const LogOutThunk = () =>{\r\n    return (dispatch)=>{\r\n        API.LogOut().then(data => {\r\n            if (data.resultCode === 0){\r\n                dispatch(SetAuthUser(null,null,null,false))\r\n\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default AuthReducer"]},"metadata":{},"sourceType":"module"}