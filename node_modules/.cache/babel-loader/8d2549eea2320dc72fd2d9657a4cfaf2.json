{"ast":null,"code":"import axios from \"axios\";\nconst instance = axios.create({\n  withCredentials: true,\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    \"API-KEY\": \"96428d9a-0d9d-4cb1-8a30-3ebf6693ac4b\"\n  }\n});\nconst instanceToDoLists = axios.create({\n  withCredentials: true,\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n  headers: {\n    \"API-KEY\": \"96428d9a-0d9d-4cb1-8a30-3ebf6693ac4b\"\n  }\n});\n/*\r\nconst MyServerInstance = axios.create({\r\n    baseURL: 'http://localhost:5000/'\r\n})\r\n*/\n\nexport const API = {\n  async getUsers(currentPage = 1, pageSize = 10) {\n    const response = await instance.get(\"users?page=\".concat(currentPage, \"&count=\").concat(pageSize));\n    return response.data;\n  },\n\n  async AuthMe() {\n    const response = await instance.get(\"auth/me\");\n    return response.data;\n  },\n\n  async getProfile(ProfileID) {\n    const response = await instance.get(\"profile/\" + ProfileID);\n    return response.data;\n  },\n\n  async DelSub(userId) {\n    const response = await instance.delete(\"follow/\".concat(userId));\n    return response.data;\n  },\n\n  async AddSub(userId) {\n    const response = await instance.post(\"follow/\".concat(userId));\n    return response.data;\n  },\n\n  async getProfileStatus(ProfileID) {\n    const response = await instance.get(\"profile/status/\" + ProfileID);\n    return response.data;\n  },\n\n  async setProfileStatus(status) {\n    const response = await instance.put(\"profile/status/\", {\n      status: status\n    });\n    return response.data;\n  },\n\n  async Login(email, password, rememberMe, captcha) {\n    const response = await instance.post(\"auth/login/\", {\n      email: email,\n      password: password,\n      rememberMe: rememberMe,\n      captcha: captcha\n    });\n    return response.data;\n  },\n\n  async LogOut() {\n    const response = await instance.delete(\"auth/login\");\n    return response.data;\n  },\n\n  async LoadPhotoOnServer(photo) {\n    const formdata = new FormData();\n    formdata.append(\"image\", photo);\n    const response = await instance.put('profile/photo', formdata, {\n      //@ts-ignore\n      'Content-Type': 'multipart/form-data'\n    });\n    return response.data;\n  },\n\n  async PutProfileDataOnServer(profile) {\n    const response = await instance.put('profile', profile);\n    return response.data;\n  },\n\n  async GetCaptchaFromServer() {\n    const response = await instance.get('security/get-captcha-url');\n    return response.data.url;\n  },\n\n  async GetAllDialogs() {\n    const response = await instance.get('dialogs');\n    return response.data;\n  },\n\n  async GetNewMessagesFromServer(DialoguserID) {\n    const response = await instance.get(\"dialogs/\".concat(DialoguserID, \"/messages\"));\n    return response.data;\n  },\n\n  async SendNewMessage(userId, NewMessage) {\n    const response = await instance.post(\"dialogs/\".concat(userId, \"/messages\"), {\n      body: NewMessage\n    });\n    return response.data;\n  },\n\n  async GetNewMessagesCount() {\n    const response = await instance.get('dialogs/messages/new/count');\n    return response.data;\n  },\n\n  async DeleteMessage(MessageID) {\n    const response = await instance.delete(\"dialogs//messages/\".concat(MessageID));\n    return response.data;\n  },\n\n  async FindUser(UserName) {\n    const response = await instance.get(\"users?term=\".concat(UserName));\n    return response.data;\n  },\n\n  async GetToDoLists() {\n    const response = await instance.get('todo-lists');\n    return response.data;\n  },\n\n  async CreateNewToDoList(title) {\n    const response = await instance.post('todo-lists', {\n      title: title\n    });\n    return response.data;\n  },\n\n  async DeleteToDoList(todolistId) {\n    const res = await instance.delete(\"todo-lists/\".concat(todolistId));\n    return res.data;\n  },\n\n  async ChangeToDoListTitle(todolistId, title) {\n    const res = await instance.put(\"todo-lists/\".concat(todolistId), {\n      title: title\n    });\n    return res.data;\n  },\n\n  async GetToDoListTasks(todolistId, count = 10, page = 1) {\n    const response = await instance.get(\"todo-lists/\".concat(todolistId, \"/tasks?count=\").concat(count, \"&page=\").concat(page));\n    return response.data;\n  },\n\n  async CreateNewTaskForToDoList(todolistId, Tasktitle) {\n    const DataResponse = await instance.post(\"todo-lists/\".concat(todolistId, \"/tasks\"), {\n      title: Tasktitle\n    });\n    return DataResponse.data;\n  },\n\n  async ChangeTaskInformation(todolistId, taskid, status) {\n    const DataResponse = await instanceToDoLists.put(\"todo-lists/\".concat(todolistId, \"/tasks/\").concat(taskid), status);\n    return DataResponse.data;\n  },\n\n  async DeleteTaskFromToDoList(todolistId, taskid) {\n    const DataResponse = await instanceToDoLists.delete(\"todo-lists/\".concat(todolistId, \"/tasks/\").concat(taskid));\n    return DataResponse.data;\n  }\n\n};","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\API\\requests.ts"],"names":["axios","instance","create","withCredentials","baseURL","headers","instanceToDoLists","API","getUsers","currentPage","pageSize","response","get","data","AuthMe","getProfile","ProfileID","DelSub","userId","delete","AddSub","post","getProfileStatus","setProfileStatus","status","put","Login","email","password","rememberMe","captcha","LogOut","LoadPhotoOnServer","photo","formdata","FormData","append","PutProfileDataOnServer","profile","GetCaptchaFromServer","url","GetAllDialogs","GetNewMessagesFromServer","DialoguserID","SendNewMessage","NewMessage","body","GetNewMessagesCount","DeleteMessage","MessageID","FindUser","UserName","GetToDoLists","CreateNewToDoList","title","DeleteToDoList","todolistId","res","ChangeToDoListTitle","GetToDoListTasks","count","page","CreateNewTaskForToDoList","Tasktitle","DataResponse","ChangeTaskInformation","taskid","DeleteTaskFromToDoList"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {TProfile} from \"../components/GlobalTypes/ProfileTypes/ProfileTypes\";\r\nimport {\r\n    TAuthMeRes, TCreateNewTaskForToDoListRes, TCreateNewToDoListRes,\r\n    TDefRes, TGetCaptchaFromServerRes,\r\n    TLoadPhotoOnServerRes,\r\n    TLoginRes, TSendNewMessageRes,\r\n    TStatus\r\n} from \"../components/GlobalTypes/RequestsTypes/RequestsTypes\";\r\nimport {TFoundedUser} from \"../components/GlobalTypes/UsersTypes/UsersTypes\";\r\nimport {TDialogMessages} from \"../components/GlobalTypes/DialogsTypes/MessagesTypes\";\r\nimport {TToDoList, TToDoListTasks} from \"../components/GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\nimport {TDialogs} from \"../components/GlobalTypes/DialogsTypes/DialogsTypes\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"96428d9a-0d9d-4cb1-8a30-3ebf6693ac4b\"\r\n    }\r\n})\r\n\r\nconst instanceToDoLists = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    headers: {\r\n        \"API-KEY\": \"96428d9a-0d9d-4cb1-8a30-3ebf6693ac4b\"\r\n    }\r\n})\r\n/*\r\nconst MyServerInstance = axios.create({\r\n    baseURL: 'http://localhost:5000/'\r\n})\r\n*/\r\n\r\nexport const API = {\r\n\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        const response = await instance.get<TFoundedUser>(`users?page=${currentPage}&count=${pageSize}`)\r\n        return response.data\r\n    },\r\n\r\n    async AuthMe() {\r\n        const response = await instance.get<TAuthMeRes>(`auth/me`)\r\n        return response.data\r\n    },\r\n\r\n    async getProfile(ProfileID : number  | null) {\r\n        const response = await instance.get<TProfile>(`profile/` + ProfileID)\r\n        return response.data\r\n    },\r\n\r\n    async DelSub(userId : number) {\r\n        const response = await instance.delete<TDefRes>(`follow/${userId}`)\r\n        return response.data\r\n    },\r\n\r\n    async AddSub(userId : number ) {\r\n        const response = await instance.post<TDefRes>(`follow/${userId}`)\r\n        return response.data\r\n    },\r\n\r\n    async getProfileStatus(ProfileID : number | null ) {\r\n        const response = await instance.get<string>(`profile/status/` + ProfileID)\r\n        return response.data\r\n    },\r\n\r\n    async setProfileStatus(status : string | null) {\r\n        const response = await instance.put<TDefRes>(`profile/status/`, {status: status})\r\n        return response.data\r\n    },\r\n\r\n    async Login(email : string | null, password : string | null, rememberMe : boolean | null, captcha : string | null | undefined) {\r\n        const response = await instance.post<TLoginRes>(`auth/login/`, {\r\n            email: email,\r\n            password: password,\r\n            rememberMe: rememberMe,\r\n            captcha: captcha\r\n        })\r\n        return response.data\r\n    },\r\n\r\n    async LogOut() {\r\n        const response = await instance.delete<TDefRes>(`auth/login`)\r\n        return response.data\r\n\r\n    },\r\n\r\n    async LoadPhotoOnServer(photo : File) {\r\n        const formdata = new FormData()\r\n        formdata.append(\"image\", photo)\r\n        const response = await instance.put<TLoadPhotoOnServerRes>('profile/photo', formdata, {\r\n            //@ts-ignore\r\n            'Content-Type': 'multipart/form-data'\r\n        })\r\n        return response.data\r\n    },\r\n    async PutProfileDataOnServer(profile : TProfile) {\r\n        const response = await instance.put<TDefRes>('profile', profile)\r\n        return response.data\r\n    },\r\n    async GetCaptchaFromServer() {\r\n        const response = await instance.get<TGetCaptchaFromServerRes>('security/get-captcha-url')\r\n        return response.data.url\r\n    },\r\n    async GetAllDialogs() {\r\n        const response = await instance.get<TDialogs>('dialogs')\r\n        return response.data\r\n    },\r\n    async GetNewMessagesFromServer(DialoguserID : number ) {\r\n        const response = await instance.get<TDialogMessages>(`dialogs/${DialoguserID}/messages`)\r\n        return response.data\r\n    },\r\n    async SendNewMessage(userId : number, NewMessage : string) {\r\n        const response = await instance.post<TSendNewMessageRes>(`dialogs/${userId}/messages`, {\r\n            body: NewMessage\r\n        })\r\n        return response.data\r\n    },\r\n    async GetNewMessagesCount() {\r\n        const response = await instance.get<number>('dialogs/messages/new/count')\r\n        return response.data\r\n    },\r\n    async DeleteMessage(MessageID :number) {\r\n        const response = await instance.delete<TDefRes>(`dialogs//messages/${MessageID}`)\r\n        return response.data\r\n    },\r\n    async FindUser(UserName : string) {\r\n        const response = await instance.get<TFoundedUser>(`users?term=${UserName}`)\r\n        return response.data\r\n    },\r\n    async GetToDoLists() {\r\n        const response = await instance.get<Array<TToDoList>>('todo-lists')\r\n        return response.data\r\n    },\r\n    async CreateNewToDoList(title : string) {\r\n        const response = await instance.post<TCreateNewToDoListRes>('todo-lists', {title: title})\r\n        return response.data\r\n    },\r\n    async DeleteToDoList(todolistId : string) {\r\n       const res = await instance.delete<TDefRes>(`todo-lists/${todolistId}`)\r\n        return res.data\r\n    },\r\n    async ChangeToDoListTitle(todolistId :string, title : string) {\r\n       const res =  await instance.put<TDefRes>(`todo-lists/${todolistId}`, {\r\n            title: title\r\n        })\r\n        return res.data\r\n    },\r\n    async GetToDoListTasks(todolistId : string, count = 10, page = 1) {\r\n        const response = await instance.get<TToDoListTasks>(`todo-lists/${todolistId}/tasks?count=${count}&page=${page}`)\r\n        return response.data\r\n    },\r\n\r\n    async CreateNewTaskForToDoList(todolistId : string, Tasktitle : string) {\r\n        const DataResponse = await instance.post<TCreateNewTaskForToDoListRes>(`todo-lists/${todolistId}/tasks`, {\r\n            title: Tasktitle\r\n        })\r\n        return DataResponse.data\r\n    },\r\n\r\n    async ChangeTaskInformation(todolistId : string, taskid : string, status : TStatus) {\r\n\r\n        const DataResponse = await instanceToDoLists.put<TCreateNewTaskForToDoListRes>(`todo-lists/${todolistId}/tasks/${taskid}`, status)\r\n        return DataResponse.data\r\n    },\r\n    async DeleteTaskFromToDoList(todolistId : string, taskid : string) {\r\n        const DataResponse = await instanceToDoLists.delete<TDefRes>(`todo-lists/${todolistId}/tasks/${taskid}`)\r\n        return DataResponse.data\r\n    },\r\n/*    async MyServerReq(){\r\n        const Res = await MyServerInstance.get('server')\r\n        return Res\r\n    },\r\n    async MyServerPost(body){\r\n        const Res = await MyServerInstance.post('friends/add',body)\r\n        return Res\r\n    }*/\r\n}\r\n"]},"metadata":{},"sourceType":"module"}