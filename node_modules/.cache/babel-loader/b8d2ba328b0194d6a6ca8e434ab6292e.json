{"ast":null,"code":"import * as axios from \"axios\";\nconst instance = axios.create({\n  withCredentials: true,\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    \"API-KEY\": \"1b0fde3a-3c72-4f1a-8a92-66508a392dc3\"\n  }\n});\nexport const API = {\n  getUsers(currentPage = 1, pageSize = 10) {\n    return instance.get(\"users?page=\".concat(currentPage, \"&count=\").concat(pageSize)).then(responcse => {\n      return responcse.data;\n    });\n  },\n\n  AuthMe() {\n    return instance.get(\"auth/me\").then(responcse => {\n      return responcse.data;\n    });\n  },\n\n  getProfile(ProfileID = 2) {\n    return instance.get(\"profile/\" + ProfileID).then(responcse => {\n      return responcse.data;\n    });\n  },\n\n  DelSub(userId) {\n    return instance.delete(\"follow/\".concat(userId)).then(response => {\n      return response.data;\n    });\n  },\n\n  AddSub(userId) {\n    return instance.post(\"follow/\".concat(userId)).then(response => {\n      return response.data;\n    });\n  },\n\n  getProfileStatus(ProfileID = 2) {\n    return instance.get(\"profile/status/\" + ProfileID).then(responcse => {\n      return responcse.data;\n    });\n  },\n\n  setProfileStatus(status) {\n    return instance.put(\"profile/status/\", {\n      status: status\n    }).then(responcse => {\n      return responcse.data;\n    });\n  },\n\n  SubmitDataLogin(email, password, rememberMe) {\n    return instance.post(\"auth/login/\", {\n      email: email,\n      password: password,\n      rememberMe: rememberMe\n    }).then(responcse => {\n      return responcse.data;\n    });\n  }\n\n};","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\API\\requests.js"],"names":["axios","instance","create","withCredentials","baseURL","headers","API","getUsers","currentPage","pageSize","get","then","responcse","data","AuthMe","getProfile","ProfileID","DelSub","userId","delete","response","AddSub","post","getProfileStatus","setProfileStatus","status","put","SubmitDataLogin","email","password","rememberMe"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1BC,EAAAA,eAAe,EAAE,IADS;AAE1BC,EAAAA,OAAO,EAAE,+CAFiB;AAG1BC,EAAAA,OAAO,EAAE;AACL,eAAW;AADN;AAHiB,CAAb,CAAjB;AAQA,OAAO,MAAMC,GAAG,GAAG;AACfC,EAAAA,QAAQ,CAACC,WAAW,GAAG,CAAf,EAAkBC,QAAQ,GAAG,EAA7B,EAAiC;AACrC,WAAOR,QAAQ,CAACS,GAAT,sBAA2BF,WAA3B,oBAAgDC,QAAhD,GACFE,IADE,CACGC,SAAS,IAAI;AACf,aAAOA,SAAS,CAACC,IAAjB;AACH,KAHE,CAAP;AAIH,GANc;;AAQfC,EAAAA,MAAM,GAAG;AACL,WAAOb,QAAQ,CAACS,GAAT,YAAwBC,IAAxB,CAA6BC,SAAS,IAAI;AAC7C,aAAOA,SAAS,CAACC,IAAjB;AACH,KAFM,CAAP;AAGH,GAZc;;AAcfE,EAAAA,UAAU,CAACC,SAAS,GAAG,CAAb,EAAgB;AACtB,WAAOf,QAAQ,CAACS,GAAT,CAAa,aAAaM,SAA1B,EACFL,IADE,CACGC,SAAS,IAAI;AACf,aAAOA,SAAS,CAACC,IAAjB;AACH,KAHE,CAAP;AAIH,GAnBc;;AAoBfI,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,WAAOjB,QAAQ,CAACkB,MAAT,kBAA0BD,MAA1B,GAAoCP,IAApC,CAAyCS,QAAQ,IAAI;AACxD,aAAOA,QAAQ,CAACP,IAAhB;AACH,KAFM,CAAP;AAGH,GAxBc;;AA0BfQ,EAAAA,MAAM,CAACH,MAAD,EAAS;AACX,WAAOjB,QAAQ,CAACqB,IAAT,kBAAwBJ,MAAxB,GAAkCP,IAAlC,CAAuCS,QAAQ,IAAI;AACtD,aAAOA,QAAQ,CAACP,IAAhB;AACH,KAFM,CAAP;AAGH,GA9Bc;;AA+BfU,EAAAA,gBAAgB,CAACP,SAAS,GAAG,CAAb,EAAgB;AAC5B,WAAOf,QAAQ,CAACS,GAAT,CAAa,oBAAoBM,SAAjC,EACFL,IADE,CACGC,SAAS,IAAI;AACf,aAAOA,SAAS,CAACC,IAAjB;AACH,KAHE,CAAP;AAIH,GApCc;;AAqCfW,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AACrB,WAAOxB,QAAQ,CAACyB,GAAT,oBAA+B;AAACD,MAAAA,MAAM,EAACA;AAAR,KAA/B,EACFd,IADE,CACGC,SAAS,IAAI;AACf,aAAOA,SAAS,CAACC,IAAjB;AACH,KAHE,CAAP;AAIH,GA1Cc;;AA4CnBc,EAAAA,eAAe,CAACC,KAAD,EAAOC,QAAP,EAAgBC,UAAhB,EAA4B;AACvC,WAAO7B,QAAQ,CAACqB,IAAT,gBAA4B;AAACM,MAAAA,KAAK,EAAGA,KAAT;AACnCC,MAAAA,QAAQ,EAAGA,QADwB;AACdC,MAAAA,UAAU,EAAGA;AADC,KAA5B,EAEFnB,IAFE,CAEGC,SAAS,IAAI;AACf,aAAOA,SAAS,CAACC,IAAjB;AACH,KAJE,CAAP;AAKH;;AAlDkB,CAAZ","sourcesContent":["import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"1b0fde3a-3c72-4f1a-8a92-66508a392dc3\"\r\n    }\r\n})\r\n\r\nexport const API = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(responcse => {\r\n                return responcse.data\r\n            })\r\n    },\r\n\r\n    AuthMe() {\r\n        return instance.get(`auth/me`).then(responcse => {\r\n            return responcse.data\r\n        })\r\n    },\r\n\r\n    getProfile(ProfileID = 2) {\r\n        return instance.get(`profile/` + ProfileID)\r\n            .then(responcse => {\r\n                return responcse.data\r\n            })\r\n    },\r\n    DelSub(userId) {\r\n        return instance.delete(`follow/${userId}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    AddSub(userId) {\r\n        return instance.post(`follow/${userId}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    getProfileStatus(ProfileID = 2) {\r\n        return instance.get(`profile/status/` + ProfileID)\r\n            .then(responcse => {\r\n                return responcse.data\r\n            })\r\n    },\r\n    setProfileStatus(status) {\r\n        return instance.put(`profile/status/`,{status:status})\r\n            .then(responcse => {\r\n                return responcse.data\r\n            })\r\n    },\r\n\r\nSubmitDataLogin(email,password,rememberMe) {\r\n    return instance.post(`auth/login/`,{email : email,\r\n    password : password, rememberMe : rememberMe})\r\n        .then(responcse => {\r\n            return responcse.data\r\n        })\r\n}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}