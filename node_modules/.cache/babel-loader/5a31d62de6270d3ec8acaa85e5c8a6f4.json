{"ast":null,"code":"var _jsxFileName = \"H:\\\\js_projects\\\\1\\\\my-app\\\\src\\\\components\\\\Profile\\\\ProfileContainer.tsx\";\nimport React from 'react';\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom';\nimport { GetProfileThunk, GetProfileStatusThunk, SetProfileStatusThunk, SetProfilePhotoThunk, SetIsMyPage, UpdateProfileInfoThunk } from '../../data/ProfileReduser';\nimport { compose } from \"redux\";\nimport { GetIsMyPageSelector, GetProfileIsFetching, GetProfileSelector, GetStatusSelector } from \"../../data/ProfileSelectors\";\nimport { GetIsLoginedSelector, GetUserIDSelector } from \"../../data/AuthSelectors\";\nimport { SendNewMessageThunk } from \"../../data/DIalogsReduser\";\n\nclass ProfileContainer extends React.Component {\n  ProfileDataToPaint() {\n    let ProfileID = this.props.match.params.userID;\n\n    if (!ProfileID) {\n      ProfileID = this.props.userID;\n      this.props.SetIsMyPage(true); //  if this branch is going so we are in own page\n\n      if (!ProfileID) {\n        this.props.SetIsMyPage(false); // if this branch is going so we are on some user page\n      }\n    }\n\n    if (ProfileID) {\n      this.props.GetProfileThunk(ProfileID);\n      this.props.GetProfileStatusThunk(ProfileID);\n    }\n  }\n\n  componentDidMount() {\n    this.ProfileDataToPaint();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.match.params.userID !== prevProps.match.params.userID) {\n      this.ProfileDataToPaint();\n    }\n  }\n\n  render() {\n    debugger;\n    return React.createElement(Profile, {\n      profile: this.props.profile,\n      status: this.props.status,\n      SetProfileStatus: this.props.SetProfileStatusThunk,\n      SetProfilePhoto: this.props.SetProfilePhotoThunk,\n      IsMyPage: this.props.IsMyPage,\n      SaveProfileData: this.props.UpdateProfileInfoThunk,\n      SendNewMessageThunk: this.props.SendNewMessageThunk,\n      IsLogined: this.props.IsLogined,\n      IsFetching: this.props.IsFetching,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    });\n  }\n\n}\n\nlet MapStateToProps = state => ({\n  profile: GetProfileSelector(state),\n  status: GetStatusSelector(state),\n  userID: GetUserIDSelector(state),\n  IsMyPage: GetIsMyPageSelector(state),\n  IsFetching: GetProfileIsFetching(state),\n  IsLogined: GetIsLoginedSelector(state)\n});\n\nexport default compose(connect(MapStateToProps, {\n  GetProfileThunk,\n  GetProfileStatusThunk,\n  SetProfileStatusThunk,\n  SetProfilePhotoThunk,\n  SetIsMyPage,\n  UpdateProfileInfoThunk,\n  SendNewMessageThunk\n}), withRouter)(ProfileContainer);","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\components\\Profile\\ProfileContainer.tsx"],"names":["React","Profile","connect","withRouter","GetProfileThunk","GetProfileStatusThunk","SetProfileStatusThunk","SetProfilePhotoThunk","SetIsMyPage","UpdateProfileInfoThunk","compose","GetIsMyPageSelector","GetProfileIsFetching","GetProfileSelector","GetStatusSelector","GetIsLoginedSelector","GetUserIDSelector","SendNewMessageThunk","ProfileContainer","Component","ProfileDataToPaint","ProfileID","props","match","params","userID","componentDidMount","componentDidUpdate","prevProps","render","profile","status","IsMyPage","IsLogined","IsFetching","MapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from 'react-router-dom'\r\nimport {\r\n    GetProfileThunk,\r\n    GetProfileStatusThunk,\r\n    SetProfileStatusThunk,\r\n    SetProfilePhotoThunk,\r\n    SetIsMyPage, UpdateProfileInfoThunk\r\n}\r\n    from '../../data/ProfileReduser'\r\nimport {compose} from \"redux\";\r\nimport {\r\n    GetIsMyPageSelector, GetProfileIsFetching,\r\n    GetProfileSelector, GetStatusSelector\r\n} from \"../../data/ProfileSelectors\";\r\nimport {GetIsLoginedSelector, GetUserIDSelector} from \"../../data/AuthSelectors\";\r\nimport {SendNewMessageThunk} from \"../../data/DIalogsReduser\"\r\nimport {GlobalState} from \"../../data/redux-store\";\r\nimport {\r\n    T_MDTP_ProfileContainer,\r\n    T_MSTP_ProfileContainer,\r\n    TProfileContainerOwnProps\r\n} from \"../GlobalTypes/ProfileTypes/ProfileTypes\";\r\n\r\n\r\nexport type TProfileContainerProps = T_MSTP_ProfileContainer & T_MDTP_ProfileContainer & TProfileContainerOwnProps\r\n\r\nclass ProfileContainer extends React.Component<TProfileContainerProps> {\r\n\r\n    ProfileDataToPaint() {\r\n        let ProfileID = this.props.match.params.userID\r\n        if (!ProfileID) {\r\n            ProfileID = this.props.userID\r\n            this.props.SetIsMyPage(true) //  if this branch is going so we are in own page\r\n            if (!ProfileID) {\r\n                this.props.SetIsMyPage(false) // if this branch is going so we are on some user page\r\n            }\r\n        }\r\n        if (ProfileID) {\r\n            this.props.GetProfileThunk(ProfileID)\r\n            this.props.GetProfileStatusThunk(ProfileID)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.ProfileDataToPaint()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: TProfileContainerProps) {\r\n\r\n        if (this.props.match.params.userID !== prevProps.match.params.userID) {\r\n            this.ProfileDataToPaint()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        debugger\r\n        return (\r\n            <Profile profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     SetProfileStatus={this.props.SetProfileStatusThunk}\r\n                     SetProfilePhoto={this.props.SetProfilePhotoThunk}\r\n                     IsMyPage={this.props.IsMyPage}\r\n                     SaveProfileData={this.props.UpdateProfileInfoThunk}\r\n                     SendNewMessageThunk={this.props.SendNewMessageThunk}\r\n                     IsLogined={this.props.IsLogined}\r\n                     IsFetching={this.props.IsFetching}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet MapStateToProps = (state: GlobalState): T_MSTP_ProfileContainer => ({\r\n    profile: GetProfileSelector(state),\r\n    status: GetStatusSelector(state),\r\n    userID: GetUserIDSelector(state),\r\n    IsMyPage: GetIsMyPageSelector(state),\r\n    IsFetching: GetProfileIsFetching(state),\r\n    IsLogined: GetIsLoginedSelector(state)\r\n})\r\n\r\n\r\nexport default compose(\r\n    connect<T_MSTP_ProfileContainer, T_MDTP_ProfileContainer, TProfileContainerOwnProps, GlobalState>\r\n    (MapStateToProps, {\r\n        GetProfileThunk, GetProfileStatusThunk,\r\n        SetProfileStatusThunk, SetProfilePhotoThunk, SetIsMyPage,\r\n        UpdateProfileInfoThunk, SendNewMessageThunk\r\n    }),\r\n    withRouter)(ProfileContainer)"]},"metadata":{},"sourceType":"module"}