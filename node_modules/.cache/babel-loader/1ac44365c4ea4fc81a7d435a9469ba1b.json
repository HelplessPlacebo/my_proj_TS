{"ast":null,"code":"import * as axios from \"axios\";\nconst instance = axios.create({\n  withCredentials: true,\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    \"API-KEY\": \"96428d9a-0d9d-4cb1-8a30-3ebf6693ac4b\"\n  }\n});\nconst instanceToDoLists = axios.create({\n  withCredentials: true,\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n  headers: {\n    \"API-KEY\": \"96428d9a-0d9d-4cb1-8a30-3ebf6693ac4b\"\n  }\n});\nconst MyServerInstance = axios.create({\n  baseURL: 'http://localhost:5000/'\n});\nexport const API = {\n  async getUsers(currentPage = 1, pageSize = 10) {\n    const response = await instance.get(\"users?page=\".concat(currentPage, \"&count=\").concat(pageSize));\n    return response.data;\n  },\n\n  async AuthMe() {\n    const response = await instance.get(\"auth/me\");\n    return response.data;\n  },\n\n  async getProfile(ProfileID = 2) {\n    const response = await instance.get(\"profile/\" + ProfileID);\n    return response.data;\n  },\n\n  async DelSub(userId) {\n    const response = await instance.delete(\"follow/\".concat(userId));\n    return response.data;\n  },\n\n  async AddSub(userId) {\n    const response = await instance.post(\"follow/\".concat(userId));\n    return response.data;\n  },\n\n  async getProfileStatus(ProfileID = 2) {\n    const response = await instance.get(\"profile/status/\" + ProfileID);\n    return response.data;\n  },\n\n  async setProfileStatus(status) {\n    const response = await instance.put(\"profile/status/\", {\n      status: status\n    });\n    return response.data;\n  },\n\n  async Login(email, password, rememberMe, captcha) {\n    const response = await instance.post(\"auth/login/\", {\n      email: email,\n      password: password,\n      rememberMe: rememberMe,\n      captcha: captcha\n    });\n    return response.data;\n  },\n\n  async LogOut() {\n    const response = await instance.delete(\"auth/login\");\n    return response.data;\n  },\n\n  async LoadPhotoOnServer(photo) {\n    const formdata = new FormData();\n    formdata.append(\"image\", photo);\n    const response = await instance.put('profile/photo', formdata, {\n      'Content-Type': 'multipart/form-data'\n    });\n    return response.data;\n  },\n\n  async PutProfileDataOnServer(profile) {\n    const response = await instance.put('profile', profile);\n    return response.data;\n  },\n\n  async GetCaptchaFromServer() {\n    const response = await instance.get('security/get-captcha-url');\n    return response.data;\n  },\n\n  async GetAllDialogs() {\n    const response = await instance.get('dialogs');\n    return response.data;\n  },\n\n  async GetNewMessagesFromServer(userId) {\n    const response = await instance.get(\"dialogs/\".concat(userId, \"/messages\"));\n    return response.data;\n  },\n\n  async SendNewMessage(userId, NewMessage) {\n    const response = await instance.post(\"dialogs/\".concat(userId, \"/messages\"), {\n      body: NewMessage\n    });\n    return response.data;\n  },\n\n  async GetNewMessagesCount() {\n    const response = await instance.get('dialogs/messages/new/count');\n    return response;\n  },\n\n  async DeleteMessage(MessageID) {\n    const response = await instance.delete(\"dialogs//messages/\".concat(MessageID));\n    return response;\n  },\n\n  async FindUser(UserName) {\n    const response = await instance.get(\"users?term=\".concat(UserName));\n    return response;\n  },\n\n  async GetToDoLists() {\n    const response = await instance.get('todo-lists');\n    return response;\n  },\n\n  async CreateNewToDoList(title) {\n    const response = await instance.post('todo-lists', {\n      title: title\n    });\n    return response;\n  },\n\n  async DeleteToDoList(todolistId) {\n    await instance.delete(\"todo-lists/\".concat(todolistId));\n  },\n\n  async ChangeToDoListTitle(todolistId, title) {\n    await instance.put(\"todo-lists/\".concat(todolistId), {\n      title: title\n    });\n  },\n\n  async GetToDoListTasks(todolistId, count = 10, page = 1) {\n    const response = await instance.get(\"todo-lists/\".concat(todolistId, \"/tasks?count=\").concat(count, \"&page=\").concat(page));\n    return response;\n  },\n\n  async CreateNewTakForToDoList(todolistId, Tasktitle) {\n    const DataResponse = await instance.post(\"todo-lists/\".concat(todolistId, \"/tasks\"), {\n      title: Tasktitle\n    });\n    return DataResponse;\n  },\n\n  async ChangeTaskInformation(todolistId, taskid, status) {\n    const DataResponse = await instanceToDoLists.put(\"todo-lists/\".concat(todolistId, \"/tasks/\").concat(taskid), status);\n    return DataResponse;\n  },\n\n  async DeleteTaskFromToDoList(todolistId, taskid) {\n    const DataResponse = await instanceToDoLists.delete(\"todo-lists/\".concat(todolistId, \"/tasks/\").concat(taskid));\n    return DataResponse;\n  },\n\n  async MyServerReq() {\n    const Res = await MyServerInstance.get('server');\n    return Res;\n  },\n\n  async MyServerPost(body) {\n    const Res = await MyServerInstance.post('add_friend', body);\n    return Res;\n  }\n\n};","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\API\\requests.js"],"names":["axios","instance","create","withCredentials","baseURL","headers","instanceToDoLists","MyServerInstance","API","getUsers","currentPage","pageSize","response","get","data","AuthMe","getProfile","ProfileID","DelSub","userId","delete","AddSub","post","getProfileStatus","setProfileStatus","status","put","Login","email","password","rememberMe","captcha","LogOut","LoadPhotoOnServer","photo","formdata","FormData","append","PutProfileDataOnServer","profile","GetCaptchaFromServer","GetAllDialogs","GetNewMessagesFromServer","SendNewMessage","NewMessage","body","GetNewMessagesCount","DeleteMessage","MessageID","FindUser","UserName","GetToDoLists","CreateNewToDoList","title","DeleteToDoList","todolistId","ChangeToDoListTitle","GetToDoListTasks","count","page","CreateNewTakForToDoList","Tasktitle","DataResponse","ChangeTaskInformation","taskid","DeleteTaskFromToDoList","MyServerReq","Res","MyServerPost"],"mappings":"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","sourcesContent":["import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"96428d9a-0d9d-4cb1-8a30-3ebf6693ac4b\"\r\n    }\r\n})\r\n\r\nconst instanceToDoLists = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    headers: {\r\n        \"API-KEY\": \"96428d9a-0d9d-4cb1-8a30-3ebf6693ac4b\"\r\n    }\r\n})\r\nconst MyServerInstance = axios.create({\r\n    baseURL: 'http://localhost:5000/'\r\n})\r\n\r\nexport const API = {\r\n\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        const response = await instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n        return response.data\r\n    },\r\n\r\n    async AuthMe() {\r\n        const response = await instance.get(`auth/me`)\r\n        return response.data\r\n    },\r\n\r\n    async getProfile(ProfileID = 2) {\r\n        const response = await instance.get(`profile/` + ProfileID)\r\n        return response.data\r\n    },\r\n\r\n    async DelSub(userId) {\r\n        const response = await instance.delete(`follow/${userId}`)\r\n        return response.data\r\n    },\r\n\r\n    async AddSub(userId) {\r\n        const response = await instance.post(`follow/${userId}`)\r\n        return response.data\r\n    },\r\n\r\n    async getProfileStatus(ProfileID = 2) {\r\n        const response = await instance.get(`profile/status/` + ProfileID)\r\n        return response.data\r\n    },\r\n\r\n    async setProfileStatus(status) {\r\n        const response = await instance.put(`profile/status/`, {status: status})\r\n        return response.data\r\n\r\n    },\r\n\r\n    async Login(email, password, rememberMe, captcha) {\r\n        const response = await instance.post(`auth/login/`, {\r\n            email: email,\r\n            password: password,\r\n            rememberMe: rememberMe,\r\n            captcha: captcha\r\n        })\r\n        return response.data\r\n    },\r\n\r\n    async LogOut() {\r\n        const response = await instance.delete(`auth/login`)\r\n        return response.data\r\n\r\n    },\r\n\r\n    async LoadPhotoOnServer(photo) {\r\n        const formdata = new FormData()\r\n        formdata.append(\"image\", photo)\r\n        const response = await instance.put('profile/photo', formdata, {\r\n            'Content-Type': 'multipart/form-data'\r\n        })\r\n        return response.data\r\n    },\r\n    async PutProfileDataOnServer(profile) {\r\n        const response = await instance.put('profile', profile)\r\n        return response.data\r\n    },\r\n    async GetCaptchaFromServer() {\r\n        const response = await instance.get('security/get-captcha-url')\r\n        return response.data\r\n    },\r\n    async GetAllDialogs() {\r\n        const response = await instance.get('dialogs')\r\n        return response.data\r\n    },\r\n    async GetNewMessagesFromServer(userId) {\r\n        const response = await instance.get(`dialogs/${userId}/messages`)\r\n        return response.data\r\n    },\r\n    async SendNewMessage(userId, NewMessage) {\r\n        const response = await instance.post(`dialogs/${userId}/messages`, {\r\n            body: NewMessage\r\n        })\r\n        return response.data\r\n    },\r\n    async GetNewMessagesCount() {\r\n        const response = await instance.get('dialogs/messages/new/count')\r\n        return response\r\n    },\r\n    async DeleteMessage(MessageID) {\r\n        const response = await instance.delete(`dialogs//messages/${MessageID}`)\r\n        return response\r\n    },\r\n    async FindUser(UserName) {\r\n        const response = await instance.get(`users?term=${UserName}`)\r\n        return response\r\n    },\r\n    async GetToDoLists() {\r\n        const response = await instance.get('todo-lists')\r\n        return response\r\n    },\r\n    async CreateNewToDoList(title) {\r\n        const response = await instance.post('todo-lists', {title: title})\r\n        return response\r\n    },\r\n    async DeleteToDoList(todolistId) {\r\n        await instance.delete(`todo-lists/${todolistId}`)\r\n    },\r\n    async ChangeToDoListTitle(todolistId, title) {\r\n        await instance.put(`todo-lists/${todolistId}`, {\r\n            title: title\r\n        })\r\n    },\r\n    async GetToDoListTasks(todolistId, count = 10, page = 1) {\r\n        const response = await instance.get(`todo-lists/${todolistId}/tasks?count=${count}&page=${page}`)\r\n        return response\r\n    },\r\n\r\n    async CreateNewTakForToDoList(todolistId, Tasktitle) {\r\n        const DataResponse = await instance.post(`todo-lists/${todolistId}/tasks`, {\r\n            title: Tasktitle\r\n        })\r\n        return DataResponse\r\n    },\r\n\r\n    async ChangeTaskInformation(todolistId, taskid, status) {\r\n\r\n        const DataResponse = await instanceToDoLists.put(`todo-lists/${todolistId}/tasks/${taskid}`, status)\r\n        return DataResponse\r\n    },\r\n    async DeleteTaskFromToDoList(todolistId, taskid) {\r\n        const DataResponse = await instanceToDoLists.delete(`todo-lists/${todolistId}/tasks/${taskid}`)\r\n        return DataResponse\r\n    },\r\n    async MyServerReq(){\r\n        const Res = await MyServerInstance.get('server')\r\n        return Res\r\n    },\r\n    async MyServerPost(body){\r\n        const Res = await MyServerInstance.post('add_friend',body)\r\n        return Res\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}