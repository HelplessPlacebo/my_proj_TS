{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { API } from \"../API/requests\";\nconst Set_All_Dialogs = 'Dialogs/Set_All_Dialogs';\nconst Set_New_Messages = 'Dialogs/Set_New_Messages';\nconst Set_InterlocutorAvatar = 'Dialogs/Set_InterlocutorAvatar';\nconst Set_UserAvatarForDialogs = 'Dialogs/Set_UserAvatarForDialogs';\nconst Set_NewMessagesCount = 'Dialogs/Set_NewMessagesCount';\nconst Set_IsFetching = 'Dialogs/Set_IsFetching';\nlet DefaultState = {\n  AllDialogs: [],\n  DialogsMessages: {},\n  InterlocutorAvatar: \"\",\n  UserAvatar: \"\",\n  NewMessagesCount: 0,\n  IsFetching: false\n};\n\nconst DialogsReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case Set_All_Dialogs:\n      {\n        return _objectSpread({}, state, {\n          AllDialogs: action.NewAllDialogs\n        });\n      }\n\n    case Set_New_Messages:\n      {\n        return _objectSpread({}, state, {\n          DialogsMessages: action.NewMessagesData\n        });\n      }\n\n    case Set_InterlocutorAvatar:\n      {\n        return _objectSpread({}, state, {\n          InterlocutorAvatar: action.newInterlocutorAvatar\n        });\n      }\n\n    case Set_UserAvatarForDialogs:\n      {\n        return _objectSpread({}, state, {\n          UserAvatar: action.UserAvatar\n        });\n      }\n\n    case Set_NewMessagesCount:\n      {\n        return _objectSpread({}, state, {\n          NewMessagesCount: action.NewMessagesCount\n        });\n      }\n\n    case Set_IsFetching:\n      {\n        return _objectSpread({}, state, {\n          IsFetching: action.IsFetching\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAllDialogs = NewAllDialogs => {\n  return {\n    type: Set_All_Dialogs,\n    NewAllDialogs\n  };\n};\nexport const SetNewMessages = NewMessagesData => {\n  return {\n    type: Set_New_Messages,\n    NewMessagesData\n  };\n};\nexport const setInterlocutorAvatar = newInterlocutorAvatar => {\n  return {\n    type: Set_InterlocutorAvatar,\n    newInterlocutorAvatar\n  };\n};\nexport const SetNewMessagesCount = NewMessagesCount => {\n  return {\n    type: Set_NewMessagesCount,\n    NewMessagesCount\n  };\n};\nexport const setUserAvatarForDialogs = UserAvatar => {\n  return {\n    type: Set_UserAvatarForDialogs,\n    UserAvatar\n  };\n};\nexport const SetIsFetchingDialogs = IsFetching => {\n  return {\n    type: Set_IsFetching,\n    IsFetching\n  };\n};\nexport const GetAllDialogsThunk = () => async dispatch => {\n  dispatch(SetIsFetchingDialogs(true));\n  const Dialogs = await API.GetAllDialogs();\n  dispatch(SetAllDialogs(Dialogs));\n  dispatch(SetIsFetchingDialogs(false));\n};\nexport const GetNewMessagesThunk = DialoguserID => async dispatch => {\n  dispatch(SetIsFetchingDialogs(true));\n  const DialogsMessagesInfo = await API.GetNewMessagesFromServer(DialoguserID);\n  dispatch(SetIsFetchingDialogs(false));\n\n  if (!DialogsMessagesInfo.error) {\n    dispatch(SetNewMessages(DialogsMessagesInfo));\n  }\n};\nexport const SendNewMessageThunk = (DialoguserID, NewMessage) => async dispatch => {\n  const SendNewMessageResult = await API.SendNewMessage(DialoguserID, NewMessage);\n\n  if (SendNewMessageResult.resultCode === 0) {\n    dispatch(GetNewMessagesThunk(DialoguserID));\n  }\n};\nexport const GetInterlocutorAvatarThunk = DialoguserID => async dispatch => {\n  const InterlocutorAvatarData = await API.getProfile(DialoguserID);\n  dispatch(setInterlocutorAvatar(InterlocutorAvatarData.photos.small));\n};\nexport const GetProfileAvatarThunk = UserID => async dispatch => {\n  const ProfileData = await API.getProfile(UserID);\n  dispatch(setUserAvatarForDialogs(ProfileData.photos.small));\n};\nexport const GetNewMessagesCountThunk = () => async dispatch => {\n  const NewMessagesCount = await API.GetNewMessagesCount();\n  dispatch(SetNewMessagesCount(NewMessagesCount));\n};\nexport const DeleteMessageThunk = (MessageID, DialoguserID) => async dispatch => {\n  const DeleteMessageResult = await API.DeleteMessage(MessageID);\n\n  if (DeleteMessageResult.resultCode === 0) {\n    dispatch(GetNewMessagesThunk(DialoguserID));\n  }\n};\nexport default DialogsReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\DIalogsReduser.ts"],"names":["API","Set_All_Dialogs","Set_New_Messages","Set_InterlocutorAvatar","Set_UserAvatarForDialogs","Set_NewMessagesCount","Set_IsFetching","DefaultState","AllDialogs","DialogsMessages","InterlocutorAvatar","UserAvatar","NewMessagesCount","IsFetching","DialogsReducer","state","action","type","NewAllDialogs","NewMessagesData","newInterlocutorAvatar","SetAllDialogs","SetNewMessages","setInterlocutorAvatar","SetNewMessagesCount","setUserAvatarForDialogs","SetIsFetchingDialogs","GetAllDialogsThunk","dispatch","Dialogs","GetAllDialogs","GetNewMessagesThunk","DialoguserID","DialogsMessagesInfo","GetNewMessagesFromServer","error","SendNewMessageThunk","NewMessage","SendNewMessageResult","SendNewMessage","resultCode","GetInterlocutorAvatarThunk","InterlocutorAvatarData","getProfile","photos","small","GetProfileAvatarThunk","UserID","ProfileData","GetNewMessagesCountThunk","GetNewMessagesCount","DeleteMessageThunk","MessageID","DeleteMessageResult","DeleteMessage"],"mappings":"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","sourcesContent":["import {API} from \"../API/requests\";\r\nimport {TDialogs} from \"../components/GlobalTypes/DialogsTypes/DialogsTypes\"\r\nimport {TDialogMessages, TDialoguserID} from \"../components/GlobalTypes/DialogsTypes/MessagesTypes\"\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GlobalState} from \"./redux-store\";\r\n\r\n\r\nconst Set_All_Dialogs = 'Dialogs/Set_All_Dialogs'\r\nconst Set_New_Messages = 'Dialogs/Set_New_Messages'\r\nconst Set_InterlocutorAvatar = 'Dialogs/Set_InterlocutorAvatar'\r\nconst Set_UserAvatarForDialogs = 'Dialogs/Set_UserAvatarForDialogs'\r\nconst Set_NewMessagesCount = 'Dialogs/Set_NewMessagesCount'\r\nconst Set_IsFetching = 'Dialogs/Set_IsFetching'\r\n\r\n\r\ntype SetAllDialogsActionType = {\r\n    type: typeof Set_All_Dialogs,\r\n    NewAllDialogs: TDialogs | null\r\n}\r\ntype SetNewMessagesActionType = {\r\n    type: typeof Set_New_Messages,\r\n    NewMessagesData: TDialogMessages | null\r\n}\r\ntype SetInterlocutorAvatarActionType = {\r\n    type: typeof Set_InterlocutorAvatar,\r\n    newInterlocutorAvatar: string | null\r\n}\r\ntype SetUserAvatarForDialogActionType = {\r\n    type: typeof Set_UserAvatarForDialogs,\r\n    UserAvatar: string | null\r\n}\r\ntype SetNewMessagesCountActionType = {\r\n    type: typeof Set_NewMessagesCount,\r\n    NewMessagesCount: number\r\n}\r\ntype SetIsFetchingActionType = {\r\n    type: typeof Set_IsFetching,\r\n    IsFetching: boolean\r\n}\r\n\r\n\r\nlet DefaultState = {\r\n    AllDialogs: [] as TDialogs | null,\r\n    DialogsMessages: {} as TDialogMessages | null,\r\n    InterlocutorAvatar: \"\" as string | null,\r\n    UserAvatar: \"\" as string | null,\r\n    NewMessagesCount: 0,\r\n    IsFetching: false as boolean\r\n}\r\n\r\nexport type DefaultDialogsStateType = typeof DefaultState\r\n\r\ntype TDialogsReducerActions = SetAllDialogsActionType | SetNewMessagesActionType | SetInterlocutorAvatarActionType\r\n    | SetUserAvatarForDialogActionType | SetNewMessagesCountActionType | SetIsFetchingActionType\r\n\r\ntype TDialogsThunks = ThunkAction<Promise<void>, GlobalState, unknown, TDialogsReducerActions>\r\n\r\nconst DialogsReducer = (state = DefaultState, action: TDialogsReducerActions): DefaultDialogsStateType => {\r\n    switch (action.type) {\r\n\r\n        case Set_All_Dialogs : {\r\n            return {...state, AllDialogs: action.NewAllDialogs}\r\n        }\r\n        case  Set_New_Messages : {\r\n            return {...state, DialogsMessages: action.NewMessagesData}\r\n        }\r\n        case Set_InterlocutorAvatar : {\r\n            return {\r\n                ...state, InterlocutorAvatar: action.newInterlocutorAvatar\r\n            }\r\n        }\r\n        case Set_UserAvatarForDialogs : {\r\n            return {\r\n                ...state, UserAvatar: action.UserAvatar\r\n            }\r\n        }\r\n        case Set_NewMessagesCount : {\r\n            return {\r\n                ...state, NewMessagesCount: action.NewMessagesCount\r\n            }\r\n        }\r\n        case Set_IsFetching : {\r\n            return {\r\n                ...state, IsFetching: action.IsFetching\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const SetAllDialogs = (NewAllDialogs: TDialogs): SetAllDialogsActionType => {\r\n    return {type: Set_All_Dialogs, NewAllDialogs}\r\n}\r\n\r\nexport const SetNewMessages = (NewMessagesData: TDialogMessages): SetNewMessagesActionType => {\r\n    return {type: Set_New_Messages, NewMessagesData}\r\n}\r\n\r\nexport const setInterlocutorAvatar = (newInterlocutorAvatar: string | null): SetInterlocutorAvatarActionType => {\r\n    return {type: Set_InterlocutorAvatar, newInterlocutorAvatar}\r\n}\r\n\r\nexport const SetNewMessagesCount = (NewMessagesCount: number): SetNewMessagesCountActionType => {\r\n    return {type: Set_NewMessagesCount, NewMessagesCount}\r\n}\r\n\r\nexport const setUserAvatarForDialogs = (UserAvatar: string | null): SetUserAvatarForDialogActionType => {\r\n    return {type: Set_UserAvatarForDialogs, UserAvatar}\r\n}\r\n\r\nexport const SetIsFetchingDialogs = (IsFetching: boolean): SetIsFetchingActionType => {\r\n    return {type: Set_IsFetching, IsFetching}\r\n}\r\n\r\nexport const GetAllDialogsThunk = (): TDialogsThunks => async (dispatch) => {\r\n    dispatch(SetIsFetchingDialogs(true))\r\n    const Dialogs = await API.GetAllDialogs()\r\n    dispatch(SetAllDialogs(Dialogs))\r\n    dispatch(SetIsFetchingDialogs(false))\r\n}\r\n\r\nexport const GetNewMessagesThunk = (DialoguserID: TDialoguserID): TDialogsThunks => async (dispatch) => {\r\n    dispatch(SetIsFetchingDialogs(true))\r\n    const DialogsMessagesInfo = await API.GetNewMessagesFromServer(DialoguserID)\r\n    dispatch(SetIsFetchingDialogs(false))\r\n    if (!DialogsMessagesInfo.error) {\r\n        dispatch(SetNewMessages(DialogsMessagesInfo))\r\n    }\r\n}\r\n\r\nexport const SendNewMessageThunk = (DialoguserID: TDialoguserID, NewMessage: string): TDialogsThunks => async (dispatch) => {\r\n    const SendNewMessageResult = await API.SendNewMessage(DialoguserID, NewMessage)\r\n    if (SendNewMessageResult.resultCode === 0) {\r\n        dispatch(GetNewMessagesThunk(DialoguserID))\r\n    }\r\n}\r\n\r\nexport const GetInterlocutorAvatarThunk = (DialoguserID: TDialoguserID): TDialogsThunks => async (dispatch) => {\r\n    const InterlocutorAvatarData = await API.getProfile(DialoguserID)\r\n    dispatch(setInterlocutorAvatar(InterlocutorAvatarData.photos.small))\r\n}\r\n\r\nexport const GetProfileAvatarThunk = (UserID: number | null): TDialogsThunks => async (dispatch) => {\r\n    const ProfileData = await API.getProfile(UserID)\r\n    dispatch(setUserAvatarForDialogs(ProfileData.photos.small))\r\n}\r\n\r\nexport const GetNewMessagesCountThunk = (): TDialogsThunks => async (dispatch) => {\r\n    const NewMessagesCount = await API.GetNewMessagesCount()\r\n    dispatch(SetNewMessagesCount(NewMessagesCount))\r\n}\r\n\r\nexport const DeleteMessageThunk = (MessageID: number, DialoguserID: TDialoguserID): TDialogsThunks => async (dispatch) => {\r\n    const DeleteMessageResult = await API.DeleteMessage(MessageID)\r\n    if (DeleteMessageResult.resultCode === 0) {\r\n        dispatch(GetNewMessagesThunk(DialoguserID))\r\n    }\r\n}\r\n\r\nexport default DialogsReducer\r\n"]},"metadata":{},"sourceType":"module"}