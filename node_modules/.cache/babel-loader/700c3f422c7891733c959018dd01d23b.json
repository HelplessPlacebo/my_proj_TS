{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { AuthMeThunk } from \"./AuthReducer\";\nimport { GetProfileThunk } from \"./ProfileReduser\";\nconst INITIALIZATED = 'Init/INITIALIZATED';\nlet DefaultState = {\n  inition: false\n};\n\nconst InitializateReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case INITIALIZATED:\n      {\n        return _objectSpread({}, state, {\n          inition: true\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const initializating = () => ({\n  type: INITIALIZATED\n});\nexport const InitializationAPPthunk = () => async (dispatch, getState) => {\n  let promise = dispatch(AuthMeThunk());\n  await Promise.all([promise]);\n  const MyId = getState().Auth.userId;\n\n  if (MyId) {\n    dispatch(GetProfileThunk(MyId));\n  }\n\n  dispatch(initializating());\n};\nexport default InitializateReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\InitializatonReducer.ts"],"names":["AuthMeThunk","GetProfileThunk","INITIALIZATED","DefaultState","inition","InitializateReducer","state","action","type","initializating","InitializationAPPthunk","dispatch","getState","promise","Promise","all","MyId","Auth","userId"],"mappings":";AAAA,SAAQA,WAAR,QAA0B,eAA1B;AACA,SAAQC,eAAR,QAA8B,kBAA9B;AAIA,MAAMC,aAAa,GAAG,oBAAtB;AAEA,IAAIC,YAAY,GAAG;AAACC,EAAAA,OAAO,EAAE;AAAV,CAAnB;;AAYA,MAAMC,mBAAmB,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAA2F;AACnH,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,aAAL;AAAqB;AACjB,iCACOI,KADP;AAEIF,UAAAA,OAAO,EAAE;AAFb;AAIH;;AACD;AACI,aAAOE,KAAP;AARR;AAUH,CAXD;;AAaA,OAAO,MAAMG,cAAc,GAAG,OAAkC;AAACD,EAAAA,IAAI,EAAEN;AAAP,CAAlC,CAAvB;AAGP,OAAO,MAAMQ,sBAAsB,GAAG,MAA8B,OAAOC,QAAP,EAAkBC,QAAlB,KAAgC;AAEhG,MAAIC,OAAO,GAAGF,QAAQ,CAACX,WAAW,EAAZ,CAAtB;AACA,QAAMc,OAAO,CAACC,GAAR,CAAY,CAACF,OAAD,CAAZ,CAAN;AACA,QAAMG,IAAI,GAAGJ,QAAQ,GAAGK,IAAX,CAAgBC,MAA7B;;AACA,MAAIF,IAAJ,EAAU;AACNL,IAAAA,QAAQ,CAACV,eAAe,CAACe,IAAD,CAAhB,CAAR;AACH;;AACDL,EAAAA,QAAQ,CAACF,cAAc,EAAf,CAAR;AACH,CATM;AAWP,eAAeJ,mBAAf","sourcesContent":["import {AuthMeThunk} from \"./AuthReducer\"\r\nimport {GetProfileThunk} from \"./ProfileReduser\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GlobalState} from \"./redux-store\";\r\n\r\nconst INITIALIZATED = 'Init/INITIALIZATED'\r\n\r\nlet DefaultState = {inition: false}\r\n\r\ntype  DefaultInitializatedState = typeof DefaultState\r\n\r\ntype initializatingActionType = {\r\n    type: typeof INITIALIZATED\r\n}\r\n\r\ntype TInitializateReducerActions = initializatingActionType\r\n\r\ntype TInitializationThunks = ThunkAction<Promise<void>, GlobalState, unknown, TInitializateReducerActions>\r\n\r\nconst InitializateReducer = (state = DefaultState, action : TInitializateReducerActions): DefaultInitializatedState => {\r\n    switch (action.type) {\r\n        case INITIALIZATED : {\r\n            return {\r\n                ...state,\r\n                inition: true\r\n        }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializating = () : initializatingActionType => ({type: INITIALIZATED})\r\n\r\n\r\nexport const InitializationAPPthunk = () : TInitializationThunks => async (dispatch , getState ) => {\r\n\r\n    let promise = dispatch(AuthMeThunk())\r\n    await Promise.all([promise]);\r\n    const MyId = getState().Auth.userId\r\n    if (MyId) {\r\n        dispatch(GetProfileThunk(MyId))\r\n    }\r\n    dispatch(initializating())\r\n}\r\n\r\nexport default InitializateReducer"]},"metadata":{},"sourceType":"module"}