{"ast":null,"code":"var _jsxFileName = \"H:\\\\js_projects\\\\1\\\\my-app\\\\src\\\\components\\\\Dialogs\\\\DialogsContainer.tsx\";\nimport React from 'react';\nimport { SetNewMessages, GetAllDialogsThunk, GetNewMessagesThunk, SendNewMessageThunk } from \"../../data/DIalogsReduser\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { AuthRedirect } from \"../hocs/AuthRedirect\";\nimport { compose } from \"redux\";\nimport { GetAllDialogsSelector, GetIsFetchingDialogs } from \"../../data/DialogsSelectors\";\nimport { withRouter } from 'react-router-dom';\ndebugger;\n\nclass DialogsContainer extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.props.GetAllDialogsThunk();\n  }\n\n  render() {\n    return React.createElement(Dialogs, {\n      AllDialogs: this.props.AllDialogs,\n      IsFetching: this.props.IsFetching,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    });\n  }\n\n}\n\nlet StateToProps = state => ({\n  AllDialogs: GetAllDialogsSelector(state),\n  IsFetching: GetIsFetchingDialogs(state)\n});\n\nexport default compose(connect(StateToProps, {\n  SetNewMessages,\n  GetAllDialogsThunk,\n  GetNewMessagesThunk,\n  SendNewMessageThunk\n}), AuthRedirect, withRouter)(DialogsContainer);","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\components\\Dialogs\\DialogsContainer.tsx"],"names":["React","SetNewMessages","GetAllDialogsThunk","GetNewMessagesThunk","SendNewMessageThunk","Dialogs","connect","AuthRedirect","compose","GetAllDialogsSelector","GetIsFetchingDialogs","withRouter","DialogsContainer","Component","constructor","props","componentDidMount","render","AllDialogs","IsFetching","StateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EACoBC,kBADpB,EAEIC,mBAFJ,EAEyBC,mBAFzB,QAGO,2BAHP;AAIA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,QAA2B,sBAA3B;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,SAAQC,qBAAR,EAA+BC,oBAA/B,QAA0D,6BAA1D;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AAaA;;AACA,MAAMC,gBAAN,SAA+BZ,KAAK,CAACa,SAArC,CAA0E;AAEtEC,EAAAA,WAAW,CAACC,KAAD,EAAoC;AAC9C,UAAMA,KAAN;AACH;;AAEEC,EAAAA,iBAAiB,GAAG;AAChB,SAAKD,KAAL,CAAWb,kBAAX;AAEH;;AAEDe,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,OAAD;AAAS,MAAA,UAAU,EAAE,KAAKF,KAAL,CAAWG,UAAhC;AAA4C,MAAA,UAAU,EAAE,KAAKH,KAAL,CAAWI,UAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AAfqE;;AAmB1E,IAAIC,YAAY,GAAIC,KAAD,KAA2C;AAC1DH,EAAAA,UAAU,EAAET,qBAAqB,CAACY,KAAD,CADyB;AAE1DF,EAAAA,UAAU,EAAET,oBAAoB,CAACW,KAAD;AAF0B,CAA3C,CAAnB;;AAKA,eAAeb,OAAO,CAACF,OAAO,CAACc,YAAD,EAAe;AACzCnB,EAAAA,cADyC;AAEzCC,EAAAA,kBAFyC;AAErBC,EAAAA,mBAFqB;AAEAC,EAAAA;AAFA,CAAf,CAAR,EAGlBG,YAHkB,EAGJI,UAHI,CAAP,CAGeC,gBAHf,CAAf","sourcesContent":["import React from 'react'\r\nimport {\r\n    SetNewMessages, GetAllDialogsThunk,\r\n    GetNewMessagesThunk, SendNewMessageThunk\r\n} from \"../../data/DIalogsReduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AuthRedirect} from \"../hocs/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {GetAllDialogsSelector, GetIsFetchingDialogs} from \"../../data/DialogsSelectors\";\r\nimport {withRouter} from 'react-router-dom'\r\nimport DialogsType from \"../../data/DIalogsReduser\"\r\n\r\ntype DialogsContainerPropsType = {\r\n    GetAllDialogsThunk : () => {}\r\n    AllDialogs : typeof DialogsType\r\n    IsFetching : boolean\r\n}\r\n\r\n  type      TDialogsContainerMSTP = {\r\n      AllDialogs : typeof DialogsType\r\n      IsFetching : boolean\r\n}\r\ndebugger\r\nclass DialogsContainer extends React.Component<DialogsContainerPropsType> {\r\n\r\n    constructor(props : DialogsContainerPropsType) {\r\n     super(props)\r\n }\r\n\r\n    componentDidMount() {\r\n        this.props.GetAllDialogsThunk( )\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Dialogs AllDialogs={this.props.AllDialogs} IsFetching={this.props.IsFetching} />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet StateToProps = (state : any ) : TDialogsContainerMSTP => ({\r\n    AllDialogs: GetAllDialogsSelector(state),\r\n    IsFetching: GetIsFetchingDialogs(state)\r\n})\r\n\r\nexport default compose(connect(StateToProps, {\r\n    SetNewMessages,\r\n    GetAllDialogsThunk, GetNewMessagesThunk, SendNewMessageThunk\r\n}), AuthRedirect, withRouter)(DialogsContainer)"]},"metadata":{},"sourceType":"module"}