{"ast":null,"code":"var _jsxFileName = \"H:\\\\js_projects\\\\1\\\\my-app\\\\src\\\\components\\\\Users\\\\UsersContainer.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { follow_AC, setUsers_AC, unfollow_AC, setCurrentPage_AC, SetTotalCountOfUsers_AC } from \"../../data/UsersReduser\";\nimport * as axios from \"axios\";\nimport PurifyUsers from \"./Users\";\nimport LoadingSvg from \"../assetss/images/load.svg\";\n\nclass UsersAPItoServer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.OnChangedPage = pageNumber => {\n      this.props.SetCurrentPage(pageNumber);\n      axios.get(\"https://social-network.samuraijs.com/api/1.0/users?page= \".concat(pageNumber, \"\\n    &count=\").concat(this.props.pageSize)).then(responce => {\n        this.props.setUsers(responce.data.items);\n      });\n    };\n  }\n\n  /* this component using for make requests on server for a new users and drawing\r\n  Ui component (Users)*/\n  componentDidMount() {\n    axios.get(\"https://social-network.samuraijs.com/api/1.0/users?page= \".concat(this.props.currentPage, \"\\n    &count=\").concat(this.props.pageSize)).then(responce => {\n      this.props.setUsers(responce.data.items);\n      this.props.SetTotalCountOfUsers(responce.data.totalCount);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.props.IsFetching ? React.createElement(\"img\", {\n      src: LoadingSvg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }) : null, React.createElement(PurifyUsers, {\n      Users: this.props.Users,\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      OnChangedPage: this.OnChangedPage,\n      onFollow: this.props.onFollow,\n      onUnFollow: this.props.onUnFollow,\n      currentPage: this.props.currentPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }));\n  }\n\n}\n\nlet StateToProps = state => {\n  return {\n    Users: state.UsersData.Users,\n    pageSize: state.UsersData.pageSize,\n    totalUsersCount: state.UsersData.totalUsersCount,\n    currentPage: state.UsersData.currentPage\n  };\n};\n\nlet DispatchToProps = dispatch => {\n  return {\n    onFollow: userID => {\n      dispatch(follow_AC(userID));\n    },\n    onUnFollow: userID => {\n      dispatch(unfollow_AC(userID));\n    },\n    setUsers: Users => {\n      dispatch(setUsers_AC(Users));\n    },\n    SetCurrentPage: NumberOfPage => {\n      dispatch(setCurrentPage_AC(NumberOfPage));\n    },\n    SetTotalCountOfUsers: totalCount => {\n      dispatch(SetTotalCountOfUsers_AC(totalCount));\n    }\n  };\n};\n\nconst UsersContainer = connect(StateToProps, DispatchToProps)(UsersAPItoServer);\nexport default UsersContainer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\components\\Users\\UsersContainer.jsx"],"names":["React","connect","follow_AC","setUsers_AC","unfollow_AC","setCurrentPage_AC","SetTotalCountOfUsers_AC","axios","PurifyUsers","UsersAPItoServer","Component","OnChangedPage","pageNumber","props","SetCurrentPage","get","pageSize","then","responce","setUsers","data","items","componentDidMount","currentPage","SetTotalCountOfUsers","totalCount","render","IsFetching","LoadingSvg","Users","totalUsersCount","onFollow","onUnFollow","StateToProps","state","UsersData","DispatchToProps","dispatch","userID","NumberOfPage","UsersContainer"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {follow_AC, setUsers_AC, unfollow_AC, setCurrentPage_AC, SetTotalCountOfUsers_AC} from \"../../data/UsersReduser\";\r\nimport * as axios from \"axios\";\r\nimport PurifyUsers from \"./Users\";\r\nimport LoadingSvg from \"../assetss/images/load.svg\";\r\n\r\nclass UsersAPItoServer extends React.Component {\r\n    /* this component using for make requests on server for a new users and drawing\r\nUi component (Users)*/\r\n\r\n    componentDidMount() {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page= ${this.props.currentPage}\r\n    &count=${this.props.pageSize}`)\r\n            .then(responce => {\r\n                this.props.setUsers(responce.data.items)\r\n                this.props.SetTotalCountOfUsers(responce.data.totalCount)\r\n            })\r\n    }\r\n\r\n    OnChangedPage = (pageNumber) => {\r\n        this.props.SetCurrentPage(pageNumber)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page= ${pageNumber}\r\n    &count=${this.props.pageSize}`)\r\n            .then(responce => {\r\n                this.props.setUsers(responce.data.items)\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.IsFetching ? <img src={LoadingSvg}/> :null}\r\n        <PurifyUsers Users={this.props.Users}\r\n                            totalUsersCount={this.props.totalUsersCount}\r\n                            pageSize={this.props.pageSize}\r\n                            OnChangedPage={this.OnChangedPage}\r\n                            onFollow={this.props.onFollow}\r\n                            onUnFollow={this.props.onUnFollow}\r\n                            currentPage={this.props.currentPage}/>\r\n                            </>\r\n    }\r\n\r\n}\r\n\r\nlet StateToProps = (state) => {\r\n    return {\r\n        Users: state.UsersData.Users,\r\n        pageSize: state.UsersData.pageSize,\r\n        totalUsersCount: state.UsersData.totalUsersCount,\r\n        currentPage: state.UsersData.currentPage\r\n    }\r\n}\r\n\r\nlet DispatchToProps = (dispatch) => {\r\n    return {\r\n        onFollow: (userID) => {\r\n\r\n            dispatch(follow_AC(userID))\r\n        },\r\n        onUnFollow: (userID) => {\r\n\r\n            dispatch(unfollow_AC(userID))\r\n        },\r\n        setUsers: (Users) => {\r\n            dispatch(setUsers_AC(Users))\r\n        },\r\n        SetCurrentPage: (NumberOfPage) => {\r\n            dispatch(setCurrentPage_AC(NumberOfPage))\r\n        },\r\n        SetTotalCountOfUsers: (totalCount) => {\r\n            dispatch(SetTotalCountOfUsers_AC(totalCount))\r\n        }\r\n    }\r\n}\r\n\r\nconst UsersContainer = connect(StateToProps, DispatchToProps)(UsersAPItoServer)\r\n\r\nexport default UsersContainer"]},"metadata":{},"sourceType":"module"}