{"ast":null,"code":"import _slicedToArray from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"H:\\\\js_projects\\\\1\\\\my-app\\\\src\\\\components\\\\assetss\\\\common\\\\Paginator\\\\Paginator.js\";\nimport PS from \"./Paginator.module.css\";\nimport React, { useState } from \"react\";\n\nconst Paginator = props => {\n  let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize); // расчет кол-ва страниц\n\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      PortionNumber = _useState2[0],\n      SetPortionNumber = _useState2[1];\n\n  let LeftBorderOfPortion = (PortionNumber - 1) * props.PortionSize + 1;\n  let RightBorderOfPortion = PortionNumber * props.PortionSize;\n  let PortionCount = Math.ceil(pagesCount / props.PortionSize); // расчет кол-ва порций\n\n  return React.createElement(\"div\", {\n    className: PS.setNumbers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, PortionNumber > 1 && React.createElement(\"button\", {\n    onClick: () => {\n      SetPortionNumber(PortionNumber - 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \" back \"), pages.filter(p => p >= LeftBorderOfPortion && p <= RightBorderOfPortion).map(p => {\n    // нумерация страниц\n    return React.createElement(\"span\", {\n      className: props.currentPage === p && PS.numbers,\n      onClick: ev => {\n        props.OnChangedPage(p);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"    \" + p);\n  }), \"\\xA0\", PortionCount > PortionNumber && React.createElement(\"button\", {\n    onClick: () => {\n      SetPortionNumber(PortionNumber + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"next \"));\n};\n\nexport default Paginator;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\components\\assetss\\common\\Paginator\\Paginator.js"],"names":["PS","React","useState","Paginator","props","pagesCount","Math","ceil","totalUsersCount","pageSize","pages","i","push","PortionNumber","SetPortionNumber","LeftBorderOfPortion","PortionSize","RightBorderOfPortion","PortionCount","setNumbers","filter","p","map","currentPage","numbers","ev","OnChangedPage"],"mappings":";;AACA,OAAOA,EAAP,MAAe,wBAAf;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAEzB,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUH,KAAK,CAACI,eAAN,GAAwBJ,KAAK,CAACK,QAAxC,CAAjB,CAFyB,CAE0C;;AACnE,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIN,UAArB,EAAiCM,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;;AANwB,kBAQUT,QAAQ,CAAC,CAAD,CARlB;AAAA;AAAA,MAQxBW,aARwB;AAAA,MAQVC,gBARU;;AAS7B,MAAIC,mBAAmB,GAAG,CAACF,aAAa,GAAG,CAAjB,IAAsBT,KAAK,CAACY,WAA5B,GAA0C,CAApE;AACA,MAAIC,oBAAoB,GAAGJ,aAAa,GAAGT,KAAK,CAACY,WAAjD;AACI,MAAIE,YAAY,GAAGZ,IAAI,CAACC,IAAL,CAAUF,UAAU,GAAGD,KAAK,CAACY,WAA7B,CAAnB,CAXyB,CAWoC;;AAEjE,SAAO;AAAK,IAAA,SAAS,EAAEhB,EAAE,CAACmB,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACDN,aAAa,GAAG,CAAhB,IACF;AAAQ,IAAA,OAAO,EAAE,MAAI;AAACC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAqC,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,EAGEH,KAAK,CAACU,MAAN,CAAaC,CAAC,IAAGA,CAAC,IAAGN,mBAAJ,IAA2BM,CAAC,IAAIJ,oBAAjD,EAAuEK,GAAvE,CAA6ED,CAAD,IAAO;AAChF;AACA,WAEI;AAAM,MAAA,SAAS,EAAEjB,KAAK,CAACmB,WAAN,KAAsBF,CAAtB,IAA2BrB,EAAE,CAACwB,OAA/C;AACM,MAAA,OAAO,EAAGC,EAAD,IAAQ;AACbrB,QAAAA,KAAK,CAACsB,aAAN,CAAoBL,CAApB;AACH,OAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIa,SAASA,CAJtB,CAFJ;AAUH,GAZA,CAHF,UAiBFH,YAAY,GAAGL,aAAf,IAED;AAAQ,IAAA,OAAO,EAAE,MAAI;AAACC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAqC,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAnBG,CAAP;AAqBC,CAlCD;;AAoCA,eAAeV,SAAf","sourcesContent":["\r\nimport PS from \"./Paginator.module.css\";\r\nimport React, {useState} from \"react\"\r\n\r\nconst Paginator = (props) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize) // расчет кол-ва страниц\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\nlet [PortionNumber,SetPortionNumber] = useState(1)\r\nlet LeftBorderOfPortion = (PortionNumber - 1) * props.PortionSize + 1\r\nlet RightBorderOfPortion = PortionNumber * props.PortionSize\r\n    let PortionCount = Math.ceil(pagesCount / props.PortionSize) // расчет кол-ва порций\r\n\r\nreturn <div className={PS.setNumbers}>\r\n    { PortionNumber > 1 &&\r\n    <button onClick={()=>{SetPortionNumber(PortionNumber - 1 )}}> back </button>}\r\n        {pages.filter(p=> p>= LeftBorderOfPortion && p <= RightBorderOfPortion).map( (p) => {\r\n            // нумерация страниц\r\n            return (\r\n\r\n                <span className={props.currentPage === p && PS.numbers}\r\n                      onClick={(ev) => {\r\n                          props.OnChangedPage(p)\r\n                      }}>\r\n                            {\"    \" + p}\r\n                        </span>\r\n\r\n            )\r\n        })}\r\n    &nbsp;\r\n    {PortionCount > PortionNumber &&\r\n\r\n    <button onClick={()=>{SetPortionNumber(PortionNumber + 1 )}}>next </button>}\r\n    </div>\r\n}\r\n\r\nexport default Paginator"]},"metadata":{},"sourceType":"module"}