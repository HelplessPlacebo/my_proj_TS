{"ast":null,"code":"var _jsxFileName = \"H:\\\\js_projects\\\\1\\\\my-app\\\\src\\\\components\\\\Users\\\\UsersContainer.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { follow_AC, setUsers_AC, unfollow_AC, setCurrentPage_AC, SetTotalCountOfUsers_AC } from \"../../data/UsersReduser\";\nimport * as axios from \"axios\";\nimport PurifyUsers from \"./Users\";\nimport Preloader from \"../assetss/common/Loader/Loader\";\n\nclass UsersAPItoServer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.OnChangedPage = pageNumber => {\n      this.props.SetCurrentPage(pageNumber);\n      this.props.ToggleIsFetching(true);\n      axios.get(\"https://social-network.samuraijs.com/api/1.0/users?page= \".concat(pageNumber, \"\\n    &count=\").concat(this.props.pageSize)).then(responce => {\n        this.props.ToggleIsFetching(false);\n        this.props.setUsers(responce.data.items);\n      });\n    };\n  }\n\n  /* this component using for make requests on server for a new users and drawing\r\n  Ui component (Users)*/\n  componentDidMount() {\n    this.props.ToggleIsFetching(true);\n    axios.get(\"https://social-network.samuraijs.com/api/1.0/users?page= \".concat(this.props.currentPage, \"\\n    &count=\").concat(this.props.pageSize)).then(responce => {\n      this.props.ToggleIsFetching(false);\n      this.props.setUsers(responce.data.items);\n      this.props.SetTotalCountOfUsers(responce.data.totalCount);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.props.IsFetching ? React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }) : null, React.createElement(PurifyUsers, {\n      Users: this.props.Users,\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      OnChangedPage: this.OnChangedPage,\n      onFollow: this.props.onFollow,\n      onUnFollow: this.props.onUnFollow,\n      currentPage: this.props.currentPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }));\n  }\n\n}\n\nlet StateToProps = state => {\n  return {\n    Users: state.UsersData.Users,\n    pageSize: state.UsersData.pageSize,\n    totalUsersCount: state.UsersData.totalUsersCount,\n    currentPage: state.UsersData.currentPage,\n    IsFetching: state.UsersData.IsFetching\n  };\n};\n\nlet DispatchToProps = dispatch => {\n  return {\n    onFollow: userID => {\n      dispatch(follow_AC(userID));\n    },\n    onUnFollow: userID => {\n      dispatch(unfollow_AC(userID));\n    },\n    setUsers: Users => {\n      dispatch(setUsers_AC(Users));\n    },\n    SetCurrentPage: NumberOfPage => {\n      dispatch(setCurrentPage_AC(NumberOfPage));\n    },\n    SetTotalCountOfUsers: totalCount => {\n      dispatch(SetTotalCountOfUsers_AC(totalCount));\n    },\n    ToggleIsFetching: IsFetching => {\n      dispatch(IsFetchingToggle_AC(IsFetching));\n    }\n  };\n};\n\nconst UsersContainer = connect(StateToProps, DispatchToProps)(UsersAPItoServer);\nexport default UsersContainer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\components\\Users\\UsersContainer.jsx"],"names":["React","connect","follow_AC","setUsers_AC","unfollow_AC","setCurrentPage_AC","SetTotalCountOfUsers_AC","axios","PurifyUsers","Preloader","UsersAPItoServer","Component","OnChangedPage","pageNumber","props","SetCurrentPage","ToggleIsFetching","get","pageSize","then","responce","setUsers","data","items","componentDidMount","currentPage","SetTotalCountOfUsers","totalCount","render","IsFetching","Users","totalUsersCount","onFollow","onUnFollow","StateToProps","state","UsersData","DispatchToProps","dispatch","userID","NumberOfPage","IsFetchingToggle_AC","UsersContainer"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {follow_AC, setUsers_AC, unfollow_AC, setCurrentPage_AC, SetTotalCountOfUsers_AC} from \"../../data/UsersReduser\";\r\nimport * as axios from \"axios\";\r\nimport PurifyUsers from \"./Users\";\r\nimport Preloader from \"../assetss/common/Loader/Loader\";\r\n\r\nclass UsersAPItoServer extends React.Component {\r\n    /* this component using for make requests on server for a new users and drawing\r\nUi component (Users)*/\r\n\r\n    componentDidMount() {\r\n        this.props.ToggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page= ${this.props.currentPage}\r\n    &count=${this.props.pageSize}`)\r\n            .then(responce => {\r\n                this.props.ToggleIsFetching(false)\r\n                this.props.setUsers(responce.data.items)\r\n                this.props.SetTotalCountOfUsers(responce.data.totalCount)\r\n            })\r\n    }\r\n\r\n    OnChangedPage = (pageNumber) => {\r\n        this.props.SetCurrentPage(pageNumber)\r\n        this.props.ToggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page= ${pageNumber}\r\n    &count=${this.props.pageSize}`)\r\n            .then(responce => {\r\n                this.props.ToggleIsFetching(false)\r\n                this.props.setUsers(responce.data.items)\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.IsFetching ? <Preloader/> :null}\r\n        <PurifyUsers Users={this.props.Users}\r\n                            totalUsersCount={this.props.totalUsersCount}\r\n                            pageSize={this.props.pageSize}\r\n                            OnChangedPage={this.OnChangedPage}\r\n                            onFollow={this.props.onFollow}\r\n                            onUnFollow={this.props.onUnFollow}\r\n                            currentPage={this.props.currentPage}/>\r\n                            </>\r\n    }\r\n\r\n}\r\n\r\nlet StateToProps = (state) => {\r\n    return {\r\n        Users: state.UsersData.Users,\r\n        pageSize: state.UsersData.pageSize,\r\n        totalUsersCount: state.UsersData.totalUsersCount,\r\n        currentPage: state.UsersData.currentPage,\r\n        IsFetching : state.UsersData.IsFetching\r\n    }\r\n}\r\n\r\nlet DispatchToProps = (dispatch) => {\r\n    return {\r\n        onFollow: (userID) => {\r\n\r\n            dispatch(follow_AC(userID))\r\n        },\r\n        onUnFollow: (userID) => {\r\n\r\n            dispatch(unfollow_AC(userID))\r\n        },\r\n        setUsers: (Users) => {\r\n            dispatch(setUsers_AC(Users))\r\n        },\r\n        SetCurrentPage: (NumberOfPage) => {\r\n            dispatch(setCurrentPage_AC(NumberOfPage))\r\n        },\r\n        SetTotalCountOfUsers: (totalCount) => {\r\n            dispatch(SetTotalCountOfUsers_AC(totalCount))\r\n        },\r\n        ToggleIsFetching: (IsFetching) => {\r\n            dispatch(IsFetchingToggle_AC(IsFetching))\r\n        }\r\n    }\r\n}\r\n\r\nconst UsersContainer = connect(StateToProps, DispatchToProps)(UsersAPItoServer)\r\n\r\nexport default UsersContainer"]},"metadata":{},"sourceType":"module"}