{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"H:\\\\js_projects\\\\1\\\\my-app\\\\src\\\\components\\\\ToDoLists\\\\ToDoListTasks\\\\Task.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport ts from \"./Tasks.module.css\";\nimport classNames from 'classnames';\nimport DeleteButton from \"./DeleteTaskButton\";\nimport TaskDoneIcon from \"./DoneIcone\";\nimport EditTaskButton from \"./EditTaskButton\";\nimport TaskDetails from \"./TaskDetails\";\nimport NotDoneIcon from \"./NotDoneIcon\";\nimport TaskEditForm from \"./TaskEditForm\";\nimport { reduxForm } from \"redux-form\";\nimport { DateTransform } from \"../../utils/dateTransform\";\n\nconst Task = props => {\n  let _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      TaskEditMode = _useState2[0],\n      SetTaskEditMode = _useState2[1];\n\n  let _useState3 = useState({\n    completed: props.CurrentTask.completed,\n    deadline: props.CurrentTask.deadline,\n    description: props.CurrentTask.description,\n    priority: props.CurrentTask.priority,\n    startDate: props.CurrentTask.startDate,\n    status: props.stat,\n    title: props.TaskTitle\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      SetStatus = _useState4[1];\n\n  let TrueStartDate = DateTransform(props.TaskStartDate);\n  let TrueDeadLine = DateTransform(props.TaskDeadline);\n\n  const TrueObjMaker = (status, TrueStartDate, TrueDeadLine) => {\n    if (status && TrueStartDate && TrueDeadLine) {\n      return Object.assign(_objectSpread({}, status), {\n        startDate: TrueStartDate[2] + \"-\" + TrueStartDate[1] + \"-\" + TrueStartDate[0],\n        deadline: TrueDeadLine[2] + \"-\" + TrueDeadLine[1] + \"-\" + TrueDeadLine[0]\n      });\n    }\n  };\n\n  useEffect(() => {\n    SetStatus(props.CurrentTask);\n  }, [props.CurrentTask]);\n\n  const TaskEditModeON = () => {\n    SetTaskEditMode(true);\n  };\n\n  const TaskEditModeOFF = () => {\n    SetTaskEditMode(false);\n  };\n\n  const TaskExecutedStyleForWindow = classNames({\n    [ts.Ramka]: !props.completed,\n    [ts.DoneRamka]: props.completed\n  });\n\n  const SaveNewToDoListTaskInfo = formData => {\n    props.UpdateTaskInformationThunk(props.ListID, props.TaskID, formData);\n    TaskEditModeOFF();\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  },\n  /*  props.ToDoListTasks.map(el => el.ListId === props.ListID && el.TaskData.items.map(key =>{\r\n         return <div key={key.id}>\r\n             {key.title}\r\n         </div>\r\n         })\r\n     )*/\n  !TaskEditMode ? React.createElement(\"div\", {\n    className: ts.Main,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classNames(ts.MainWrapper),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: ts.TaskEditButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(EditTaskButton, {\n    ShowButtonBlocked: props.ShowButtonBlocked,\n    ButtonSize: \"small\",\n    HandleOnClick: TaskEditModeON,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: TaskExecutedStyleForWindow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: ts.TaskBodyWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, props.completed ? React.createElement(\"div\", {\n    className: ts.iconStatus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(TaskDoneIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    className: ts.iconStatus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(NotDoneIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: ts.Title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, props.TaskTitle), React.createElement(\"div\", {\n    className: ts.ToTrashIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(DeleteButton, {\n    DeleteTaskThunk: props.DeleteTaskThunk,\n    ShowButtonBlocked: props.ShowButtonBlocked,\n    ListID: props.ListID,\n    TaskID: props.TaskID,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(TaskDetails, {\n    CurrentTask: status,\n    ShowButtonBlockedON: props.ShowButtonBlockedON,\n    ShowButtonBlockedOFF: props.ShowButtonBlockedOFF,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }))))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(TaskEditFormRedux, {\n    initialValues: TrueStartDate && TrueDeadLine ? TrueObjMaker(status, TrueStartDate, TrueDeadLine) : status //@ts-ignore\n    ,\n    TaskEditModeOFF: TaskEditModeOFF,\n    ListID: props.ListID,\n    TaskID: props.TaskID,\n    onSubmit: SaveNewToDoListTaskInfo,\n    TaskExecutedStyleForWindow: TaskExecutedStyleForWindow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })));\n};\n\nconst TaskEditFormRedux = reduxForm({\n  form: 'TaskEditorForm'\n})(TaskEditForm);\nexport default Task;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\components\\ToDoLists\\ToDoListTasks\\Task.tsx"],"names":["React","useState","useEffect","ts","classNames","DeleteButton","TaskDoneIcon","EditTaskButton","TaskDetails","NotDoneIcon","TaskEditForm","reduxForm","DateTransform","Task","props","TaskEditMode","SetTaskEditMode","completed","CurrentTask","deadline","description","priority","startDate","status","stat","title","TaskTitle","SetStatus","TrueStartDate","TaskStartDate","TrueDeadLine","TaskDeadline","TrueObjMaker","Object","assign","TaskEditModeON","TaskEditModeOFF","TaskExecutedStyleForWindow","Ramka","DoneRamka","SaveNewToDoListTaskInfo","formData","UpdateTaskInformationThunk","ListID","TaskID","Main","MainWrapper","TaskEditButton","ShowButtonBlocked","TaskBodyWrapper","iconStatus","Title","ToTrashIcon","DeleteTaskThunk","ShowButtonBlockedON","ShowButtonBlockedOFF","TaskEditFormRedux","form"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from \"react\"\r\nimport ts from \"./Tasks.module.css\"\r\nimport classNames from 'classnames';\r\nimport DeleteButton from \"./DeleteTaskButton\";\r\nimport TaskDoneIcon from \"./DoneIcone\";\r\nimport EditTaskButton from \"./EditTaskButton\";\r\nimport TaskDetails from \"./TaskDetails\";\r\nimport NotDoneIcon from \"./NotDoneIcon\";\r\nimport TaskEditForm from \"./TaskEditForm\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {DateTransform} from \"../../utils/dateTransform\";\r\nimport {ToDoListTaskStatusType, TTaskProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\nconst Task : React.FC<TTaskProps> = (props) => {\r\n\r\n    let [TaskEditMode, SetTaskEditMode] = useState(false)\r\n    let [status, SetStatus] = useState<ToDoListTaskStatusType>({\r\n        completed : props.CurrentTask.completed,\r\n        deadline : props.CurrentTask.deadline,\r\n        description : props.CurrentTask.description,\r\n        priority : props.CurrentTask.priority,\r\n        startDate : props.CurrentTask.startDate,\r\n        status : props.stat,\r\n        title : props.TaskTitle\r\n    })\r\n\r\n    let TrueStartDate = DateTransform(props.TaskStartDate)\r\n    let TrueDeadLine = DateTransform(props.TaskDeadline)\r\n\r\nconst TrueObjMaker=(status : object,TrueStartDate : string,TrueDeadLine : string)=>{\r\n        if (status && TrueStartDate && TrueDeadLine  )\r\n        {\r\n            return Object.assign({...status},{ startDate:TrueStartDate[2]+\"-\"+TrueStartDate[1]+\"-\"+TrueStartDate[0],\r\n                deadline :TrueDeadLine[2]+\"-\"+TrueDeadLine[1]+\"-\"+TrueDeadLine[0] })\r\n\r\n        }\r\n}\r\n\r\n\r\n    useEffect(() => {\r\n        SetStatus(props.CurrentTask)\r\n        }, [props.CurrentTask]\r\n    )\r\n\r\n\r\n\r\n    const TaskEditModeON = () => {\r\n        SetTaskEditMode(true)\r\n    }\r\n    const TaskEditModeOFF = () => {\r\n        SetTaskEditMode(false)\r\n    }\r\n    const TaskExecutedStyleForWindow = classNames({\r\n        [ts.Ramka] : !props.completed,\r\n        [ts.DoneRamka] : props.completed\r\n    })\r\n\r\n    const SaveNewToDoListTaskInfo= (formData : any)=>{\r\n        props.UpdateTaskInformationThunk(props.ListID,props.TaskID,formData)\r\n        TaskEditModeOFF()\r\n\r\n    }\r\n\r\n    return <div>\r\n        {  /*  props.ToDoListTasks.map(el => el.ListId === props.ListID && el.TaskData.items.map(key =>{\r\n                  return <div key={key.id}>\r\n                      {key.title}\r\n                  </div>\r\n                  })\r\n              )*/\r\n\r\n\r\n            !TaskEditMode ?\r\n            <div  className={ts.Main}>\r\n\r\n                <div className={classNames(ts.MainWrapper)}>\r\n\r\n                    <div className={ts.TaskEditButton}>\r\n                        <EditTaskButton ShowButtonBlocked={props.ShowButtonBlocked} ButtonSize={\"small\"} HandleOnClick={TaskEditModeON}/>\r\n                    </div>\r\n\r\n                    <div className={TaskExecutedStyleForWindow}>\r\n                        <div className={ts.TaskBodyWrapper}>\r\n                            {props.completed ?\r\n                                <div className={ts.iconStatus}>\r\n                                    <TaskDoneIcon/>\r\n                                </div>\r\n                                :\r\n                                <div className={ts.iconStatus}>\r\n                                    <NotDoneIcon/>\r\n                                </div>\r\n                            }\r\n\r\n\r\n                            <div className={ts.Title}>\r\n                                {props.TaskTitle}\r\n                            </div>\r\n\r\n\r\n                            <div className={ts.ToTrashIcon}>\r\n                                <DeleteButton DeleteTaskThunk={props.DeleteTaskThunk}\r\n                                              ShowButtonBlocked={props.ShowButtonBlocked}\r\n                                              ListID={props.ListID} TaskID={props.TaskID}/>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div>\r\n                            <TaskDetails\r\n\r\n                                CurrentTask={status}\r\n                                ShowButtonBlockedON={props.ShowButtonBlockedON}\r\n                                ShowButtonBlockedOFF={props.ShowButtonBlockedOFF}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n                :\r\n                <div>\r\n                    <TaskEditFormRedux\r\n                                    initialValues={TrueStartDate && TrueDeadLine\r\n                                           ? TrueObjMaker(status,TrueStartDate,TrueDeadLine)\r\n                                           : status\r\n                                       }\r\n                                    //@ts-ignore\r\n                                       TaskEditModeOFF={TaskEditModeOFF}\r\n                                       ListID={props.ListID}\r\n                                       TaskID={props.TaskID}\r\n                                       onSubmit={SaveNewToDoListTaskInfo}\r\n                                       TaskExecutedStyleForWindow={TaskExecutedStyleForWindow}\r\n                    />\r\n                </div>\r\n        }\r\n\r\n    </div>\r\n}\r\nconst TaskEditFormRedux = reduxForm({form: 'TaskEditorForm'})(TaskEditForm)\r\n\r\nexport default Task"]},"metadata":{},"sourceType":"module"}