{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { API } from \"../API/requests\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'Auth/SET_USER_DATA';\nconst IsFetching_Toggle = 'Auth/IsFetching_Toggle';\nlet DefaultState = {\n  userId: null,\n  email: null,\n  login: null,\n  IsLogined: false,\n  IsFetching: false\n};\n\nconst AuthReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      {\n        return _objectSpread({}, state, action.data);\n      }\n\n    case IsFetching_Toggle:\n      {\n        return _objectSpread({}, state, {\n          IsFetching: action.IsFetching\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAuthUser = (userId, email, login, IsLogined) => ({\n  type: SET_USER_DATA,\n  data: {\n    userId,\n    email,\n    login,\n    IsLogined\n  }\n});\nexport const ToggleIsFetching = IsFetching => {\n  return {\n    type: IsFetching_Toggle,\n    IsFetching\n  };\n};\nexport const AuthMeThunk = () => {\n  return dispatch => {\n    ToggleIsFetching(true);\n    return API.AuthMe().then(data => {\n      //возвращает данные авторизованного юзера\n      dispatch(ToggleIsFetching(false));\n\n      if (data.resultCode === 0) {\n        let _data$data = data.data,\n            id = _data$data.id,\n            email = _data$data.email,\n            login = _data$data.login;\n        dispatch(SetAuthUser(id, email, login, true));\n      }\n    });\n  };\n};\nexport const LoginThunk = (email, password, rememberMe = false) => {\n  return async dispatch => {\n    const data = await API.Login(email, password, rememberMe);\n\n    if (data.resultCode === 0) {\n      dispatch(AuthMeThunk());\n    } else {\n      dispatch(stopSubmit(\"login\", {\n        _error: data.messages[0]\n      }));\n    }\n  };\n};\nexport const LogOutThunk = () => {\n  return async dispatch => {\n    const data = await API.LogOut();\n\n    if (data.resultCode === 0) {\n      dispatch(SetAuthUser(null, null, null, false));\n    }\n  };\n};\nexport default AuthReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\AuthReducer.js"],"names":["API","stopSubmit","SET_USER_DATA","IsFetching_Toggle","DefaultState","userId","email","login","IsLogined","IsFetching","AuthReducer","state","action","type","data","SetAuthUser","ToggleIsFetching","AuthMeThunk","dispatch","AuthMe","then","resultCode","id","LoginThunk","password","rememberMe","Login","_error","messages","LogOutThunk","LogOut"],"mappings":"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","sourcesContent":["import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_USER_DATA = 'Auth/SET_USER_DATA'\r\nconst IsFetching_Toggle = 'Auth/IsFetching_Toggle'\r\n\r\nlet DefaultState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    IsLogined: false,\r\n    IsFetching: false\r\n}\r\n\r\nconst AuthReducer = (state = DefaultState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA : {\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n\r\n        }\r\n        case IsFetching_Toggle: {\r\n            return {...state, IsFetching: action.IsFetching}\r\n        }\r\n        default :\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const SetAuthUser = (userId, email, login, IsLogined) =>\r\n    ({type: SET_USER_DATA, data: {userId, email, login, IsLogined}})\r\n\r\nexport const ToggleIsFetching = (IsFetching) => {\r\n    return {type: IsFetching_Toggle, IsFetching}\r\n}\r\nexport const AuthMeThunk = () => {\r\n    return (dispatch) => {\r\n        ToggleIsFetching(true)\r\n        return API.AuthMe().then(data => { //возвращает данные авторизованного юзера\r\n            dispatch(ToggleIsFetching(false))\r\n            if (data.resultCode === 0) {\r\n                let {id, email, login} = data.data\r\n                dispatch(SetAuthUser(id, email, login, true))\r\n\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const LoginThunk = (email, password, rememberMe = false) => {\r\n    return async (dispatch) => {\r\n        const data = await API.Login(email, password, rememberMe)\r\n        if (data.resultCode === 0) {\r\n            dispatch(AuthMeThunk())\r\n        } else {\r\n            dispatch(stopSubmit(\"login\", {_error: data.messages[0]}))\r\n        }\r\n    }\r\n}\r\n\r\nexport const LogOutThunk = () => {\r\n    return async (dispatch) => {\r\n        const data = await API.LogOut()\r\n        if (data.resultCode === 0) {\r\n            dispatch(SetAuthUser(null, null, null, false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default AuthReducer"]},"metadata":{},"sourceType":"module"}