{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { API } from \"../API/requests\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_TO_DO_LISTS = 'ToDoLists/SET_TO_DO_LISTS';\nconst SET_TO_DO_LIST_TASKS_Page = 'ToDoLists/SET_TO_DO_LIST_TASKS_Page';\nconst SET_TO_DO_LISTS_TASKS_Count = 'ToDoLists/SET_TO_DO_LISTS_TASKS_Count';\nconst SET_TO_DO_LIST_TASKS = 'ToDoLists/SET_TO_DO_LIST_TASKS';\nconst IsFetching_Toggle = 'ToDoLists/IsFetching_Toggle';\nconst TaskIsFetching_Toggle = 'ToDoLists/TaskIsFetching_Toggle';\nlet DefaultState = {\n  ToDoLists: [],\n  ToDoListTasks: null,\n  ToDoListTasksPage: 1,\n  ToDoListTasksCount: 10,\n  IsFetching: false,\n  TaskIsFetching: false\n};\n\nconst ToDoListsReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case SET_TO_DO_LISTS:\n      {\n        return _objectSpread({}, state, {\n          ToDoLists: action.NewToDoLists\n        });\n      }\n\n    case SET_TO_DO_LIST_TASKS_Page:\n      {\n        return _objectSpread({}, state, {\n          ToDoListTasksPage: action.NewToDoListTasksPage\n        });\n      }\n\n    case SET_TO_DO_LISTS_TASKS_Count:\n      {\n        return _objectSpread({}, state, {\n          ToDoListTasksCount: action.NewToDoListTasksCount\n        });\n      }\n\n    case SET_TO_DO_LIST_TASKS:\n      {\n        return _objectSpread({}, state, {\n          ToDoListTasks: action.Tasks\n        });\n      }\n\n    /*case SET_TO_DO_LIST_TASKS: {\r\n        let NewTask = {\r\n            ListId: action.ListID,\r\n            TaskData: action.Tasks,\r\n          };\r\n        if(state.ToDoListTasks.every(el=>el.ListId !== action.ListID)) {\r\n            return {\r\n                ...state,\r\n                ToDoListTasks: [...state.ToDoListTasks, NewTask]\r\n            }\r\n        }\r\n      else return {\r\n          ...state,\r\n          ToDoListTasks: [...state.ToDoListTasks.filter(item=>{return item.ListId === action.ListID}).TaskData, action.Tasks]\r\n          }\r\n    }*/\n\n    case IsFetching_Toggle:\n      {\n        return _objectSpread({}, state, {\n          IsFetching: action.IsFetching\n        });\n      }\n\n    case TaskIsFetching_Toggle:\n      {\n        return _objectSpread({}, state, {\n          TaskIsFetching: action.TaskIsFetching\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const SetToDoLists = NewToDoLists => {\n  return {\n    type: SET_TO_DO_LISTS,\n    NewToDoLists\n  };\n};\nexport const SetToDoListTasksPage = NewToDoListTasksPage => {\n  return {\n    type: SET_TO_DO_LIST_TASKS_Page,\n    NewToDoListTasksPage\n  };\n};\nexport const SetToDoListTasksCount = NewToDoListTasksCount => {\n  return {\n    type: SET_TO_DO_LISTS_TASKS_Count,\n    NewToDoListTasksCount\n  };\n};\nexport const SetToDoListTasks = Tasks => {\n  return {\n    type: SET_TO_DO_LIST_TASKS,\n    Tasks\n  };\n};\nexport const ToggleIsFetching = IsFetching => {\n  return {\n    type: IsFetching_Toggle,\n    IsFetching\n  };\n};\nexport const SetTaskIsFetching = TaskIsFetching => {\n  return {\n    type: TaskIsFetching_Toggle,\n    TaskIsFetching\n  };\n};\nexport const GetToDoListsThunk = () => async dispatch => {\n  dispatch(ToggleIsFetching(true));\n  const ToDoLists = await API.GetToDoLists();\n  dispatch(SetToDoLists(ToDoLists));\n  dispatch(ToggleIsFetching(false));\n};\nexport const AddNewToDoListsThunk = title => async dispatch => {\n  const CreateNewToDoListResult = await API.CreateNewToDoList(title);\n\n  if (CreateNewToDoListResult.resultCode === 0) {\n    dispatch(GetToDoListsThunk());\n  }\n};\nexport const DeleteToDoListThunk = ToDoListID => async dispatch => {\n  const DeleteToDoListResult = await API.DeleteToDoList(ToDoListID);\n\n  if (DeleteToDoListResult.resultCode === 0) {\n    dispatch(GetToDoListsThunk());\n  }\n};\nexport const ChangeToDoListTitleThunk = (ToDoListID, Newtitle) => async dispatch => {\n  const ChangeToDoListTitleResult = await API.ChangeToDoListTitle(ToDoListID, Newtitle);\n\n  if (ChangeToDoListTitleResult.resultCode === 0) {\n    dispatch(GetToDoListsThunk());\n  }\n};\nexport const GetToDoListTasksThunk = (ToDoListID, count, page) => async dispatch => {\n  dispatch(SetTaskIsFetching(true));\n  const ToDoListTasks = await API.GetToDoListTasks(ToDoListID, count, page);\n  dispatch(SetTaskIsFetching(false));\n\n  if (!ToDoListTasks.error) {\n    dispatch(SetToDoListTasks(ToDoListTasks.items));\n  }\n};\nexport const AddNewTaskThunk = (ToDoListID, TaskTitle) => async dispatch => {\n  const CreateNewTaskForToDoListResult = await API.CreateNewTaskForToDoList(ToDoListID, TaskTitle);\n\n  if (CreateNewTaskForToDoListResult.resultCode === 0) {\n    dispatch(GetToDoListTasksThunk(ToDoListID));\n  }\n};\nexport const DeleteTaskThunk = (ToDoListID, TaskId) => async dispatch => {\n  const DeleteTaskFromToDoListResult = await API.DeleteTaskFromToDoList(ToDoListID, TaskId);\n\n  if (DeleteTaskFromToDoListResult.resultCode === 0) {\n    dispatch(GetToDoListTasksThunk(ToDoListID)); //@ts-ignore\n  } else dispatch(stopSubmit(\"TaskEditorForm\", {\n    _error: DataResponse.data.messages[0]\n  }));\n};\nexport const UpdateTaskInformationThunk = (ToDoListID, TaskId, status) => async dispatch => {\n  const ChangeTaskInformationResult = await API.ChangeTaskInformation(ToDoListID, TaskId, status);\n\n  if (ChangeTaskInformationResult.resultCode === 0) {\n    dispatch(GetToDoListTasksThunk(ToDoListID));\n  }\n};\nexport default ToDoListsReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\ToDoListsReducer.ts"],"names":["API","stopSubmit","SET_TO_DO_LISTS","SET_TO_DO_LIST_TASKS_Page","SET_TO_DO_LISTS_TASKS_Count","SET_TO_DO_LIST_TASKS","IsFetching_Toggle","TaskIsFetching_Toggle","DefaultState","ToDoLists","ToDoListTasks","ToDoListTasksPage","ToDoListTasksCount","IsFetching","TaskIsFetching","ToDoListsReducer","state","action","type","NewToDoLists","NewToDoListTasksPage","NewToDoListTasksCount","Tasks","SetToDoLists","SetToDoListTasksPage","SetToDoListTasksCount","SetToDoListTasks","ToggleIsFetching","SetTaskIsFetching","GetToDoListsThunk","dispatch","GetToDoLists","AddNewToDoListsThunk","title","CreateNewToDoListResult","CreateNewToDoList","resultCode","DeleteToDoListThunk","ToDoListID","DeleteToDoListResult","DeleteToDoList","ChangeToDoListTitleThunk","Newtitle","ChangeToDoListTitleResult","ChangeToDoListTitle","GetToDoListTasksThunk","count","page","GetToDoListTasks","error","items","AddNewTaskThunk","TaskTitle","CreateNewTaskForToDoListResult","CreateNewTaskForToDoList","DeleteTaskThunk","TaskId","DeleteTaskFromToDoListResult","DeleteTaskFromToDoList","_error","DataResponse","data","messages","UpdateTaskInformationThunk","status","ChangeTaskInformationResult","ChangeTaskInformation"],"mappings":"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","sourcesContent":["import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {\r\n    ToDoListTaskStatusType, TTask,\r\n    TToDoList,\r\n    TToDoListTasks\r\n} from \"../components/GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GlobalState} from \"./redux-store\";\r\n\r\n\r\nconst SET_TO_DO_LISTS = 'ToDoLists/SET_TO_DO_LISTS';\r\nconst SET_TO_DO_LIST_TASKS_Page = 'ToDoLists/SET_TO_DO_LIST_TASKS_Page';\r\nconst SET_TO_DO_LISTS_TASKS_Count = 'ToDoLists/SET_TO_DO_LISTS_TASKS_Count';\r\nconst SET_TO_DO_LIST_TASKS = 'ToDoLists/SET_TO_DO_LIST_TASKS';\r\nconst IsFetching_Toggle = 'ToDoLists/IsFetching_Toggle';\r\nconst TaskIsFetching_Toggle = 'ToDoLists/TaskIsFetching_Toggle';\r\n\r\n\r\ntype SetToDoListsActionType = {\r\n    type: typeof SET_TO_DO_LISTS\r\n    NewToDoLists: Array<TToDoList>\r\n}\r\n\r\ntype SetToDoListTasksPageActionType = {\r\n    type: typeof SET_TO_DO_LIST_TASKS_Page\r\n    NewToDoListTasksPage: number\r\n}\r\ntype SetToDoListTasksCountActionType = {\r\n    type: typeof SET_TO_DO_LISTS_TASKS_Count\r\n    NewToDoListTasksCount: number\r\n}\r\n\r\ntype SetToDoListTasksActionType = {\r\n    type: typeof SET_TO_DO_LIST_TASKS\r\n    Tasks: Array<TTask>\r\n}\r\n\r\ntype IsFetchingType = {\r\n    type: typeof IsFetching_Toggle\r\n    IsFetching: boolean\r\n}\r\n\r\ntype TasksIsFetchingType = {\r\n    type: typeof TaskIsFetching_Toggle\r\n    TaskIsFetching: boolean\r\n}\r\n\r\n\r\nlet DefaultState = {\r\n    ToDoLists: [] as Array<TToDoList>,\r\n    ToDoListTasks: null as  Array<TTask> | null,\r\n    ToDoListTasksPage: 1,\r\n    ToDoListTasksCount: 10,\r\n    IsFetching: false,\r\n    TaskIsFetching: false\r\n}\r\n\r\ntype TToDoListsActions = SetToDoListsActionType | SetToDoListTasksPageActionType | SetToDoListTasksCountActionType\r\n    | SetToDoListTasksActionType | IsFetchingType | TasksIsFetchingType\r\n\r\ntype TToDoListsThunks = ThunkAction<Promise<void>, GlobalState, unknown, TToDoListsActions>\r\n\r\nexport  type  DefaultToDoListStateType = typeof DefaultState\r\n\r\nconst ToDoListsReducer = (state = DefaultState, action: TToDoListsActions): DefaultToDoListStateType => {\r\n    switch (action.type) {\r\n        case SET_TO_DO_LISTS: {\r\n            return {...state, ToDoLists: action.NewToDoLists}\r\n        }\r\n        case SET_TO_DO_LIST_TASKS_Page: {\r\n            return {...state, ToDoListTasksPage: action.NewToDoListTasksPage}\r\n        }\r\n        case SET_TO_DO_LISTS_TASKS_Count: {\r\n            return {...state, ToDoListTasksCount: action.NewToDoListTasksCount}\r\n        }\r\n        case SET_TO_DO_LIST_TASKS: {\r\n            return {...state, ToDoListTasks: action.Tasks}\r\n        }\r\n\r\n        /*case SET_TO_DO_LIST_TASKS: {\r\n            let NewTask = {\r\n                ListId: action.ListID,\r\n                TaskData: action.Tasks,\r\n\r\n            };\r\n\r\n          if(state.ToDoListTasks.every(el=>el.ListId !== action.ListID)) {\r\n                return {\r\n                    ...state,\r\n                    ToDoListTasks: [...state.ToDoListTasks, NewTask]\r\n                }\r\n            }\r\n          else return {\r\n              ...state,\r\n              ToDoListTasks: [...state.ToDoListTasks.filter(item=>{return item.ListId === action.ListID}).TaskData, action.Tasks]\r\n              }\r\n        }*/\r\n\r\n        case IsFetching_Toggle: {\r\n            return {...state, IsFetching: action.IsFetching}\r\n        }\r\n        case TaskIsFetching_Toggle: {\r\n            return {...state, TaskIsFetching: action.TaskIsFetching}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const SetToDoLists = (NewToDoLists: Array<TToDoList>): SetToDoListsActionType => {\r\n    return {type: SET_TO_DO_LISTS, NewToDoLists}\r\n}\r\nexport const SetToDoListTasksPage = (NewToDoListTasksPage: number): SetToDoListTasksPageActionType => {\r\n    return {type: SET_TO_DO_LIST_TASKS_Page, NewToDoListTasksPage}\r\n}\r\nexport const SetToDoListTasksCount = (NewToDoListTasksCount: number): SetToDoListTasksCountActionType => {\r\n    return {type: SET_TO_DO_LISTS_TASKS_Count, NewToDoListTasksCount}\r\n}\r\nexport const SetToDoListTasks = (Tasks: Array<TTask>): SetToDoListTasksActionType => {\r\n    return {type: SET_TO_DO_LIST_TASKS, Tasks}\r\n}\r\nexport const ToggleIsFetching = (IsFetching: boolean): IsFetchingType => {\r\n    return {type: IsFetching_Toggle, IsFetching}\r\n}\r\nexport const SetTaskIsFetching = (TaskIsFetching: boolean): TasksIsFetchingType => {\r\n    return {type: TaskIsFetching_Toggle, TaskIsFetching}\r\n}\r\n\r\n\r\nexport const GetToDoListsThunk = (): TToDoListsThunks => async (dispatch) => {\r\n    dispatch(ToggleIsFetching(true))\r\n    const ToDoLists = await API.GetToDoLists()\r\n    dispatch(SetToDoLists(ToDoLists))\r\n    dispatch(ToggleIsFetching(false))\r\n}\r\n\r\nexport const AddNewToDoListsThunk = (title: string): TToDoListsThunks => async (dispatch) => {\r\n    const CreateNewToDoListResult = await API.CreateNewToDoList(title)\r\n    if(CreateNewToDoListResult.resultCode === 0)\r\n    {\r\n        dispatch(GetToDoListsThunk())\r\n    }\r\n}\r\n\r\nexport const DeleteToDoListThunk = (ToDoListID: string): TToDoListsThunks => async (dispatch) => {\r\n    const DeleteToDoListResult = await API.DeleteToDoList(ToDoListID)\r\n    if(DeleteToDoListResult.resultCode === 0)\r\n    {\r\n        dispatch(GetToDoListsThunk())\r\n    }\r\n}\r\n\r\nexport const ChangeToDoListTitleThunk = (ToDoListID: string, Newtitle: string): TToDoListsThunks => async (dispatch) => {\r\n    const ChangeToDoListTitleResult  =  await API.ChangeToDoListTitle(ToDoListID, Newtitle)\r\n    if(ChangeToDoListTitleResult.resultCode === 0)\r\n    {\r\n        dispatch(GetToDoListsThunk())\r\n    }\r\n}\r\n\r\nexport const GetToDoListTasksThunk = (ToDoListID: string, count?: number, page?: number): TToDoListsThunks => async (dispatch) => {\r\n    dispatch(SetTaskIsFetching(true))\r\n    const ToDoListTasks = await API.GetToDoListTasks(ToDoListID, count, page)\r\n    dispatch(SetTaskIsFetching(false))\r\n    if (!ToDoListTasks.error) {\r\n        dispatch(SetToDoListTasks(ToDoListTasks.items))\r\n    }\r\n}\r\n\r\nexport const AddNewTaskThunk = (ToDoListID: string, TaskTitle: string): TToDoListsThunks => async (dispatch) => {\r\n    const CreateNewTaskForToDoListResult = await API.CreateNewTaskForToDoList(ToDoListID, TaskTitle)\r\n    if (CreateNewTaskForToDoListResult.resultCode === 0) {\r\n        dispatch(GetToDoListTasksThunk(ToDoListID))\r\n    }\r\n}\r\n\r\nexport const DeleteTaskThunk = (ToDoListID: string, TaskId: string): TToDoListsThunks => async (dispatch) => {\r\n    const DeleteTaskFromToDoListResult = await API.DeleteTaskFromToDoList(ToDoListID, TaskId)\r\n    if (DeleteTaskFromToDoListResult.resultCode === 0) {\r\n        dispatch(GetToDoListTasksThunk(ToDoListID))\r\n        //@ts-ignore\r\n    } else dispatch(stopSubmit(\"TaskEditorForm\", {_error: DataResponse.data.messages[0]}))\r\n}\r\n\r\nexport const UpdateTaskInformationThunk = (ToDoListID: string, TaskId: string, status: ToDoListTaskStatusType): TToDoListsThunks => async (dispatch) => {\r\n    const ChangeTaskInformationResult = await API.ChangeTaskInformation(ToDoListID, TaskId, status)\r\n    if (ChangeTaskInformationResult.resultCode === 0) {\r\n        dispatch(GetToDoListTasksThunk(ToDoListID))\r\n    }\r\n}\r\n\r\nexport default ToDoListsReducer"]},"metadata":{},"sourceType":"module"}