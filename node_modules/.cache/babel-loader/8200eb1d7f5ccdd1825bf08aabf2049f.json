{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { API } from \"../API/requests\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_TO_DO_LISTS = 'ToDoLists/SET_TO_DO_LISTS';\nconst SET_TO_DO_LIST_TASKS_Page = 'ToDoLists/SET_TO_DO_LIST_TASKS_Page';\nconst SET_TO_DO_LISTS_TASKS_Count = 'ToDoLists/SET_TO_DO_LISTS_TASKS_Count';\nconst SET_TO_DO_LIST_TASKS = 'ToDoLists/SET_TO_DO_LIST_TASKS';\nconst IsFetching_Toggle = 'ToDoLists/IsFetching_Toggle';\nconst TaskIsFetching_Toggle = 'ToDoLists/TaskIsFetching_Toggle';\nlet DefaultState = {\n  ToDoLists: [],\n  ToDoListTasks: null,\n  ToDoListTasksPage: 1,\n  ToDoListTasksCount: 10,\n  IsFetching: false,\n  TaskIsFetching: false\n};\n\nconst ToDoListsReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case SET_TO_DO_LISTS:\n      {\n        return _objectSpread({}, state, {\n          ToDoLists: action.NewToDoLists\n        });\n      }\n\n    case SET_TO_DO_LIST_TASKS_Page:\n      {\n        return _objectSpread({}, state, {\n          ToDoListTasksPage: action.NewToDoListTasksPage\n        });\n      }\n\n    case SET_TO_DO_LISTS_TASKS_Count:\n      {\n        return _objectSpread({}, state, {\n          ToDoListTasksCount: action.NewToDoListTasksCount\n        });\n      }\n\n    case SET_TO_DO_LIST_TASKS:\n      {\n        return _objectSpread({}, state, {\n          ToDoListTasks: action.Tasks\n        });\n      }\n\n    /*case SET_TO_DO_LIST_TASKS: {\r\n        let NewTask = {\r\n            ListId: action.ListID,\r\n            TaskData: action.Tasks,\r\n          };\r\n        if(state.ToDoListTasks.every(el=>el.ListId !== action.ListID)) {\r\n            return {\r\n                ...state,\r\n                ToDoListTasks: [...state.ToDoListTasks, NewTask]\r\n            }\r\n        }\r\n      else return {\r\n          ...state,\r\n          ToDoListTasks: [...state.ToDoListTasks.filter(item=>{return item.ListId === action.ListID}).TaskData, action.Tasks]\r\n          }\r\n    }*/\n\n    case IsFetching_Toggle:\n      {\n        return _objectSpread({}, state, {\n          IsFetching: action.IsFetching\n        });\n      }\n\n    case TaskIsFetching_Toggle:\n      {\n        return _objectSpread({}, state, {\n          TaskIsFetching: action.TaskIsFetching\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const SetToDoLists = NewToDoLists => {\n  return {\n    type: SET_TO_DO_LISTS,\n    NewToDoLists\n  };\n};\nexport const SetToDoListTasksPage = NewToDoListTasksPage => {\n  return {\n    type: SET_TO_DO_LIST_TASKS_Page,\n    NewToDoListTasksPage\n  };\n};\nexport const SetToDoListTasksCount = NewToDoListTasksCount => {\n  return {\n    type: SET_TO_DO_LISTS_TASKS_Count,\n    NewToDoListTasksCount\n  };\n};\nexport const SetToDoListTasks = Tasks => {\n  return {\n    type: SET_TO_DO_LIST_TASKS,\n    Tasks\n  };\n};\nexport const ToggleIsFetching = IsFetching => {\n  return {\n    type: IsFetching_Toggle,\n    IsFetching\n  };\n};\nexport const SetTaskIsFetching = TaskIsFetching => {\n  return {\n    type: TaskIsFetching_Toggle,\n    TaskIsFetching\n  };\n};\nexport const GetToDoListsThunk = () => async dispatch => {\n  dispatch(ToggleIsFetching(true));\n  const ResponseData = await API.GetToDoLists();\n  dispatch(SetToDoLists(ResponseData.data));\n  dispatch(ToggleIsFetching(false));\n};\nexport const AddNewToDoListsThunk = title => async dispatch => {\n  await API.CreateNewToDoList(title);\n  dispatch(GetToDoListsThunk());\n};\nexport const DeleteToDoListThunk = ToDoListID => async dispatch => {\n  await API.DeleteToDoList(ToDoListID);\n  dispatch(GetToDoListsThunk());\n};\nexport const ChangeToDoListTitleThunk = (ToDoListID, Newtitle) => async dispatch => {\n  await API.ChangeToDoListTitle(ToDoListID, Newtitle);\n  dispatch(GetToDoListsThunk());\n};\nexport const GetToDoListTasksThunk = (ToDoListID, count, page) => async dispatch => {\n  dispatch(SetTaskIsFetching(true));\n  const DataResponse = await API.GetToDoListTasks(ToDoListID, count, page);\n  dispatch(SetTaskIsFetching(false));\n\n  if (!DataResponse.data.error) {\n    dispatch(SetToDoListTasks(DataResponse.data));\n  }\n};\nexport const AddNewTaskThunk = (ToDoListID, TaskTitle) => async dispatch => {\n  const DataResponse = await API.CreateNewTakForToDoList(ToDoListID, TaskTitle);\n\n  if (DataResponse.data.resultCode === 0) {\n    dispatch(GetToDoListTasksThunk(ToDoListID));\n  }\n};\nexport const DeleteTaskThunk = (ToDoListID, TaskId) => async dispatch => {\n  const DataResponse = await API.DeleteTaskFromToDoList(ToDoListID, TaskId);\n\n  if (DataResponse.data.resultCode === 0) {\n    dispatch(GetToDoListTasksThunk(ToDoListID));\n  } else dispatch(stopSubmit(\"TaskEditorForm\", {\n    _error: DataResponse.data.messages[0]\n  }));\n};\nexport const UpdateTaskInformationThunk = (ToDoListID, TaskId, status) => async dispatch => {\n  debugger;\n  const DataResponse = await API.ChangeTaskInformation(ToDoListID, TaskId, status);\n\n  if (DataResponse.data.resultCode === 0) {\n    dispatch(GetToDoListTasksThunk(ToDoListID));\n  }\n};\nexport default ToDoListsReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\ToDoListsReducer.ts"],"names":["API","stopSubmit","SET_TO_DO_LISTS","SET_TO_DO_LIST_TASKS_Page","SET_TO_DO_LISTS_TASKS_Count","SET_TO_DO_LIST_TASKS","IsFetching_Toggle","TaskIsFetching_Toggle","DefaultState","ToDoLists","ToDoListTasks","ToDoListTasksPage","ToDoListTasksCount","IsFetching","TaskIsFetching","ToDoListsReducer","state","action","type","NewToDoLists","NewToDoListTasksPage","NewToDoListTasksCount","Tasks","SetToDoLists","SetToDoListTasksPage","SetToDoListTasksCount","SetToDoListTasks","ToggleIsFetching","SetTaskIsFetching","GetToDoListsThunk","dispatch","ResponseData","GetToDoLists","data","AddNewToDoListsThunk","title","CreateNewToDoList","DeleteToDoListThunk","ToDoListID","DeleteToDoList","ChangeToDoListTitleThunk","Newtitle","ChangeToDoListTitle","GetToDoListTasksThunk","count","page","DataResponse","GetToDoListTasks","error","AddNewTaskThunk","TaskTitle","CreateNewTakForToDoList","resultCode","DeleteTaskThunk","TaskId","DeleteTaskFromToDoList","_error","messages","UpdateTaskInformationThunk","status","ChangeTaskInformation"],"mappings":";AAAA,SAAQA,GAAR,QAAkB,iBAAlB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAIA,MAAMC,eAAe,GAAG,2BAAxB;AACA,MAAMC,yBAAyB,GAAG,qCAAlC;AACA,MAAMC,2BAA2B,GAAG,uCAApC;AACA,MAAMC,oBAAoB,GAAG,gCAA7B;AACA,MAAMC,iBAAiB,GAAG,6BAA1B;AACA,MAAMC,qBAAqB,GAAG,iCAA9B;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,SAAS,EAAE,EADI;AAEfC,EAAAA,aAAa,EAAG,IAFD;AAGfC,EAAAA,iBAAiB,EAAE,CAHJ;AAIfC,EAAAA,kBAAkB,EAAE,EAJL;AAKfC,EAAAA,UAAU,EAAG,KALE;AAMfC,EAAAA,cAAc,EAAG;AANF,CAAnB;;AAgDA,MAAMC,gBAAgB,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAmE;AACxF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKhB,eAAL;AAAsB;AAClB,iCAAWc,KAAX;AAAkBP,UAAAA,SAAS,EAAEQ,MAAM,CAACE;AAApC;AACH;;AACD,SAAKhB,yBAAL;AAAgC;AAC5B,iCAAWa,KAAX;AAAkBL,UAAAA,iBAAiB,EAAEM,MAAM,CAACG;AAA5C;AACH;;AACD,SAAKhB,2BAAL;AAAkC;AAC9B,iCAAWY,KAAX;AAAkBJ,UAAAA,kBAAkB,EAAEK,MAAM,CAACI;AAA7C;AACH;;AACF,SAAKhB,oBAAL;AAA2B;AACtB,iCAAWW,KAAX;AAAkBN,UAAAA,aAAa,EAAEO,MAAM,CAACK;AAAxC;AACH;;AAED;;;;;;;;;;;;;;;;;AAmBA,SAAKhB,iBAAL;AAAuB;AACnB,iCAAWU,KAAX;AAAkBH,UAAAA,UAAU,EAAEI,MAAM,CAACJ;AAArC;AACH;;AACD,SAAKN,qBAAL;AAA2B;AACvB,iCAAWS,KAAX;AAAkBF,UAAAA,cAAc,EAAEG,MAAM,CAACH;AAAzC;AACH;;AACD;AACI,aAAOE,KAAP;AAxCR;AA0CH,CA3CD;;AA8CA,OAAO,MAAMO,YAAY,GAAIJ,YAAD,IAA8D;AACtF,SAAO;AAACD,IAAAA,IAAI,EAAEhB,eAAP;AAAwBiB,IAAAA;AAAxB,GAAP;AACH,CAFM;AAGP,OAAO,MAAMK,oBAAoB,GAAIJ,oBAAD,IAAoE;AACpG,SAAO;AAACF,IAAAA,IAAI,EAAEf,yBAAP;AAAkCiB,IAAAA;AAAlC,GAAP;AACH,CAFM;AAGP,OAAO,MAAMK,qBAAqB,GAAIJ,qBAAD,IAAsE;AACvG,SAAO;AAACH,IAAAA,IAAI,EAAEd,2BAAP;AAAoCiB,IAAAA;AAApC,GAAP;AACH,CAFM;AAGP,OAAO,MAAMK,gBAAgB,GAAIJ,KAAD,IAAyD;AACrF,SAAO;AAACJ,IAAAA,IAAI,EAAEb,oBAAP;AAA6BiB,IAAAA;AAA7B,GAAP;AACH,CAFM;AAGP,OAAO,MAAMK,gBAAgB,GAAId,UAAD,IAA2C;AACvE,SAAO;AAACK,IAAAA,IAAI,EAAGZ,iBAAR;AAA2BO,IAAAA;AAA3B,GAAP;AACH,CAFM;AAGP,OAAO,MAAMe,iBAAiB,GAAId,cAAD,IAAoD;AACjF,SAAO;AAACI,IAAAA,IAAI,EAAGX,qBAAR;AAA+BO,IAAAA;AAA/B,GAAP;AACH,CAFM;AAMP,OAAO,MAAMe,iBAAiB,GAAG,MAAM,MAAOC,QAAP,IAA0B;AAC7DA,EAAAA,QAAQ,CAACH,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACA,QAAMI,YAAY,GAAG,MAAM/B,GAAG,CAACgC,YAAJ,EAA3B;AACAF,EAAAA,QAAQ,CAACP,YAAY,CAACQ,YAAY,CAACE,IAAd,CAAb,CAAR;AACAH,EAAAA,QAAQ,CAACH,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACH,CALM;AAOP,OAAO,MAAMO,oBAAoB,GAAIC,KAAD,IAAoB,MAAOL,QAAP,IAA0B;AACjF,QAAM9B,GAAG,CAACoC,iBAAJ,CAAsBD,KAAtB,CAAN;AACOL,EAAAA,QAAQ,CAACD,iBAAiB,EAAlB,CAAR;AACP,CAHM;AAKP,OAAO,MAAMQ,mBAAmB,GAAIC,UAAD,IAAyB,MAAOR,QAAP,IAA0B;AAClF,QAAM9B,GAAG,CAACuC,cAAJ,CAAmBD,UAAnB,CAAN;AACAR,EAAAA,QAAQ,CAACD,iBAAiB,EAAlB,CAAR;AACH,CAHM;AAKP,OAAO,MAAMW,wBAAwB,GAAG,CAACF,UAAD,EAAsBG,QAAtB,KAA4C,MAAOX,QAAP,IAA0B;AAC1G,QAAM9B,GAAG,CAAC0C,mBAAJ,CAAwBJ,UAAxB,EAAoCG,QAApC,CAAN;AACIX,EAAAA,QAAQ,CAACD,iBAAiB,EAAlB,CAAR;AACP,CAHM;AAKP,OAAO,MAAMc,qBAAqB,GAAG,CAACL,UAAD,EAAsBM,KAAtB,EAAsCC,IAAtC,KAAyD,MAAOf,QAAP,IAA0B;AACpHA,EAAAA,QAAQ,CAACF,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACD,QAAMkB,YAAY,GAAG,MAAM9C,GAAG,CAAC+C,gBAAJ,CAAqBT,UAArB,EAAiCM,KAAjC,EAAwCC,IAAxC,CAA3B;AACCf,EAAAA,QAAQ,CAACF,iBAAiB,CAAC,KAAD,CAAlB,CAAR;;AACA,MAAG,CAACkB,YAAY,CAACb,IAAb,CAAkBe,KAAtB,EAA6B;AACzBlB,IAAAA,QAAQ,CAACJ,gBAAgB,CAACoB,YAAY,CAACb,IAAd,CAAjB,CAAR;AACH;AAEJ,CARM;AAUP,OAAO,MAAMgB,eAAe,GAAG,CAACX,UAAD,EAAsBY,SAAtB,KAA6C,MAAOpB,QAAP,IAAyB;AACnG,QAAMgB,YAAY,GAAG,MAAM9C,GAAG,CAACmD,uBAAJ,CAA4Bb,UAA5B,EAAwCY,SAAxC,CAA3B;;AACE,MAAGJ,YAAY,CAACb,IAAb,CAAkBmB,UAAlB,KAAiC,CAApC,EAAuC;AACnCtB,IAAAA,QAAQ,CAACa,qBAAqB,CAACL,UAAD,CAAtB,CAAR;AACH;AACJ,CALM;AAMP,OAAO,MAAMe,eAAe,GAAG,CAACf,UAAD,EAAqBgB,MAArB,KAAyC,MAAOxB,QAAP,IAA0B;AAC9F,QAAMgB,YAAY,GAAG,MAAM9C,GAAG,CAACuD,sBAAJ,CAA2BjB,UAA3B,EAAsCgB,MAAtC,CAA3B;;AACA,MAAGR,YAAY,CAACb,IAAb,CAAkBmB,UAAlB,KAAiC,CAApC,EAAuC;AACnCtB,IAAAA,QAAQ,CAACa,qBAAqB,CAACL,UAAD,CAAtB,CAAR;AACH,GAFD,MAEQR,QAAQ,CAAC7B,UAAU,CAAC,gBAAD,EAAmB;AAACuD,IAAAA,MAAM,EAAEV,YAAY,CAACb,IAAb,CAAkBwB,QAAlB,CAA2B,CAA3B;AAAT,GAAnB,CAAX,CAAR;AACX,CALM;AAMP,OAAO,MAAMC,0BAA0B,GAAG,CAACpB,UAAD,EAAoBgB,MAApB,EAAoCK,MAApC,KAAwE,MAAO7B,QAAP,IAA0B;AACxI;AACA,QAAMgB,YAAY,GAAG,MAAM9C,GAAG,CAAC4D,qBAAJ,CAA0BtB,UAA1B,EAAqCgB,MAArC,EAA4CK,MAA5C,CAA3B;;AACA,MAAGb,YAAY,CAACb,IAAb,CAAkBmB,UAAlB,KAAiC,CAApC,EAAuC;AACnCtB,IAAAA,QAAQ,CAACa,qBAAqB,CAACL,UAAD,CAAtB,CAAR;AACH;AACJ,CANM;AAUP,eAAevB,gBAAf","sourcesContent":["import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {TToDoList, TToDoListTasks} from \"../components/GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\nconst SET_TO_DO_LISTS = 'ToDoLists/SET_TO_DO_LISTS';\r\nconst SET_TO_DO_LIST_TASKS_Page = 'ToDoLists/SET_TO_DO_LIST_TASKS_Page';\r\nconst SET_TO_DO_LISTS_TASKS_Count = 'ToDoLists/SET_TO_DO_LISTS_TASKS_Count';\r\nconst SET_TO_DO_LIST_TASKS = 'ToDoLists/SET_TO_DO_LIST_TASKS';\r\nconst IsFetching_Toggle = 'ToDoLists/IsFetching_Toggle';\r\nconst TaskIsFetching_Toggle = 'ToDoLists/TaskIsFetching_Toggle';\r\n\r\n\r\nlet DefaultState = {\r\n    ToDoLists: [] as Array<TToDoList>,\r\n    ToDoListTasks : null as TToDoListTasks | null,\r\n    ToDoListTasksPage: 1 ,\r\n    ToDoListTasksCount: 10 ,\r\n    IsFetching : false,\r\n    TaskIsFetching : false\r\n}\r\n\r\ntype SetToDoListsActionType = {\r\n    type : typeof SET_TO_DO_LISTS\r\n    NewToDoLists : Array<TToDoList>\r\n}\r\n\r\ntype SetToDoListTasksPageActionType = {\r\n    type : typeof SET_TO_DO_LIST_TASKS_Page\r\n    NewToDoListTasksPage : number\r\n}\r\ntype SetToDoListTasksCountActionType = {\r\n    type : typeof SET_TO_DO_LISTS_TASKS_Count\r\n    NewToDoListTasksCount : number\r\n}\r\n\r\ntype SetToDoListTasksActionType ={\r\n    type : typeof SET_TO_DO_LIST_TASKS\r\n    Tasks : TToDoListTasks\r\n}\r\n\r\ntype IsFetchingType = {\r\n    type : typeof IsFetching_Toggle\r\n    IsFetching : boolean\r\n}\r\n\r\ntype TasksIsFetchingType = {\r\n    type : typeof TaskIsFetching_Toggle\r\n    TaskIsFetching : boolean\r\n}\r\ntype ToDoListTaskStatusType = {\r\n    title : string\r\n    description : string\r\n    completed : boolean\r\n    status : number\r\n    priority : number\r\n    startDate : string\r\n    deadline : string\r\n}\r\nexport  type  DefaultToDoListStateType = typeof  DefaultState\r\n\r\nconst ToDoListsReducer = (state = DefaultState, action : any) : DefaultToDoListStateType => {\r\n    switch (action.type) {\r\n        case SET_TO_DO_LISTS: {\r\n            return {...state, ToDoLists: action.NewToDoLists}\r\n        }\r\n        case SET_TO_DO_LIST_TASKS_Page: {\r\n            return {...state, ToDoListTasksPage: action.NewToDoListTasksPage}\r\n        }\r\n        case SET_TO_DO_LISTS_TASKS_Count: {\r\n            return {...state, ToDoListTasksCount: action.NewToDoListTasksCount}\r\n        }\r\n       case SET_TO_DO_LIST_TASKS: {\r\n            return {...state, ToDoListTasks: action.Tasks}\r\n        }\r\n\r\n        /*case SET_TO_DO_LIST_TASKS: {\r\n            let NewTask = {\r\n                ListId: action.ListID,\r\n                TaskData: action.Tasks,\r\n\r\n            };\r\n\r\n          if(state.ToDoListTasks.every(el=>el.ListId !== action.ListID)) {\r\n                return {\r\n                    ...state,\r\n                    ToDoListTasks: [...state.ToDoListTasks, NewTask]\r\n                }\r\n            }\r\n          else return {\r\n              ...state,\r\n              ToDoListTasks: [...state.ToDoListTasks.filter(item=>{return item.ListId === action.ListID}).TaskData, action.Tasks]\r\n              }\r\n        }*/\r\n\r\n        case IsFetching_Toggle:{\r\n            return {...state, IsFetching: action.IsFetching}\r\n        }\r\n        case TaskIsFetching_Toggle:{\r\n            return {...state, TaskIsFetching: action.TaskIsFetching}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const SetToDoLists = (NewToDoLists : Array<TToDoList>) : SetToDoListsActionType => {\r\n    return {type: SET_TO_DO_LISTS, NewToDoLists}\r\n}\r\nexport const SetToDoListTasksPage = (NewToDoListTasksPage : number) : SetToDoListTasksPageActionType => {\r\n    return {type: SET_TO_DO_LIST_TASKS_Page, NewToDoListTasksPage}\r\n}\r\nexport const SetToDoListTasksCount = (NewToDoListTasksCount : number) : SetToDoListTasksCountActionType => {\r\n    return {type: SET_TO_DO_LISTS_TASKS_Count, NewToDoListTasksCount}\r\n}\r\nexport const SetToDoListTasks = (Tasks : TToDoListTasks) : SetToDoListTasksActionType => {\r\n    return {type: SET_TO_DO_LIST_TASKS, Tasks}\r\n}\r\nexport const ToggleIsFetching = (IsFetching : boolean)  : IsFetchingType=> {\r\n    return {type : IsFetching_Toggle, IsFetching}\r\n}\r\nexport const SetTaskIsFetching = (TaskIsFetching : boolean) : TasksIsFetchingType => {\r\n    return {type : TaskIsFetching_Toggle, TaskIsFetching}\r\n}\r\n\r\n\r\n\r\nexport const GetToDoListsThunk = () => async (dispatch : any) => {\r\n    dispatch(ToggleIsFetching(true))\r\n    const ResponseData = await API.GetToDoLists()\r\n    dispatch(SetToDoLists(ResponseData.data))\r\n    dispatch(ToggleIsFetching(false))\r\n}\r\n\r\nexport const AddNewToDoListsThunk = (title : string) => async (dispatch : any) => {\r\n await API.CreateNewToDoList(title)\r\n        dispatch(GetToDoListsThunk())\r\n}\r\n\r\nexport const DeleteToDoListThunk = (ToDoListID : string) => async (dispatch : any) => {\r\n    await API.DeleteToDoList(ToDoListID)\r\n    dispatch(GetToDoListsThunk())\r\n}\r\n\r\nexport const ChangeToDoListTitleThunk = (ToDoListID : string, Newtitle : string) => async (dispatch : any) => {\r\n    await API.ChangeToDoListTitle(ToDoListID, Newtitle)\r\n        dispatch(GetToDoListsThunk())\r\n}\r\n\r\nexport const GetToDoListTasksThunk = (ToDoListID : string, count? : number,page? : number) => async (dispatch : any) => {\r\n    dispatch(SetTaskIsFetching(true))\r\n   const DataResponse = await API.GetToDoListTasks(ToDoListID, count, page)\r\n    dispatch(SetTaskIsFetching(false))\r\n    if(!DataResponse.data.error) {\r\n        dispatch(SetToDoListTasks(DataResponse.data))\r\n    }\r\n\r\n}\r\n\r\nexport const AddNewTaskThunk = (ToDoListID : string, TaskTitle : string) => async (dispatch: any) => {\r\n  const DataResponse = await API.CreateNewTakForToDoList(ToDoListID, TaskTitle)\r\n    if(DataResponse.data.resultCode === 0) {\r\n        dispatch(GetToDoListTasksThunk(ToDoListID))\r\n    }\r\n}\r\nexport const DeleteTaskThunk = (ToDoListID : string,TaskId : string) => async (dispatch : any) => {\r\n    const DataResponse = await API.DeleteTaskFromToDoList(ToDoListID,TaskId)\r\n    if(DataResponse.data.resultCode === 0) {\r\n        dispatch(GetToDoListTasksThunk(ToDoListID))\r\n    } else  dispatch(stopSubmit(\"TaskEditorForm\", {_error: DataResponse.data.messages[0]}))\r\n}\r\nexport const UpdateTaskInformationThunk = (ToDoListID: string,TaskId : string,status : ToDoListTaskStatusType) => async (dispatch : any) => {\r\n    debugger\r\n    const DataResponse = await API.ChangeTaskInformation(ToDoListID,TaskId,status)\r\n    if(DataResponse.data.resultCode === 0) {\r\n        dispatch(GetToDoListTasksThunk(ToDoListID))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ToDoListsReducer"]},"metadata":{},"sourceType":"module"}