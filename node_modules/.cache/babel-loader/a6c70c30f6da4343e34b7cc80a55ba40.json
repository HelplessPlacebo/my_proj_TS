{"ast":null,"code":"var _jsxFileName = \"H:\\\\js_projects\\\\1\\\\my-app\\\\src\\\\components\\\\Users\\\\UsersContainer.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { OnFollow, setUsers, onUnFollow, SetCurrentPage, SetTotalCountOfUsers, ToggleIsFetching } from \"../../data/UsersReduser\";\nimport PurifyUsers from \"./Users\";\nimport Preloader from \"../assetss/common/Loader/Loader\";\nimport { getUsers } from \"../../API/requests\";\nimport * as axios from \"axios\";\n\nclass UsersAPItoServer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.OnChangedPage = pageNumber => {\n      this.props.SetCurrentPage(pageNumber);\n      this.props.ToggleIsFetching(true);\n      axios.get(\"https://social-network.samuraijs.com/api/1.0/users?page= \".concat(currentPage, \"\\n    &count=\").concat(pageSize), {\n        withCredentials: true\n      }).then(response => {\n        this.props.ToggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  /* this component using for make requests on server for a new users and drawing\r\n  Ui component (Users)*/\n  componentDidMount() {\n    // это что-то типо конструктора, принято все вещи, которые нарушают идею чистых функцию писать тут\n    this.props.ToggleIsFetching(true);\n    getUsers(this.props.currentPage, this.props.pageSize).then(data => {\n      this.props.ToggleIsFetching(false);\n      this.props.setUsers(data.items);\n      this.props.SetTotalCountOfUsers(data.totalCount);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.props.IsFetching ? React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }) : null, React.createElement(PurifyUsers, {\n      Users: this.props.Users,\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      OnChangedPage: this.OnChangedPage,\n      onFollow: this.props.OnFollow,\n      onUnFollow: this.props.onUnFollow,\n      currentPage: this.props.currentPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }));\n  }\n\n}\n\nlet StateToProps = state => {\n  return {\n    Users: state.UsersData.Users,\n    pageSize: state.UsersData.pageSize,\n    totalUsersCount: state.UsersData.totalUsersCount,\n    currentPage: state.UsersData.currentPage,\n    IsFetching: state.UsersData.IsFetching\n  };\n};\n/*let DispatchToProps = (dispatch) => {\r\n    return {\r\n        onFollow: (userID) => {\r\n\r\n            dispatch(follow_AC(userID))\r\n        },\r\n        onUnFollow: (userID) => {\r\n\r\n            dispatch(unfollow_AC(userID))\r\n        },\r\n        setUsers: (Users) => {\r\n            dispatch(setUsers_AC(Users))\r\n        },\r\n        SetCurrentPage: (NumberOfPage) => {\r\n            dispatch(setCurrentPage_AC(NumberOfPage))\r\n        },\r\n        SetTotalCountOfUsers: (totalCount) => {\r\n            dispatch(SetTotalCountOfUsers_AC(totalCount))\r\n        },\r\n        ToggleIsFetching: (IsFetching) => {\r\n            dispatch(IsFetchingToggle_AC(IsFetching))\r\n        }\r\n    }\r\n}*/\n\n\nconst UsersContainer = connect(StateToProps, {\n  OnFollow,\n  onUnFollow,\n  setUsers,\n  SetCurrentPage,\n  SetTotalCountOfUsers,\n  ToggleIsFetching\n})(UsersAPItoServer);\nexport default UsersContainer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\components\\Users\\UsersContainer.jsx"],"names":["React","connect","OnFollow","setUsers","onUnFollow","SetCurrentPage","SetTotalCountOfUsers","ToggleIsFetching","PurifyUsers","Preloader","getUsers","axios","UsersAPItoServer","Component","OnChangedPage","pageNumber","props","get","currentPage","pageSize","withCredentials","then","response","data","items","componentDidMount","totalCount","render","IsFetching","Users","totalUsersCount","StateToProps","state","UsersData","UsersContainer"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    OnFollow,\r\n    setUsers,\r\n    onUnFollow,\r\n    SetCurrentPage,\r\n    SetTotalCountOfUsers,\r\n    ToggleIsFetching\r\n} from \"../../data/UsersReduser\";\r\nimport PurifyUsers from \"./Users\";\r\nimport Preloader from \"../assetss/common/Loader/Loader\";\r\nimport {getUsers} from \"../../API/requests\"\r\nimport * as axios from \"axios\";\r\n\r\nclass UsersAPItoServer extends React.Component {\r\n    /* this component using for make requests on server for a new users and drawing\r\nUi component (Users)*/\r\n\r\n    componentDidMount() {\r\n        // это что-то типо конструктора, принято все вещи, которые нарушают идею чистых функцию писать тут\r\n        this.props.ToggleIsFetching(true)\r\n        getUsers(this.props.currentPage,this.props.pageSize).then(data => {\r\n                this.props.ToggleIsFetching(false)\r\n                this.props.setUsers(data.items)\r\n                this.props.SetTotalCountOfUsers(data.totalCount)\r\n            })\r\n    }\r\n\r\n    OnChangedPage = (pageNumber) => {\r\n        this.props.SetCurrentPage(pageNumber)\r\n        this.props.ToggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page= ${currentPage}\r\n    &count=${pageSize}`,{\r\n            withCredentials : true\r\n        })\r\n            .then(response => {\r\n                \r\n                this.props.ToggleIsFetching(false)\r\n                this.props.setUsers(response.data.items)\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.IsFetching ? <Preloader/> :null}\r\n        <PurifyUsers Users={this.props.Users}\r\n                            totalUsersCount={this.props.totalUsersCount}\r\n                            pageSize={this.props.pageSize}\r\n                            OnChangedPage={this.OnChangedPage}\r\n                            onFollow={this.props.OnFollow}\r\n                            onUnFollow={this.props.onUnFollow}\r\n                            currentPage={this.props.currentPage}/>\r\n                            </>\r\n    }\r\n}\r\n\r\nlet StateToProps = (state) => {\r\n    return {\r\n        Users: state.UsersData.Users,\r\n        pageSize: state.UsersData.pageSize,\r\n        totalUsersCount: state.UsersData.totalUsersCount,\r\n        currentPage: state.UsersData.currentPage,\r\n        IsFetching : state.UsersData.IsFetching\r\n    }\r\n}\r\n\r\n/*let DispatchToProps = (dispatch) => {\r\n    return {\r\n        onFollow: (userID) => {\r\n\r\n            dispatch(follow_AC(userID))\r\n        },\r\n        onUnFollow: (userID) => {\r\n\r\n            dispatch(unfollow_AC(userID))\r\n        },\r\n        setUsers: (Users) => {\r\n            dispatch(setUsers_AC(Users))\r\n        },\r\n        SetCurrentPage: (NumberOfPage) => {\r\n            dispatch(setCurrentPage_AC(NumberOfPage))\r\n        },\r\n        SetTotalCountOfUsers: (totalCount) => {\r\n            dispatch(SetTotalCountOfUsers_AC(totalCount))\r\n        },\r\n        ToggleIsFetching: (IsFetching) => {\r\n            dispatch(IsFetchingToggle_AC(IsFetching))\r\n        }\r\n    }\r\n}*/\r\n\r\nconst UsersContainer = connect(StateToProps,\r\n    {OnFollow,onUnFollow,setUsers,SetCurrentPage,SetTotalCountOfUsers,ToggleIsFetching})\r\n(UsersAPItoServer)\r\n\r\nexport default UsersContainer"]},"metadata":{},"sourceType":"module"}