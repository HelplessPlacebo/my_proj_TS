{"ast":null,"code":"import _slicedToArray from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"H:\\\\js_projects\\\\1\\\\my-app\\\\src\\\\components\\\\ToDoLists\\\\ToDoListTasks\\\\Task.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport ts from \"./Tasks.module.css\";\nimport classNames from 'classnames';\nimport DeleteButton from \"./DeleteTaskButton\";\nimport TaskDoneIcon from \"./DoneIcone\";\nimport EditTaskButton from \"./EditTaskButton\";\nimport TaskDetails from \"./TaskDetails\";\nimport NotDoneIcon from \"./NotDoneIcon\";\nimport TaskEditForm from \"./TaskEditForm\";\nimport { reduxForm } from \"redux-form\";\nimport EVS from \"../../assetss/common/ValidatorsComponents/ElementsValidators.module.css\";\nimport { DateTransform } from \"../../utils/dateTransform\";\n\nconst Task = props => {\n  let _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      TaskEditMode = _useState2[0],\n      SetTaskEditMode = _useState2[1];\n\n  let _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      SetStatus = _useState4[1];\n\n  let TrueStartDate = DateTransform(status.startDate);\n  let trueObj = Object.assign(status, {\n    startDate: TrueStartDate[0] + \"/\" + TrueStartDate[1] + \"/\" + TrueStartDate[2]\n  });\n  useEffect(() => {\n    SetStatus(props.CurrentTask);\n  }, [props.CurrentTask]);\n\n  const TaskEditModeON = () => {\n    SetTaskEditMode(true);\n  };\n\n  const TaskEditModeOFF = () => {\n    SetTaskEditMode(false);\n  };\n\n  const TaskExecutedStyleForWindow = classNames({\n    [ts.Ramka]: !props.completed,\n    [ts.DoneRamka]: props.completed\n  });\n\n  const SaveNewToDoListTaskInfo = formData => {\n    console.log(formData);\n    props.UpdateTaskInformationThunk(props.ListID, props.TaskID, formData);\n    TaskEditModeOFF();\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  },\n  /*  props.ToDoListTasks.map(el => el.ListId === props.ListID && el.TaskData.items.map(key =>{\r\n         return <div key={key.id}>\r\n             {key.title}\r\n         </div>\r\n         })\r\n     )*/\n  !TaskEditMode ? React.createElement(\"div\", {\n    className: ts.Main,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classNames(ts.MainWrapper),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: ts.TaskEditButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(EditTaskButton, {\n    ShowButtonBlocked: props.ShowButtonBlocked,\n    ButtonSize: \"small\",\n    HandleOnClick: TaskEditModeON,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: TaskExecutedStyleForWindow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: ts.TaskBodyWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, props.completed ? React.createElement(\"div\", {\n    className: ts.iconStatus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(TaskDoneIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    className: ts.iconStatus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(NotDoneIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: ts.Title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, props.TaskTitle), React.createElement(\"div\", {\n    className: ts.ToTrashIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(DeleteButton, {\n    DeleteTaskThunk: props.DeleteTaskThunk,\n    ShowButtonBlocked: props.ShowButtonBlocked,\n    ListID: props.ListID,\n    TaskID: props.TaskID,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(TaskDetails, {\n    trueObj: trueObj,\n    CurrentTask: status,\n    ShowButtonBlockedON: props.ShowButtonBlockedON,\n    ShowButtonBlockedOFF: props.ShowButtonBlockedOFF,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }))))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(TaskEditFormRedux, {\n    initialValues: status,\n    TaskEditModeOFF: TaskEditModeOFF,\n    ListID: props.ListID,\n    TaskID: props.TaskID,\n    onSubmit: SaveNewToDoListTaskInfo,\n    TaskExecutedStyleForWindow: TaskExecutedStyleForWindow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  })));\n};\n\nconst TaskEditFormRedux = reduxForm({\n  form: 'TaskEditorForm'\n})(TaskEditForm);\nexport default Task;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\components\\ToDoLists\\ToDoListTasks\\Task.jsx"],"names":["React","useState","useEffect","ts","classNames","DeleteButton","TaskDoneIcon","EditTaskButton","TaskDetails","NotDoneIcon","TaskEditForm","reduxForm","EVS","DateTransform","Task","props","TaskEditMode","SetTaskEditMode","status","SetStatus","TrueStartDate","startDate","trueObj","Object","assign","CurrentTask","TaskEditModeON","TaskEditModeOFF","TaskExecutedStyleForWindow","Ramka","completed","DoneRamka","SaveNewToDoListTaskInfo","formData","console","log","UpdateTaskInformationThunk","ListID","TaskID","Main","MainWrapper","TaskEditButton","ShowButtonBlocked","TaskBodyWrapper","iconStatus","Title","TaskTitle","ToTrashIcon","DeleteTaskThunk","ShowButtonBlockedON","ShowButtonBlockedOFF","TaskEditFormRedux","form"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from \"react\"\r\nimport ts from \"./Tasks.module.css\"\r\nimport classNames from 'classnames';\r\nimport DeleteButton from \"./DeleteTaskButton\";\r\nimport TaskDoneIcon from \"./DoneIcone\";\r\nimport EditTaskButton from \"./EditTaskButton\";\r\nimport TaskDetails from \"./TaskDetails\";\r\nimport NotDoneIcon from \"./NotDoneIcon\";\r\nimport TaskEditForm from \"./TaskEditForm\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport EVS from \"../../assetss/common/ValidatorsComponents/ElementsValidators.module.css\";\r\nimport {DateTransform} from \"../../utils/dateTransform\";\r\n\r\n\r\nconst Task = (props) => {\r\n\r\n    let [TaskEditMode, SetTaskEditMode] = useState(false)\r\n    let [status, SetStatus] = useState({})\r\n    let TrueStartDate = DateTransform(status.startDate)\r\n\r\n\r\n    let trueObj = Object.assign(status,{startDate:TrueStartDate[0]+\"/\"+TrueStartDate[1]+\"/\"+TrueStartDate[2]})\r\n\r\n    useEffect(() => {\r\n        SetStatus(props.CurrentTask)\r\n        }, [props.CurrentTask]\r\n    )\r\n\r\n\r\n    const TaskEditModeON = () => {\r\n        SetTaskEditMode(true)\r\n    }\r\n    const TaskEditModeOFF = () => {\r\n        SetTaskEditMode(false)\r\n    }\r\n    const TaskExecutedStyleForWindow = classNames({\r\n        [ts.Ramka] : !props.completed,\r\n        [ts.DoneRamka] : props.completed\r\n    })\r\n\r\n    const SaveNewToDoListTaskInfo= (formData)=>{\r\n        console.log(formData)\r\n        props.UpdateTaskInformationThunk(props.ListID,props.TaskID,formData)\r\n        TaskEditModeOFF()\r\n\r\n    }\r\n\r\n    return <div>\r\n        {  /*  props.ToDoListTasks.map(el => el.ListId === props.ListID && el.TaskData.items.map(key =>{\r\n                  return <div key={key.id}>\r\n                      {key.title}\r\n                  </div>\r\n                  })\r\n              )*/\r\n\r\n\r\n            !TaskEditMode ?\r\n            <div  className={ts.Main}>\r\n\r\n                <div className={classNames(ts.MainWrapper)}>\r\n\r\n                    <div className={ts.TaskEditButton}>\r\n                        <EditTaskButton ShowButtonBlocked={props.ShowButtonBlocked} ButtonSize={\"small\"} HandleOnClick={TaskEditModeON}/>\r\n                    </div>\r\n\r\n                    <div className={TaskExecutedStyleForWindow}>\r\n                        <div className={ts.TaskBodyWrapper}>\r\n                            {props.completed ?\r\n                                <div className={ts.iconStatus}>\r\n                                    <TaskDoneIcon/>\r\n                                </div>\r\n                                :\r\n                                <div className={ts.iconStatus}>\r\n                                    <NotDoneIcon/>\r\n                                </div>\r\n                            }\r\n\r\n\r\n                            <div className={ts.Title}>\r\n                                {props.TaskTitle}\r\n                            </div>\r\n\r\n\r\n                            <div className={ts.ToTrashIcon}>\r\n                                <DeleteButton DeleteTaskThunk={props.DeleteTaskThunk}\r\n                                              ShowButtonBlocked={props.ShowButtonBlocked}\r\n                                              ListID={props.ListID} TaskID={props.TaskID}/>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div>\r\n                            <TaskDetails\r\n                                trueObj={trueObj}\r\n                                CurrentTask={status}\r\n                                ShowButtonBlockedON={props.ShowButtonBlockedON}\r\n                                ShowButtonBlockedOFF={props.ShowButtonBlockedOFF}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n                :\r\n                <div>\r\n                    <TaskEditFormRedux\r\n                                       initialValues={status}\r\n                                       TaskEditModeOFF={TaskEditModeOFF}\r\n                                       ListID={props.ListID}\r\n                                       TaskID={props.TaskID}\r\n                                       onSubmit={SaveNewToDoListTaskInfo}\r\n                                       TaskExecutedStyleForWindow={TaskExecutedStyleForWindow}\r\n                    />\r\n                </div>\r\n        }\r\n\r\n    </div>\r\n}\r\nconst TaskEditFormRedux = reduxForm({form: 'TaskEditorForm'})(TaskEditForm)\r\n\r\nexport default Task"]},"metadata":{},"sourceType":"module"}