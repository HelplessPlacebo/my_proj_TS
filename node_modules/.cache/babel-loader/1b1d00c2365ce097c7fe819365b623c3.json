{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { API } from \"../API/requests\";\nimport { stopSubmit } from \"redux-form\";\nconst add_post = 'Profile/ADD_POST';\nconst Set_Profile_Of_User = 'Profile/Set_Profile_Of_User';\nconst Set_Status_Of_User = '/Profile/Set_Status_Of_User';\nconst Set_Photo_Of_User = '/Profile/Set_Photo_Of_User';\nconst Set_Is_My_Page = '/Profile/Set_Is_My_Page';\nconst Set_Is_Any_Contact = '/Profile/Set_Is_Any_Contact';\nconst Err_Name = '/Profile/Err_Name';\nlet DefaultState = {\n  Posts: [],\n  TextNewPost: '',\n  profile: null,\n  status: \"\",\n  email: \"\",\n  password: \"\",\n  rememberMe: false,\n  IsMyPage: false,\n  ErrName: \"\"\n};\n\nconst ProfileReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case add_post:\n      {\n        let NewPost = {\n          id: 6,\n          Post: action.newtext,\n          likesCount: 0\n        };\n        return _objectSpread({}, state, {\n          Posts: [...state.Posts, NewPost]\n        });\n      }\n\n    case Set_Profile_Of_User:\n      {\n        return _objectSpread({}, state, {\n          profile: action.profile\n        });\n      }\n\n    case Set_Status_Of_User:\n      {\n        return _objectSpread({}, state, {\n          status: action.status\n        });\n      }\n\n    case Set_Photo_Of_User:\n      {\n        return _objectSpread({}, state, {\n          profile: _objectSpread({}, state.profile, {\n            photos: action.photo\n          })\n        });\n      }\n\n    case Set_Is_My_Page:\n      {\n        return _objectSpread({}, state, {\n          IsMyPage: action.bool\n        });\n      }\n\n    case Err_Name:\n      {\n        return _objectSpread({}, state, {\n          ErrName: action.ErrName.split(\">\").toLocaleLowerCase()\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const addpost = text => {\n  return {\n    type: add_post,\n    newtext: text\n  };\n};\nexport const setProfileOfUser = profile => {\n  return {\n    type: Set_Profile_Of_User,\n    profile\n  };\n};\nexport const SetStatusOfUser = status => {\n  return {\n    type: Set_Status_Of_User,\n    status\n  };\n};\nexport const SetPhotoOfUser = photo => {\n  return {\n    type: Set_Photo_Of_User,\n    photo\n  };\n};\nexport const SetIsMyPage = bool => {\n  return {\n    type: Set_Is_My_Page,\n    bool\n  };\n};\nexport const SetErrName = ErrName => {\n  return {\n    type: Set_Is_My_Page,\n    ErrName\n  };\n};\nexport const GetProfileThunk = ProfileID => async dispatch => {\n  const data = await API.getProfile(ProfileID);\n  dispatch(setProfileOfUser(data));\n};\nexport const GetProfileStatusThunk = userID => async dispatch => {\n  const data = await API.getProfileStatus(userID);\n  dispatch(SetStatusOfUser(data));\n};\nexport const SetProfileStatusThunk = status => async dispatch => {\n  const data = await API.setProfileStatus(status);\n\n  if (data.resultCode === 0) {\n    dispatch(SetStatusOfUser(status));\n  }\n};\nexport const SetProfilePhotoThunk = photo => async dispatch => {\n  const data = await API.LoadPhotoOnServer(photo);\n\n  if (data.resultCode === 0) {\n    dispatch(SetPhotoOfUser(data.data.photos));\n  }\n};\nexport const UpdateProfileInfoThunk = profile => async (dispatch, getState) => {\n  const profileID = getState().Auth.userId;\n  const data = await API.PutProfileDataOnServer(profile);\n\n  if (data.resultCode === 0) {\n    dispatch(GetProfileThunk(profileID));\n  } else {\n    debugger;\n\n    const kek1 = _objectSpread({}, data);\n\n    let kek = data.messages[0].split(\">\")[1].toLocaleLowerCase();\n    let norm = kek.slice(kek.length - 1);\n    dispatch(SetErrName(data.messages[0]));\n    dispatch(stopSubmit(\"ProfileDataEditorForm\", {\n      \"contacts.\": {\n        ErrName: data.messages[0]\n      }\n    }));\n  }\n};\nexport default ProfileReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\ProfileReduser.js"],"names":["API","stopSubmit","add_post","Set_Profile_Of_User","Set_Status_Of_User","Set_Photo_Of_User","Set_Is_My_Page","Set_Is_Any_Contact","Err_Name","DefaultState","Posts","TextNewPost","profile","status","email","password","rememberMe","IsMyPage","ErrName","ProfileReducer","state","action","type","NewPost","id","Post","newtext","likesCount","photos","photo","bool","split","toLocaleLowerCase","addpost","text","setProfileOfUser","SetStatusOfUser","SetPhotoOfUser","SetIsMyPage","SetErrName","GetProfileThunk","ProfileID","dispatch","data","getProfile","GetProfileStatusThunk","userID","getProfileStatus","SetProfileStatusThunk","setProfileStatus","resultCode","SetProfilePhotoThunk","LoadPhotoOnServer","UpdateProfileInfoThunk","getState","profileID","Auth","userId","PutProfileDataOnServer","kek1","kek","messages","norm","slice","length"],"mappings":";AAAA,SAAQA,GAAR,QAAkB,iBAAlB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,QAAQ,GAAG,kBAAjB;AACA,MAAMC,mBAAmB,GAAG,6BAA5B;AACA,MAAMC,kBAAkB,GAAG,6BAA3B;AACA,MAAMC,iBAAiB,GAAG,4BAA1B;AACA,MAAMC,cAAc,GAAG,yBAAvB;AACA,MAAMC,kBAAkB,GAAG,6BAA3B;AACA,MAAMC,QAAQ,GAAG,mBAAjB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,EADQ;AAEfC,EAAAA,WAAW,EAAE,EAFE;AAGfC,EAAAA,OAAO,EAAE,IAHM;AAIfC,EAAAA,MAAM,EAAE,EAJO;AAKfC,EAAAA,KAAK,EAAE,EALQ;AAMfC,EAAAA,QAAQ,EAAE,EANK;AAOfC,EAAAA,UAAU,EAAE,KAPG;AAQfC,EAAAA,QAAQ,EAAE,KARK;AASfC,EAAAA,OAAO,EAAC;AATO,CAAnB;;AAYA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKpB,QAAL;AAAe;AACX,YAAIqB,OAAO,GAAG;AACVC,UAAAA,EAAE,EAAE,CADM;AAEVC,UAAAA,IAAI,EAAEJ,MAAM,CAACK,OAFH;AAGVC,UAAAA,UAAU,EAAE;AAHF,SAAd;AAKA,iCACOP,KADP;AAEIV,UAAAA,KAAK,EAAE,CAAC,GAAGU,KAAK,CAACV,KAAV,EAAiBa,OAAjB;AAFX;AAIH;;AACD,SAAKpB,mBAAL;AAA0B;AACtB,iCAAWiB,KAAX;AAAkBR,UAAAA,OAAO,EAAES,MAAM,CAACT;AAAlC;AACH;;AAED,SAAKR,kBAAL;AAAyB;AACrB,iCAAWgB,KAAX;AAAkBP,UAAAA,MAAM,EAAEQ,MAAM,CAACR;AAAjC;AACH;;AACD,SAAKR,iBAAL;AAAwB;AACpB,iCACOe,KADP;AAEIR,UAAAA,OAAO,oBAAMQ,KAAK,CAACR,OAAZ;AAAqBgB,YAAAA,MAAM,EAAEP,MAAM,CAACQ;AAApC;AAFX;AAIH;;AACD,SAAKvB,cAAL;AAAqB;AACjB,iCAAWc,KAAX;AAAkBH,UAAAA,QAAQ,EAAEI,MAAM,CAACS;AAAnC;AACH;;AACD,SAAKtB,QAAL;AAAe;AACX,iCAAWY,KAAX;AAAkBF,UAAAA,OAAO,EAAEG,MAAM,CAACH,OAAP,CAAea,KAAf,CAAqB,GAArB,EACvBC,iBADuB;AAA3B;AAGH;;AAED;AACI,aAAOZ,KAAP;AAnCR;AAqCH,CAtCD;;AAwCA,OAAO,MAAMa,OAAO,GAAIC,IAAD,IAAU;AAC7B,SAAO;AAACZ,IAAAA,IAAI,EAAEpB,QAAP;AAAiBwB,IAAAA,OAAO,EAAEQ;AAA1B,GAAP;AACH,CAFM;AAIP,OAAO,MAAMC,gBAAgB,GAAIvB,OAAD,IAAa;AACzC,SAAO;AAACU,IAAAA,IAAI,EAAEnB,mBAAP;AAA4BS,IAAAA;AAA5B,GAAP;AACH,CAFM;AAIP,OAAO,MAAMwB,eAAe,GAAIvB,MAAD,IAAY;AACvC,SAAO;AAACS,IAAAA,IAAI,EAAElB,kBAAP;AAA2BS,IAAAA;AAA3B,GAAP;AACH,CAFM;AAIP,OAAO,MAAMwB,cAAc,GAAIR,KAAD,IAAW;AACrC,SAAO;AAACP,IAAAA,IAAI,EAAEjB,iBAAP;AAA0BwB,IAAAA;AAA1B,GAAP;AACH,CAFM;AAIP,OAAO,MAAMS,WAAW,GAAIR,IAAD,IAAU;AACjC,SAAO;AAACR,IAAAA,IAAI,EAAEhB,cAAP;AAAuBwB,IAAAA;AAAvB,GAAP;AACH,CAFM;AAGP,OAAO,MAAMS,UAAU,GAAIrB,OAAD,IAAa;AACnC,SAAO;AAACI,IAAAA,IAAI,EAAEhB,cAAP;AAAuBY,IAAAA;AAAvB,GAAP;AACH,CAFM;AAKP,OAAO,MAAMsB,eAAe,GAAIC,SAAD,IAAe,MAAOC,QAAP,IAAoB;AAC9D,QAAMC,IAAI,GAAG,MAAM3C,GAAG,CAAC4C,UAAJ,CAAeH,SAAf,CAAnB;AACAC,EAAAA,QAAQ,CAACP,gBAAgB,CAACQ,IAAD,CAAjB,CAAR;AACH,CAHM;AAKP,OAAO,MAAME,qBAAqB,GAAIC,MAAD,IAAY,MAAOJ,QAAP,IAAoB;AACjE,QAAMC,IAAI,GAAG,MAAM3C,GAAG,CAAC+C,gBAAJ,CAAqBD,MAArB,CAAnB;AACAJ,EAAAA,QAAQ,CAACN,eAAe,CAACO,IAAD,CAAhB,CAAR;AACH,CAHM;AAKP,OAAO,MAAMK,qBAAqB,GAAInC,MAAD,IAAY,MAAO6B,QAAP,IAAoB;AACjE,QAAMC,IAAI,GAAG,MAAM3C,GAAG,CAACiD,gBAAJ,CAAqBpC,MAArB,CAAnB;;AACA,MAAI8B,IAAI,CAACO,UAAL,KAAoB,CAAxB,EAA2B;AACvBR,IAAAA,QAAQ,CAACN,eAAe,CAACvB,MAAD,CAAhB,CAAR;AACH;AACJ,CALM;AAOP,OAAO,MAAMsC,oBAAoB,GAAItB,KAAD,IAAW,MAAOa,QAAP,IAAoB;AAC/D,QAAMC,IAAI,GAAG,MAAM3C,GAAG,CAACoD,iBAAJ,CAAsBvB,KAAtB,CAAnB;;AACA,MAAIc,IAAI,CAACO,UAAL,KAAoB,CAAxB,EAA2B;AACvBR,IAAAA,QAAQ,CAACL,cAAc,CAACM,IAAI,CAACA,IAAL,CAAUf,MAAX,CAAf,CAAR;AACH;AACJ,CALM;AAMP,OAAO,MAAMyB,sBAAsB,GAAIzC,OAAD,IAAa,OAAO8B,QAAP,EAAiBY,QAAjB,KAA8B;AAC7E,QAAMC,SAAS,GAAGD,QAAQ,GAAGE,IAAX,CAAgBC,MAAlC;AACA,QAAMd,IAAI,GAAG,MAAM3C,GAAG,CAAC0D,sBAAJ,CAA2B9C,OAA3B,CAAnB;;AACA,MAAI+B,IAAI,CAACO,UAAL,KAAoB,CAAxB,EAA2B;AACvBR,IAAAA,QAAQ,CAACF,eAAe,CAACe,SAAD,CAAhB,CAAR;AACH,GAFD,MAEO;AACH;;AACA,UAAMI,IAAI,qBAAOhB,IAAP,CAAV;;AACA,QAAIiB,GAAG,GAAIjB,IAAI,CAACkB,QAAL,CAAc,CAAd,EAAiB9B,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,EAA+BC,iBAA/B,EAAX;AACA,QAAI8B,IAAI,GAAGF,GAAG,CAACG,KAAJ,CAAUH,GAAG,CAACI,MAAJ,GAAa,CAAvB,CAAX;AACAtB,IAAAA,QAAQ,CAACH,UAAU,CAACI,IAAI,CAACkB,QAAL,CAAc,CAAd,CAAD,CAAX,CAAR;AACAnB,IAAAA,QAAQ,CAACzC,UAAU,CAAC,uBAAD,EAA0B;AAAC,mBAAa;AAAEiB,QAAAA,OAAO,EAAEyB,IAAI,CAACkB,QAAL,CAAc,CAAd;AAAX;AAAd,KAA1B,CAAX,CAAR;AACH;AACJ,CAbM;AAgBP,eAAe1C,cAAf","sourcesContent":["import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst add_post = 'Profile/ADD_POST'\r\nconst Set_Profile_Of_User = 'Profile/Set_Profile_Of_User'\r\nconst Set_Status_Of_User = '/Profile/Set_Status_Of_User'\r\nconst Set_Photo_Of_User = '/Profile/Set_Photo_Of_User'\r\nconst Set_Is_My_Page = '/Profile/Set_Is_My_Page'\r\nconst Set_Is_Any_Contact = '/Profile/Set_Is_Any_Contact'\r\nconst Err_Name = '/Profile/Err_Name'\r\n\r\n\r\nlet DefaultState = {\r\n    Posts: [],\r\n    TextNewPost: '',\r\n    profile: null,\r\n    status: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    rememberMe: false,\r\n    IsMyPage: false,\r\n    ErrName:\"\"\r\n}\r\n\r\nconst ProfileReducer = (state = DefaultState, action) => {\r\n    switch (action.type) {\r\n        case add_post: {\r\n            let NewPost = {\r\n                id: 6,\r\n                Post: action.newtext,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                Posts: [...state.Posts, NewPost],\r\n            }\r\n        }\r\n        case Set_Profile_Of_User: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case Set_Status_Of_User: {\r\n            return {...state, status: action.status}\r\n        }\r\n        case Set_Photo_Of_User: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photo}\r\n            }\r\n        }\r\n        case Set_Is_My_Page: {\r\n            return {...state, IsMyPage: action.bool}\r\n        }\r\n        case Err_Name: {\r\n            return {...state, ErrName: action.ErrName.split(\">\").\r\n                toLocaleLowerCase()\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addpost = (text) => {\r\n    return {type: add_post, newtext: text}\r\n}\r\n\r\nexport const setProfileOfUser = (profile) => {\r\n    return {type: Set_Profile_Of_User, profile}\r\n}\r\n\r\nexport const SetStatusOfUser = (status) => {\r\n    return {type: Set_Status_Of_User, status}\r\n}\r\n\r\nexport const SetPhotoOfUser = (photo) => {\r\n    return {type: Set_Photo_Of_User, photo}\r\n}\r\n\r\nexport const SetIsMyPage = (bool) => {\r\n    return {type: Set_Is_My_Page, bool}\r\n}\r\nexport const SetErrName = (ErrName) => {\r\n    return {type: Set_Is_My_Page, ErrName}\r\n}\r\n\r\n\r\nexport const GetProfileThunk = (ProfileID) => async (dispatch) => {\r\n    const data = await API.getProfile(ProfileID)\r\n    dispatch(setProfileOfUser(data))\r\n}\r\n\r\nexport const GetProfileStatusThunk = (userID) => async (dispatch) => {\r\n    const data = await API.getProfileStatus(userID)\r\n    dispatch(SetStatusOfUser(data))\r\n}\r\n\r\nexport const SetProfileStatusThunk = (status) => async (dispatch) => {\r\n    const data = await API.setProfileStatus(status)\r\n    if (data.resultCode === 0) {\r\n        dispatch(SetStatusOfUser(status))\r\n    }\r\n}\r\n\r\nexport const SetProfilePhotoThunk = (photo) => async (dispatch) => {\r\n    const data = await API.LoadPhotoOnServer(photo)\r\n    if (data.resultCode === 0) {\r\n        dispatch(SetPhotoOfUser(data.data.photos))\r\n    }\r\n}\r\nexport const UpdateProfileInfoThunk = (profile) => async (dispatch, getState) => {\r\n    const profileID = getState().Auth.userId\r\n    const data = await API.PutProfileDataOnServer(profile)\r\n    if (data.resultCode === 0) {\r\n        dispatch(GetProfileThunk(profileID))\r\n    } else {\r\n        debugger\r\n        const kek1 = {...data}\r\n        let kek =  data.messages[0].split(\">\")[1].toLocaleLowerCase()\r\n        let norm = kek.slice(kek.length - 1)\r\n        dispatch(SetErrName(data.messages[0]))\r\n        dispatch(stopSubmit(\"ProfileDataEditorForm\", {\"contacts.\" :{ ErrName: data.messages[0]} }))\r\n    }\r\n}\r\n\r\n\r\nexport default ProfileReducer"]},"metadata":{},"sourceType":"module"}