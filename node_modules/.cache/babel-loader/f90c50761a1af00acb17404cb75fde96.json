{"ast":null,"code":"import _slicedToArray from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"H:\\\\js_projects\\\\1\\\\my-app\\\\src\\\\components\\\\ToDoLists\\\\ToDoListTasks\\\\Task.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport ts from \"./Tasks.module.css\";\nimport classNames from 'classnames';\nimport DeleteButton from \"./DeleteTaskButton\";\nimport TaskDoneIcon from \"./DoneIcone\";\nimport EditTaskButton from \"./EditTaskButton\";\nimport TaskDetails from \"./TaskDetails\";\nimport NotDoneIcon from \"./NotDoneIcon\";\nimport TaskEditForm from \"./TaskEditForm\";\nimport { reduxForm } from \"redux-form\";\n\nconst Task = props => {\n  let _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      TaskEditMode = _useState2[0],\n      SetTaskEditMode = _useState2[1];\n\n  let _useState3 = useState({\n    title: props.CurrentTask.title,\n    description: props.CurrentTask.description,\n    completed: props.CurrentTask.completed,\n    Status: props.CurrentTask.status,\n    priority: props.CurrentTask.priority,\n    startDate: props.CurrentTask.startDate,\n    deadline: props.CurrentTask.deadline\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      SetStatus = _useState4[1];\n\n  const TaskEditModeON = () => {\n    SetTaskEditMode(true);\n  };\n\n  const TaskEditModeOFF = () => {\n    SetTaskEditMode(false);\n  };\n\n  const TaskExecutedStyleForWindow = classNames({\n    [ts.Ramka]: !props.completed,\n    [ts.DoneRamka]: props.completed\n  });\n\n  const SaveNewToDoListTaskInfo = formData => {\n    console.log(formData); // props.ChangeToDoListTitleThunk(props.ListID,props.TaskID,formData)\n\n    TaskEditModeOFF();\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  },\n  /*  props.ToDoListTasks.map(el => el.ListId === props.ListID && el.TaskData.items.map(key =>{\r\n         return <div key={key.id}>\r\n             {key.title}\r\n         </div>\r\n         })\r\n     )*/\n  !TaskEditMode ? React.createElement(\"div\", {\n    className: ts.Main,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classNames(ts.MainWrapper),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: ts.TaskEditButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(EditTaskButton, {\n    ButtonSize: \"small\",\n    HandleOnClick: TaskEditModeON,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: TaskExecutedStyleForWindow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: ts.TaskBodyWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, props.completed ? React.createElement(\"div\", {\n    className: ts.iconStatus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(TaskDoneIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    className: ts.iconStatus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(NotDoneIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: ts.Title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, props.TaskTitle), React.createElement(\"div\", {\n    className: ts.ToTrashIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(DeleteButton, {\n    DeleteTaskThunk: props.DeleteTaskThunk,\n    ShowButtonBlocked: props.ShowButtonBlocked,\n    ListID: props.ListID,\n    TaskID: props.TaskID,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(TaskDetails, {\n    addedDate: props.TaskAddedDate,\n    deadline: props.TaskDeadline,\n    description: props.TaskDescription,\n    ShowButtonBlocked: props.ShowButtonBlocked,\n    ShowButtonBlockedON: props.ShowButtonBlockedON,\n    ShowButtonBlockedOFF: props.ShowButtonBlockedOFF,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }))))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(TaskEditFormRedux, {\n    CurrentTask: props.CurrentTask,\n    initialValues: status,\n    TaskEditModeOFF: TaskEditModeOFF,\n    ListID: props.ListID,\n    TaskID: props.TaskID,\n    onSubmit: SaveNewToDoListTaskInfo,\n    TaskExecutedStyleForWindow: TaskExecutedStyleForWindow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })));\n};\n\nconst TaskEditFormRedux = reduxForm({\n  form: 'TaskEditorForm'\n})(TaskEditForm);\nexport default Task;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\components\\ToDoLists\\ToDoListTasks\\Task.jsx"],"names":["React","useState","useEffect","ts","classNames","DeleteButton","TaskDoneIcon","EditTaskButton","TaskDetails","NotDoneIcon","TaskEditForm","reduxForm","Task","props","TaskEditMode","SetTaskEditMode","title","CurrentTask","description","completed","Status","status","priority","startDate","deadline","SetStatus","TaskEditModeON","TaskEditModeOFF","TaskExecutedStyleForWindow","Ramka","DoneRamka","SaveNewToDoListTaskInfo","formData","console","log","Main","MainWrapper","TaskEditButton","TaskBodyWrapper","iconStatus","Title","TaskTitle","ToTrashIcon","DeleteTaskThunk","ShowButtonBlocked","ListID","TaskID","TaskAddedDate","TaskDeadline","TaskDescription","ShowButtonBlockedON","ShowButtonBlockedOFF","TaskEditFormRedux","form"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from \"react\"\r\nimport ts from \"./Tasks.module.css\"\r\nimport classNames from 'classnames';\r\nimport DeleteButton from \"./DeleteTaskButton\";\r\nimport TaskDoneIcon from \"./DoneIcone\";\r\nimport EditTaskButton from \"./EditTaskButton\";\r\nimport TaskDetails from \"./TaskDetails\";\r\nimport NotDoneIcon from \"./NotDoneIcon\";\r\nimport TaskEditForm from \"./TaskEditForm\";\r\nimport {reduxForm} from \"redux-form\";\r\n\r\n\r\n\r\nconst Task = (props) => {\r\n\r\n    let [TaskEditMode, SetTaskEditMode] = useState(false)\r\n    let [status, SetStatus] = useState({\r\n        title : props.CurrentTask.title,\r\n        description : props.CurrentTask.description,\r\n        completed : props.CurrentTask.completed,\r\n        Status : props.CurrentTask.status,\r\n        priority : props.CurrentTask.priority,\r\n        startDate : props.CurrentTask.startDate,\r\n        deadline : props.CurrentTask.deadline\r\n    })\r\n\r\n\r\n    const TaskEditModeON = () => {\r\n        SetTaskEditMode(true)\r\n    }\r\n    const TaskEditModeOFF = () => {\r\n        SetTaskEditMode(false)\r\n    }\r\n    const TaskExecutedStyleForWindow = classNames({\r\n        [ts.Ramka] : !props.completed,\r\n        [ts.DoneRamka] : props.completed\r\n    })\r\n\r\n    const SaveNewToDoListTaskInfo= (formData)=>{\r\n        console.log(formData)\r\n       // props.ChangeToDoListTitleThunk(props.ListID,props.TaskID,formData)\r\n        TaskEditModeOFF()\r\n\r\n    }\r\n\r\n    return <div>\r\n        {  /*  props.ToDoListTasks.map(el => el.ListId === props.ListID && el.TaskData.items.map(key =>{\r\n                  return <div key={key.id}>\r\n                      {key.title}\r\n                  </div>\r\n                  })\r\n              )*/\r\n            !TaskEditMode ?\r\n            <div  className={ts.Main}>\r\n\r\n                <div className={classNames(ts.MainWrapper)}>\r\n\r\n                    <div className={ts.TaskEditButton}>\r\n                        <EditTaskButton ButtonSize={\"small\"} HandleOnClick={TaskEditModeON}/>\r\n                    </div>\r\n\r\n                    <div className={TaskExecutedStyleForWindow}>\r\n                        <div className={ts.TaskBodyWrapper}>\r\n                            {props.completed ?\r\n                                <div className={ts.iconStatus}>\r\n                                    <TaskDoneIcon/>\r\n                                </div>\r\n                                :\r\n                                <div className={ts.iconStatus}>\r\n                                    <NotDoneIcon/>\r\n                                </div>\r\n                            }\r\n\r\n\r\n                            <div className={ts.Title}>\r\n                                {props.TaskTitle}\r\n                            </div>\r\n\r\n\r\n                            <div className={ts.ToTrashIcon}>\r\n                                <DeleteButton DeleteTaskThunk={props.DeleteTaskThunk}\r\n                                              ShowButtonBlocked={props.ShowButtonBlocked}\r\n                                              ListID={props.ListID} TaskID={props.TaskID}/>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div>\r\n                            <TaskDetails\r\n                                addedDate={props.TaskAddedDate}\r\n                                deadline={props.TaskDeadline}\r\n                                description={props.TaskDescription}\r\n                                ShowButtonBlocked={props.ShowButtonBlocked}\r\n                                ShowButtonBlockedON={props.ShowButtonBlockedON}\r\n                                ShowButtonBlockedOFF={props.ShowButtonBlockedOFF}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n                :\r\n                <div>\r\n                    <TaskEditFormRedux CurrentTask={props.CurrentTask}\r\n                                       initialValues={status}\r\n                                       TaskEditModeOFF={TaskEditModeOFF}\r\n                                       ListID={props.ListID}\r\n                                       TaskID={props.TaskID}\r\n                                       onSubmit={SaveNewToDoListTaskInfo}\r\n                                       TaskExecutedStyleForWindow={TaskExecutedStyleForWindow}\r\n                    />\r\n                </div>\r\n        }\r\n\r\n    </div>\r\n}\r\nconst TaskEditFormRedux = reduxForm({form: 'TaskEditorForm'})(TaskEditForm)\r\n\r\nexport default Task"]},"metadata":{},"sourceType":"module"}