{"ast":null,"code":"import _objectSpread from \"H:\\\\js_projects\\\\1\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { API } from \"../API/requests\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'Auth/SET_USER_DATA';\nconst IsFetching_Toggle = 'Auth/IsFetching_Toggle';\nconst Set_Captcha_Url = 'Auth/Set_Captcha_Url';\nlet DefaultState = {\n  IsLogined: false,\n  IsFetching: false,\n  CaptchaUrl: null,\n  userId: null,\n  login: null,\n  email: null\n};\n\nconst AuthReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      {\n        return _objectSpread({}, state, action.data);\n      }\n\n    case IsFetching_Toggle:\n      {\n        return _objectSpread({}, state, {\n          IsFetching: action.IsFetching\n        });\n      }\n\n    case Set_Captcha_Url:\n      {\n        return _objectSpread({}, state, {\n          CaptchaUrl: action.CaptchaURL\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAuthUser = (userId, email, login, IsLogined) => ({\n  type: SET_USER_DATA,\n  data: {\n    userId,\n    email,\n    login,\n    IsLogined\n  }\n});\nexport const ToggleIsFetching = IsFetching => {\n  return {\n    type: IsFetching_Toggle,\n    IsFetching\n  };\n};\nexport const SetCaptchaUrl = CaptchaURL => {\n  return {\n    type: Set_Captcha_Url,\n    CaptchaURL\n  };\n};\nexport const AuthMeThunk = () => async dispatch => {\n  ToggleIsFetching(true);\n  const AuthInfo = await API.AuthMe(); //возвращает данные авторизованного юзера\n\n  dispatch(ToggleIsFetching(false));\n\n  if (AuthInfo.resultCode === 0) {\n    let _AuthInfo$data = AuthInfo.data,\n        id = _AuthInfo$data.id,\n        login = _AuthInfo$data.login,\n        email = _AuthInfo$data.email;\n    dispatch(SetAuthUser(id, email, login, true));\n  }\n};\nexport const LoginThunk = (email, password, rememberMe, captcha) => async dispatch => {\n  const LoginInfo = await API.Login(email, password, rememberMe, captcha);\n\n  if (LoginInfo.resultCode === 0) {\n    dispatch(AuthMeThunk());\n  } else {\n    if (LoginInfo.resultCode === 10) {\n      dispatch(GetCaptchaThunk());\n    } //@ts-ignore\n\n\n    dispatch(stopSubmit(\"login\", {\n      _error: LoginInfo.messages[0]\n    }));\n  }\n};\nexport const LogOutThunk = () => async dispatch => {\n  const LogOutInfo = await API.LogOut();\n\n  if (LogOutInfo.resultCode === 0) {\n    dispatch(SetAuthUser(null, null, null, false));\n  }\n};\nexport const GetCaptchaThunk = () => async dispatch => {\n  const captchaURL = await API.GetCaptchaFromServer();\n  dispatch(SetCaptchaUrl(captchaURL));\n};\nexport default AuthReducer;","map":{"version":3,"sources":["H:\\js_projects\\1\\my-app\\src\\data\\AuthReducer.ts"],"names":["API","stopSubmit","SET_USER_DATA","IsFetching_Toggle","Set_Captcha_Url","DefaultState","IsLogined","IsFetching","CaptchaUrl","userId","login","email","AuthReducer","state","action","type","data","CaptchaURL","SetAuthUser","ToggleIsFetching","SetCaptchaUrl","AuthMeThunk","dispatch","AuthInfo","AuthMe","resultCode","id","LoginThunk","password","rememberMe","captcha","LoginInfo","Login","GetCaptchaThunk","_error","messages","LogOutThunk","LogOutInfo","LogOut","captchaURL","GetCaptchaFromServer"],"mappings":"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","sourcesContent":["import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GlobalState} from \"./redux-store\";\r\n\r\n\r\nconst SET_USER_DATA = 'Auth/SET_USER_DATA'\r\nconst IsFetching_Toggle = 'Auth/IsFetching_Toggle'\r\nconst Set_Captcha_Url = 'Auth/Set_Captcha_Url'\r\n\r\nexport type SetAuthUserActionType = {\r\n    type: typeof SET_USER_DATA,\r\n    data: {\r\n        userId: number | null\r\n        email: string | null\r\n        login: string | null\r\n        IsLogined: boolean\r\n    }\r\n}\r\n\r\nexport type ToggleIsFetchingActionType = {\r\n    type: typeof IsFetching_Toggle,\r\n    IsFetching: boolean\r\n}\r\n\r\n\r\nexport type SetCaptchaUrlActionType = {\r\n    type: typeof Set_Captcha_Url,\r\n    CaptchaURL: string\r\n}\r\n\r\ntype TAuthReducerActions = SetCaptchaUrlActionType | ToggleIsFetchingActionType | SetAuthUserActionType\r\ntype TAuthThunks = ThunkAction<Promise<void>, GlobalState, unknown, TAuthReducerActions>\r\n\r\n\r\nlet DefaultState = {\r\n    IsLogined: false,\r\n    IsFetching: false,\r\n    CaptchaUrl: null as string | null,\r\n    userId: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null\r\n\r\n}\r\n\r\ntype DefaultAuthState = typeof DefaultState\r\n\r\n\r\nconst AuthReducer = (state: DefaultAuthState = DefaultState, action: TAuthReducerActions): DefaultAuthState => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA : {\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        }\r\n        case IsFetching_Toggle: {\r\n            return {...state, IsFetching: action.IsFetching}\r\n        }\r\n        case Set_Captcha_Url: {\r\n            return {...state, CaptchaUrl: action.CaptchaURL}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetAuthUser = (userId: number | null, email: string | null, login: string | null, IsLogined: boolean): SetAuthUserActionType =>\r\n    ({type: SET_USER_DATA, data: {userId, email, login, IsLogined}})\r\n\r\nexport const ToggleIsFetching = (IsFetching: boolean): ToggleIsFetchingActionType => {\r\n    return {type: IsFetching_Toggle, IsFetching}\r\n}\r\nexport const SetCaptchaUrl = (CaptchaURL: string): SetCaptchaUrlActionType => {\r\n    return {type: Set_Captcha_Url, CaptchaURL}\r\n}\r\n\r\n\r\nexport const AuthMeThunk = (): TAuthThunks =>\r\n    async (dispatch) => {\r\n        ToggleIsFetching(true)\r\n        const AuthInfo = await API.AuthMe() //возвращает данные авторизованного юзера\r\n        dispatch(ToggleIsFetching(false))\r\n        if (AuthInfo.resultCode === 0) {\r\n            let {id, login, email} = AuthInfo.data\r\n            dispatch(SetAuthUser(id, email, login, true))\r\n        }\r\n    }\r\n\r\n\r\nexport const LoginThunk = (email: string, password: string, rememberMe: boolean, captcha?: string | null): TAuthThunks =>\r\n    async (dispatch) => {\r\n        const LoginInfo = await API.Login(email, password, rememberMe, captcha)\r\n        if (LoginInfo.resultCode === 0) {\r\n            dispatch(AuthMeThunk())\r\n        } else {\r\n            if (LoginInfo.resultCode === 10) {\r\n                dispatch(GetCaptchaThunk())\r\n            }\r\n            //@ts-ignore\r\n            dispatch(stopSubmit(\"login\", {_error: LoginInfo.messages[0]}))\r\n        }\r\n    }\r\n\r\nexport const LogOutThunk = (): TAuthThunks => async (dispatch) => {\r\n    const LogOutInfo = await API.LogOut()\r\n    if (LogOutInfo.resultCode === 0) {\r\n        dispatch(SetAuthUser(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const GetCaptchaThunk = (): TAuthThunks => async (dispatch) => {\r\n    const captchaURL = await API.GetCaptchaFromServer()\r\n    dispatch(SetCaptchaUrl(captchaURL))\r\n}\r\n\r\nexport default AuthReducer"]},"metadata":{},"sourceType":"module"}